<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Harrison&#39;s Blog</title>
  
  <subtitle>上善若水任方猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ostenant.coding.me/"/>
  <updated>2018-06-05T15:39:23.025Z</updated>
  <id>https://ostenant.coding.me/</id>
  
  <author>
    <name>Harrison Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式理论(六) - 一致性协议Raft</title>
    <link href="https://ostenant.coding.me/2018/06/05/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA(%E5%85%AD)%20-%20%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AERaft/"/>
    <id>https://ostenant.coding.me/2018/06/05/分布式理论(六) - 一致性协议Raft/</id>
    <published>2018-06-05T13:20:00.000Z</published>
    <updated>2018-06-05T15:39:23.025Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Raft</code> 也是一个 <strong>一致性算法</strong>，和 <code>Paxos</code> 目标相同。但它还有另一个名字 - <strong>易于理解的一致性算法</strong>。<code>Paxos</code> 和 <code>Raft</code> 都是为了实现 <strong>一致性</strong> 产生的。这个过程如同选举一样，<strong>参选者</strong> 需要说服 <strong>大多数选民</strong> (服务器) 投票给他，一旦选定后就跟随其操作。<code>Paxos</code> 和 <code>Raft</code> 的区别在于选举的 <strong>具体过程</strong> 不同。</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h2><p>在进入正题前，给大家分享一个《数学发散思维》中的一个故事，站在不同思维角度上，了解对一个问题理解的差异性。</p><blockquote><p>问题: 甲乙两人轮流在一张圆桌上平放黑白围棋子，每次放一子，棋子不许重叠，谁先没有地方放就输。请问怎样放才能赢？</p></blockquote><p>这个问题有两层意思，第一，有没有一种放法保证必赢？第二，如果有怎么证明？</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Raft_prepare.png" alt=""></p><p>上图回答了这个问题，那就是先行者必胜，这里使用了三种不同的思维方式来阐述: </p><ol><li><p>假如桌子只有一个围棋子那么大。</p></li><li><p>假如桌子无限大，先行者先占住圆心。由于圆是对称图形，所以只要对手还能找到位置放，你总能在对称的另一面找到位置放。</p></li><li><p>一个圆中可画单数个直径相等且互切的小圆。</p></li></ol><p>三种不同的思维方式在可理解性难度上逐渐加深。</p><ol><li><p>第一种是 <strong>极简化思维</strong>，但数学上是 <strong>不严谨</strong> 的。</p></li><li><p>第二种是 <strong>极限思维</strong>，和第一种结合起来就是 <strong>数学归纳法</strong>，在数学上是 <strong>严谨</strong> 的。</p></li><li><p>第三种是 <strong>形象思维</strong>，使用了 <strong>几何学概念</strong>，但对于没有几何学基础知识的人就很难理解了。</p></li></ol><h2 id="什么是Raft协议"><a href="#什么是Raft协议" class="headerlink" title="什么是Raft协议"></a>什么是Raft协议</h2><p><code>Raft</code> 协议将 <code>Server</code> 进程分成三类，分别是 <code>Leader</code>，<code>Candidate</code>，<code>Follower</code>。一个 <code>Server</code> 进程在某一时刻，只能是其中 <strong>一种类型</strong>，但这不是固定的。不同的时刻，它可能拥有不同的类型，一个 <code>Server</code> 进程的类型是如何改变的，后面会有解释。</p><p>在一个由 <code>Raft</code> 协议组织的集群中有三类角色：</p><ul><li><strong>Leader（领袖）</strong></li><li><strong>Follower（群众）</strong></li><li><strong>Candidate（候选人）</strong></li></ul><p>就像一个民主社会，领袖由民众投票选出。刚开始没有 <strong>领袖</strong>，所有集群中的 <strong>参与者</strong> 都是 <strong>群众</strong>，那么首先开启一轮大选。在大选期间 <strong>所有群众</strong> 都能参与竞选，这时所有群众的角色就变成了 <strong>候选人</strong>，民主投票选出领袖后就开始了这届领袖的任期，然后选举结束，所有除 <strong>领袖</strong> 的 <strong>候选人</strong> 又变回 <strong>群众角色</strong> 服从领袖领导。</p><p>这里提到一个概念 <strong>「任期」</strong>，用术语 <code>Term</code> 表达。关于 <code>Raft</code> 协议的核心概念和术语就这么多，而且和现实民主制度非常匹配，所以很容易理解。</p><p>三类角色的变迁图如下，结合后面的选举过程来看很容易理解。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Raft_workflow.png" alt=""></p><h2 id="Leader选举过程"><a href="#Leader选举过程" class="headerlink" title="Leader选举过程"></a>Leader选举过程</h2><p>在极简的思维下，一个最小的 <code>Raft</code> 民主集群需要 <strong>三个参与者</strong>（如下图：<code>A</code>、<code>B</code>、<code>C</code>），这样才可能投出多数票。</p><p>初始状态 <code>ABC</code> 都是 <code>Follower</code>，然后发起选举这时有 <strong>三种</strong> 可能的情形发生。下图中前二种都能选出 <code>Leader</code>，第三种则表明 <strong>本轮投票无效</strong>（<code>Split Votes</code>）。对于第三种，每方都投给了自己，结果没有任何一方获得多数票。之后 <strong>每个参与方</strong> 随机休息一阵（<code>Election Timeout</code>）重新发起投票直到一方获得多数票。这里的关键就是随机 <code>timeout</code>，最先从 <code>timeout</code> 中恢复发起投票的一方，向还在 <code>timeout</code> 中的另外两方 <strong>请求投票</strong>，这时它就只能投给自己，导致很快达成一致。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Raft_election.png" alt=""></p><p>选出 <code>Leader</code> 后，<code>Leader</code> 通过 <strong>定期</strong> 向所有 <code>Follower</code> 发送 <strong>心跳信息</strong> 维持其统治。若 <code>Follower</code> 一段时间未收到 <code>Leader</code> 的 <strong>心跳</strong>，则认为 <code>Leader</code> 可能已经挂了，然后再次发起 <strong>选举</strong> 过程。</p><h2 id="Leader对一致性的影响"><a href="#Leader对一致性的影响" class="headerlink" title="Leader对一致性的影响"></a>Leader对一致性的影响</h2><p><code>Raft</code> 协议 <strong>强依赖</strong> <code>Leader</code> 节点的 <strong>可用性</strong>，以确保集群 <strong>数据的一致性</strong>。<strong>数据的流向</strong> 只能从 <code>Leader</code> 节点向 <code>Follower</code> 节点转移。具体过程如下：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Raft_leader_consistence.png" alt=""></p><ol><li><p>当 <code>Client</code> 向集群 <code>Leader</code> 节点 <strong>提交数据</strong> 后，<code>Leader</code> 节点 <strong>接收到的数据</strong> 处于 <strong>未提交状态</strong>（<code>Uncommitted</code>）。</p></li><li><p>接着 <code>Leader</code> 节点会 <strong>并发地</strong> 向所有 <code>Follower</code> 节点 <strong>复制数据</strong> 并 <strong>等待接收响应</strong>。</p></li><li><p>集群中至少 <strong>超过半数</strong> 的节点 <strong>已接收</strong> 到数据后， <code>Leader</code> 再向 <code>Client</code> 确认数据 <strong>已接收</strong>。</p></li><li><p>一旦向 <code>Client</code> 发出数据接收 <code>Ack</code> 响应后，表明此时 <strong>数据状态</strong> 进入 <strong>已提交</strong>（<code>Committed</code>），<code>Leader</code> 节点再向 <code>Follower</code> 节点发通知告知该 <strong>数据状态已提交</strong>。</p></li></ol><p>在这个过程中，<strong>主节点</strong> 可能在 <strong>任意阶段</strong> 挂掉，看下 <code>Raft</code> 协议如何针对不同阶段保障 <strong>数据一致性</strong> 的。</p><h3 id="1-情形1"><a href="#1-情形1" class="headerlink" title="1. 情形1"></a>1. 情形1</h3><blockquote><p>数据到达 Leader 节点前，这个阶段 Leader 挂掉不影响一致性，不用多说。</p></blockquote><p><img src="http://ols3fdyll.bkt.clouddn.com/Raft_failure_1.png" alt=""></p><h3 id="2-情形2"><a href="#2-情形2" class="headerlink" title="2. 情形2"></a>2. 情形2</h3><blockquote><p>数据到达 Leader 节点，但未复制到 Follower 节点。</p></blockquote><p>这个阶段 <code>Leader</code> 挂掉，数据属于 <strong>未提交状态</strong>，<code>Client</code> 不会收到 <code>Ack</code> 会认为 <strong>超时失败</strong> 可安全发起 <strong>重试</strong>。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Raft_failure_2.png" alt=""></p><p><code>Follower</code> 节点上没有该数据，<strong>重新选主</strong> 后 <code>Client</code> 重试 <strong>重新提交</strong> 可成功。原来的 <code>Leader</code> 节点 <strong>恢复</strong> 后作为 <code>Follower</code> 加入集群，重新从 <strong>当前任期</strong> 的新 <code>Leader</code> 处 <strong>同步数据</strong>，强制保持和 <code>Leader</code> <strong>数据一致</strong>。</p><h3 id="3-情形3"><a href="#3-情形3" class="headerlink" title="3. 情形3"></a>3. 情形3</h3><blockquote><p>数据到达 Leader 节点，成功复制到 Follower 所有节点，但 Follower 还未向 Leader 响应接收。</p></blockquote><p>这个阶段 <code>Leader</code> 挂掉，虽然数据在 <code>Follower</code> 节点处于 <strong>未提交状态</strong>（<code>Uncommitted</code>），但是 <strong>保持一致</strong> 的。重新选出 <code>Leader</code> 后可完成 <strong>数据提交</strong>。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Raft_failure_3.png" alt=""></p><p>此时 <code>Client</code> 由于不知到底提交成功没有，可重试提交。针对这种情况 <code>Raft</code> 要求 <code>RPC</code> 请求实现 <strong>幂等性</strong>，也就是要实现 <strong>内部去重机制</strong>。</p><h3 id="4-情形4"><a href="#4-情形4" class="headerlink" title="4. 情形4"></a>4. 情形4</h3><blockquote><p>数据到达 Leader 节点，成功复制到 Follower 的部分节点，但这部分 Follower 节点还未向 Leader 响应接收。</p></blockquote><p>这个阶段 <code>Leader</code> 挂掉，数据在 <code>Follower</code> 节点处于 <strong>未提交状态</strong>（<code>Uncommitted</code>）且 <strong>不一致</strong>。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Raft_failure_4.png" alt=""></p><p><code>Raft</code> 协议要求投票只能投给拥有 <strong>最新数据</strong> 的节点。所以拥有最新数据的节点会被选为 <code>Leader</code>，然后再 <strong>强制同步数据</strong> 到其他 <code>Follower</code>，保证 <strong>数据不会丢失</strong>并 <strong>最终一致</strong>。</p><h3 id="5-情形5"><a href="#5-情形5" class="headerlink" title="5. 情形5"></a>5. 情形5</h3><blockquote><p>数据到达 Leader 节点，成功复制到 Follower 所有或多数节点，数据在 Leader 处于已提交状态，但在 Follower 处于未提交状态。</p></blockquote><p>这个阶段 <code>Leader</code> 挂掉，<strong>重新选出</strong> 新的 <code>Leader</code> 后的处理流程和阶段 <code>3</code> 一样。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Raft_failure_5.png" alt=""></p><h3 id="6-情形6"><a href="#6-情形6" class="headerlink" title="6. 情形6"></a>6. 情形6</h3><blockquote><p>数据到达 Leader 节点，成功复制到 Follower 所有或多数节点，数据在所有节点都处于已提交状态，但还未响应 Client。</p></blockquote><p>这个阶段 <code>Leader</code> 挂掉，集群内部数据其实已经是 <strong>一致的</strong>，<code>Client</code> 重复重试基于幂等策略对 <strong>一致性无影响</strong>。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Raft_failure_6.png" alt=""></p><h3 id="7-情形7"><a href="#7-情形7" class="headerlink" title="7. 情形7"></a>7. 情形7</h3><blockquote><p>网络分区导致的脑裂情况，出现双 Leader 的现象。</p></blockquote><p><strong>网络分区</strong> 将原先的 <code>Leader</code> 节点和 <code>Follower</code> 节点分隔开，<code>Follower</code> 收不到 <code>Leader</code> 的 <strong>心跳</strong> 将 <strong>重新</strong> 发起选举产生新的 <code>Leader</code>，这时就产生了 <strong>双Leader</strong> 现象。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Raft_failure_7.png" alt=""></p><p>原先的 <code>Leader</code> 独自在一个区，向它提交数据不可能复制到多数节点所以永远提交不成功。向新的 <code>Leader</code> 提交数据可以提交成功。</p><p><strong>网络恢复</strong> 后，旧的 <code>Leader</code> 发现集群中有 <strong>更新任期</strong>（<code>Term</code>）的新 <code>Leader</code> ，则 <strong>自动降级</strong> 为 <code>Follower</code> 并从新 <code>Leader</code> 处 <strong>同步数据</strong> 达成集群 <strong>数据一致</strong>。</p><h3 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h3><p>综上穷举分析了 <strong>最小集群</strong>（<code>3</code> 节点）面临的所有情况，可以看出 <code>Raft</code> 协议都能很好的应对 <strong>一致性问题</strong>，并且很容易理解。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><code>Paxos</code> 算法是 <code>Leslie Lamport</code> 在 <code>1990</code> 年就公开发表在了自己的网站上，想想我们是什么时候才听说的？什么时候才有一个可用的实现？而 <code>Raft</code> 算法是 <code>2013</code> 年发表的，大家在参考 <a href="https://raft.github.io/#implementations" target="_blank" rel="noopener">Raft开源实现库</a>，可以看到有很多基于不同语言的 <strong>开源实现库</strong>，这就是 <strong>可理解性</strong> 的重要性。</p><hr><p>欢迎关注公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Raft&lt;/code&gt; 也是一个 &lt;strong&gt;一致性算法&lt;/strong&gt;，和 &lt;code&gt;Paxos&lt;/code&gt; 目标相同。但它还有另一个名字 - &lt;strong&gt;易于理解的一致性算法&lt;/strong&gt;。&lt;code&gt;Paxos&lt;/code&gt; 和 &lt;code&gt;Raft&lt;/code&gt; 都是为了实现 &lt;strong&gt;一致性&lt;/strong&gt; 产生的。这个过程如同选举一样，&lt;strong&gt;参选者&lt;/strong&gt; 需要说服 &lt;strong&gt;大多数选民&lt;/strong&gt; (服务器) 投票给他，一旦选定后就跟随其操作。&lt;code&gt;Paxos&lt;/code&gt; 和 &lt;code&gt;Raft&lt;/code&gt; 的区别在于选举的 &lt;strong&gt;具体过程&lt;/strong&gt; 不同。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系列" scheme="https://ostenant.coding.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Raft" scheme="https://ostenant.coding.me/tags/Raft/"/>
    
  </entry>
  
  <entry>
    <title>分布式理论(五) - 一致性算法Paxos</title>
    <link href="https://ostenant.coding.me/2018/06/03/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA(%E4%BA%94)%20-%20%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95Paxos/"/>
    <id>https://ostenant.coding.me/2018/06/03/分布式理论(五) - 一致性算法Paxos/</id>
    <published>2018-06-03T13:30:00.000Z</published>
    <updated>2018-06-05T15:38:18.755Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>世界上只有一种一致性算法，就是 <code>Paxos</code>。出自一位 <code>Google</code> 大神之口。<code>Paxos</code> 也是出名的 <strong>晦涩难懂</strong>，推理过程极其复杂。</p><a id="more"></a><p><code>Paxos</code> 有点类似之前说的 <code>2PC</code>，<code>3PC</code>，但是解决了这两种算法各种硬伤。该算法在很多大厂都得到了工程实践，比如阿里的 <code>OceanBase</code> 的 <strong>分布式数据库</strong>，底层就是使用的 <code>Paxos</code> 算法。再比如 <code>Google</code> 的 <code>chubby</code> <strong>分布式锁</strong> 也是用的这个算法。可见该算法在分布式系统中的地位，甚至于，<code>Paxos</code> 就是 <strong>分布式一致性</strong> 的代名词。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-Paxos算法是什么"><a href="#1-Paxos算法是什么" class="headerlink" title="1. Paxos算法是什么"></a>1. Paxos算法是什么</h2><p><code>Paxos</code> 算法是 <strong>基于消息传递</strong> 且具有 <strong>高效容错特性</strong> 的一致性算法，目前公认的解决 <strong>分布式一致性问题</strong> 最有效的算法之一.</p><h2 id="2-Paxos算法产生背景"><a href="#2-Paxos算法产生背景" class="headerlink" title="2. Paxos算法产生背景"></a>2. Paxos算法产生背景</h2><h3 id="2-1-拜占庭将军问题"><a href="#2-1-拜占庭将军问题" class="headerlink" title="2.1. 拜占庭将军问题"></a>2.1. 拜占庭将军问题</h3><p>拜占庭是古代东罗马帝国的首都，由于地域宽广，守卫边境的多个将军（系统中的多个节点）需要通过信使来传递消息，达成某些一致的决定。但由于信使中可能存在叛徒（系统中节点出错），这些叛徒将努力向不同的将军发送不同的消息，试图会干扰一致性的达成。</p><h3 id="2-2-Paxos算法由来"><a href="#2-2-Paxos算法由来" class="headerlink" title="2.2. Paxos算法由来"></a>2.2. Paxos算法由来</h3><p>故事背景是古希腊 <code>Paxos</code> 岛上的多个法官在一个大厅内对一个议案进行表决，如何达成统一的结果。他们之间通过服务人员来传递纸条，但法官可能离开或进入大厅，服务人员可能偷懒去睡觉。</p><h3 id="2-3-产生背景"><a href="#2-3-产生背景" class="headerlink" title="2.3 产生背景"></a>2.3 产生背景</h3><p>在常见的 <strong>分布式系统</strong> 中，总会发生 <strong>节点宕机</strong> 或 <strong>网络异常</strong> (包括消息的 <strong>重复</strong>、<strong>丢失</strong>、<strong>延迟</strong>、<strong>乱序</strong>、<strong>网络分区</strong>) 等情况。</p><p><code>Paxos</code> 算法主要就是解决如何在一个 <strong>发生如上故障</strong> 的分布式系统中，快速正确的在集群内 <strong>对某个值达成一致</strong>，并且保证 <strong>整个系统的一致性</strong>。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/paxos_background.png" alt=""></p><h2 id="3-算法详解"><a href="#3-算法详解" class="headerlink" title="3. 算法详解"></a>3. 算法详解</h2><h3 id="3-1-角色-amp-提案"><a href="#3-1-角色-amp-提案" class="headerlink" title="3.1 角色 &amp; 提案"></a>3.1 角色 &amp; 提案</h3><h4 id="提案-Proposal"><a href="#提案-Proposal" class="headerlink" title="提案 (Proposal)"></a>提案 (Proposal)</h4><blockquote><p>注意：提案的范围&gt;value.后面会讲到，[提案=编号+Value].也可表示为[M,V].<br>以下描述中暂定: 提案=P，Value=V.</p></blockquote><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><ol><li><p><strong>Proposer</strong> : <code>Proposer</code> 可以 <strong>提出提案</strong> (<code>Proposal</code>)。</p></li><li><p><strong>Accecptor</strong> : <code>Acceptor</code> 可以 <strong>接受提案</strong>。一旦接受提案，<strong>提案</strong> 里面的 <code>value</code> 值就被选定了。</p></li><li><p><strong>Learner</strong> : <code>Acceptor</code> 告诉 <code>Learner</code> 哪个提案被选定了，那么 <code>Learner</code> 就学习这个被选择的 <code>value</code>。</p></li></ol><p><img src="http://ols3fdyll.bkt.clouddn.com/propose_acceptor_learner.png" alt=""></p><blockquote><p>在具体的实现中，一个进程即可能是Proposer,也可能是Acceptor，也可能是Learner。</p></blockquote><h3 id="3-2-问题描述"><a href="#3-2-问题描述" class="headerlink" title="3.2. 问题描述"></a>3.2. 问题描述</h3><p><code>Paxos</code> 算法的核心是 <strong>一致性</strong>。所以将从一致性问题的描述来讲解该算法怎么解决实际问题。</p><h4 id="3-2-1-一致性算法的前置条件"><a href="#3-2-1-一致性算法的前置条件" class="headerlink" title="3.2.1. 一致性算法的前置条件"></a>3.2.1. 一致性算法的前置条件</h4><ol><li>在被提出的 <code>P</code> 中，只有一个 <code>V</code> 被选中。</li><li>如果没有 <code>P</code> 被提出，就没有 <code>V</code> 被选中。</li><li>在 <code>P</code> 被选定后，进程都可以学习被选中的 <code>P</code>。</li></ol><h4 id="3-2-2-不同角色通过发送消息进行通信"><a href="#3-2-2-不同角色通过发送消息进行通信" class="headerlink" title="3.2.2. 不同角色通过发送消息进行通信"></a>3.2.2. 不同角色通过发送消息进行通信</h4><ol><li><p>每个角色以任意的速度执行，可能因出错而停止，也可能会重启。一个 <code>value</code> 被选定后，所有的角色可能失败然后重启，除非那些失败后重启的角色能记录某些信息，否则等他们重启后无法确定被选定的值。</p></li><li><p>消息在传递过程中可能出现 <strong>任意时长的延迟</strong>，可能会 <strong>重复</strong>，也可能 <strong>丢失</strong>，但是消息不会被 <strong>损坏</strong>。</p></li></ol><h3 id="3-3-推导过程"><a href="#3-3-推导过程" class="headerlink" title="3.3. 推导过程"></a>3.3. 推导过程</h3><h4 id="3-3-1-只有一个Acceptor"><a href="#3-3-1-只有一个Acceptor" class="headerlink" title="3.3.1. 只有一个Acceptor"></a>3.3.1. 只有一个Acceptor</h4><p><img src="http://ols3fdyll.bkt.clouddn.com/Paxos_Prove_1.png" alt=""></p><p>一个 <code>Acceptor</code> 接受一个 <code>P</code>，那么只有一个 <code>V</code> 被选定。</p><blockquote><p>问题：如果这个 Acceptor 宕机，那么整个系统服务不可用。</p></blockquote><h3 id="3-3-2-多个Acceptor"><a href="#3-3-2-多个Acceptor" class="headerlink" title="3.3.2. 多个Acceptor"></a>3.3.2. 多个Acceptor</h3><p><img src="http://ols3fdyll.bkt.clouddn.com/Multi_Acceptor.png" alt=""></p><blockquote><p>问题：如何在多 Proposer 和多 Acceptor 情况下，选定一个 value？</p></blockquote><p>讲解步骤分两阶段：<strong>约定</strong> <code>P1</code> 和 <strong>约定</strong> <code>P2</code>。</p><h4 id="3-3-2-1-约定P1"><a href="#3-3-2-1-约定P1" class="headerlink" title="3.3.2.1. 约定P1"></a>3.3.2.1. 约定P1</h4><blockquote><p><strong>P1</strong> ：一个 Acceptor 必须接受一个它收到的第一个 P。</p></blockquote><p>如果每个 Proposer 会产生不同的 P，那么多个 Proposer 必定产生多个 P，发给多个 Acceptor。根据 <strong>约定</strong> <code>P1</code>，<code>Acceptor</code> 分别接受到 <code>P</code>，就会导致不同的 <code>V</code> 被选定，如下图所示：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Paxos_Prove_2.png" alt=""></p><p>如上图所示，<code>P1</code> 会产生的问题: <code>v1</code>、<code>v2</code>、<code>v3</code> 都没有被选定，因为他们只有被一个 <code>Acceptor</code> 接受。</p><p>对于上述问题，我们需要一个额外的约定: </p><blockquote><p><strong>P1a</strong> : 一个提案 P 被选定，需要被半数以上 Acceptor 接受.</p></blockquote><p>对于 <code>P1a</code>，其实就意味着 <strong>一个Acceptor必须接受不止一个提案</strong>。</p><p>显然，这与 <code>P1</code> 相矛盾，所以需要重新设计提案。原来的设计是: <code>[提案P = value]</code>，现在重新设计 <code>[提案P = 提案编号 + value]</code>，可表示为 <code>[M，V]</code>。</p><blockquote><p>新问题：多提案被选定，如何保证被选定的提案 P 具有相同的value?</p></blockquote><h4 id="3-3-2-2-约定P2"><a href="#3-3-2-2-约定P2" class="headerlink" title="3.3.2.2. 约定P2"></a>3.3.2.2. 约定P2</h4><blockquote><p><strong>P2</strong> : 如果提案 P[M0,V0] 被选定了，那么所有比 M0 编号更高的，且被选定的 P，其 value 的值也是 V0。</p></blockquote><p>对于 <code>P2</code> 中的 “<strong>被选定</strong>”：一个提案要被选定，首先至少要被一个 <code>Acceptor</code> 批准。因此，可以理解 <code>P2</code> 为：</p><blockquote><p><strong>P2a</strong> : 如果提案 P[M0,V0] 被选定了，那么所有比 M0 编号更高的，且 [被Acceptor批准] 的P，其 value 值也是 V0。</p></blockquote><p>只要满足 <code>P2a</code>，就能满足 <code>P2</code>。<strong>多提案被选择</strong> 的问题解决了，但是由于 <strong>网络不稳定</strong> 或者 <strong>宕机</strong> 的原因（不可避免），会产生新问题：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Paxos_Prove_4.png" alt=""></p><p>假设有 <code>5</code> 个 <code>Acceptor</code>。<code>Proposer2</code> 提出 <code>[M1,V1]</code>的提案，<code>Acceptor2~5</code>（<strong>半数以上</strong>）均接受了该提案，于是对于 <code>Acceptor2~5</code> 和 <code>Proposer2</code> 来讲，它们都认为 <code>V1</code> 被选定。<code>Acceptor1</code> 刚刚从 <strong>宕机状态</strong> 恢复过来（之前 <code>Acceptor1</code> 没有收到过任何提案），此时 <code>Proposer1</code> 向 <code>Acceptor1</code> 发送了 <code>[M2,V2]</code> 的提案 <strong>（V2≠V1且M2&gt;M1）</strong>。对于 <code>Acceptor1</code> 来讲，这是它收到的 <strong>第一个提案</strong>。根据 <code>P1</code>（一个 <code>Acceptor</code> 必须接受它收到的 <strong>第一个提案</strong>），<code>Acceptor1</code> 必须接受该提案。同时 <code>Acceptor1</code> 认为 <code>V2</code> 被选定。</p><p>这就出现了两个问题：</p><ol><li><p><code>Acceptor1</code> 认为 <code>V2</code> 被选定，<code>Acceptor2~5</code> 和<code>Proposer2</code> 认为 <code>V1</code> 被选定。出现了<strong>不一致</strong>。</p></li><li><p><code>V1</code> 被选定了，但是 <strong>编号更高</strong> 的被 <code>Acceptor1</code> 接受的提案 <code>[M2,V2]</code> 的 <code>value</code> 为 <code>V2</code>，且 <strong>V2≠V1</strong>。这就跟 <code>P2a</code>（如果某个 <code>value</code> 为 <code>v</code>的提案被选定了，那么每个 <strong>编号更高</strong> 的被 <code>Acceptor</code> 接受的提案的 <code>value</code> 必须也是 <code>v</code>）<strong>矛盾</strong>了。</p></li></ol><p>基于以上问题，所有就有了 <code>P2b</code>:</p><blockquote><p><strong>P2b</strong> : 如果 P[M0,V0] 被选定后，任何 Proposer 产生的 P，其值也是 V0。</p></blockquote><p>对于 <code>P2b</code> 中的描述，怎样保证 <strong>任何Proposer产生的P，其值也是V0</strong> ？只要满足 <code>P2c</code> 即可：</p><blockquote><p><strong>P2c</strong>: 对于任意的 M、V，如果 [M,V] 被提出，那么存在一个半数以上的 Acceptor 组成的组合 S，满足以下两个条件中的任何一个：<br>① S 中没有一个接受过编号小于 M 的提案。<br>② S 中的 Acceptor 接受过的最大编号的提案的 value 为 V。</p></blockquote><p>推导完毕。。。</p><h3 id="3-4-算法流程"><a href="#3-4-算法流程" class="headerlink" title="3.4. 算法流程"></a>3.4. 算法流程</h3><h4 id="3-4-1-Proposer提出提案"><a href="#3-4-1-Proposer提出提案" class="headerlink" title="3.4.1. Proposer提出提案"></a>3.4.1. Proposer提出提案</h4><p>总体思路如下：</p><h5 id="一-学习阶段：Prepare请求"><a href="#一-学习阶段：Prepare请求" class="headerlink" title="(一). 学习阶段：Prepare请求"></a>(一). 学习阶段：Prepare请求</h5><p><code>Proposer</code> 选择一个新的提案 <code>P[MN,?]</code> 向 <code>Acceptor</code> 集合 <code>S</code>（数目在<strong>半数以上</strong>）发送请求，要求 <code>S</code> 中的每一个 <code>Acceptor</code> 做出如下响应：</p><ol><li><p>如果 <code>Acceptor</code> 没有接受过提案，则向 <code>Proposer</code> 保证 <strong>不再接受编号小于N的提案</strong>。</p></li><li><p>如果 <code>Acceptor</code> 接受过请求，则向 <code>Proposer</code> 返回 <strong>已经接受过的编号小于N的编号最大的提案</strong>。</p></li></ol><h5 id="二-接受阶段：Acceptor请求"><a href="#二-接受阶段：Acceptor请求" class="headerlink" title="(二). 接受阶段：Acceptor请求"></a>(二). 接受阶段：Acceptor请求</h5><ol><li><p>如果 <code>Proposer</code> 收到 <strong>半数以上</strong> 的 <code>Acceptor</code> 响应，则 <strong>生成编号为</strong> <code>N</code>，<code>value</code> 为 <code>V</code> 的提案 <code>[MN,V]</code>，<code>V</code> 为所有响应中 <strong>编号最大</strong> 的提案的 <code>value</code>。</p></li><li><p>如果 <code>Proposer</code> 收到的响应中 <strong>没有提案</strong>，那么 <code>value</code> 由 <code>Proposer</code> <strong>自己生成</strong>，生成后将此提案发给 <code>S</code>，并期望 <code>Acceptor</code> 能接受此提案。</p></li></ol><h4 id="3-4-2-Acceptor接受提案"><a href="#3-4-2-Acceptor接受提案" class="headerlink" title="3.4.2. Acceptor接受提案"></a>3.4.2. Acceptor接受提案</h4><p><code>Acceptor</code> 可以忽略任何请求（包括 <code>Prepare</code> 请求和 <code>Accept</code> 请求）而不用担心破坏 <strong>算法的安全性</strong>。因此，我们这里要讨论的是什么时候 <code>Acceptor</code> 可以响应一个请求。</p><p>对 <code>Acceptor</code> 接受提案给出如下约束：</p><blockquote><p><strong>P1b</strong>：一个 Acceptor 只要尚未响应过任何编号大于 N 的 Prepare 请求，那么就可以接受这个编号为 N 的提案。</p></blockquote><p>如果 <code>Acceptor</code> 收到一个编号为 <code>N</code> 的 <code>Prepare</code> 请求，在此之前它已经 <strong>响应过</strong> 编号大于 <code>N</code> 的 <code>Prepare</code> 请求。根据 <code>P1b</code>，该 <code>Acceptor</code> 不可能接受编号为 <code>N</code> 的提案。因此，该 <code>Acceptor</code> 可以 <strong>忽略</strong> 编号为 <code>N</code> 的 <code>Prepare</code> 请求。当然，也可以回复一个 <code>error</code>，让 <code>Proposer</code> 尽早知道自己的提案 <strong>不会被接受</strong>。</p><p>因此，一个 <code>Acceptor</code> 只需记住：</p><ol><li>已接受的编号最大的提案；</li><li>已响应的请求的最大编号。</li></ol><p><img src="http://ols3fdyll.bkt.clouddn.com/Paxos_Prove_5.png" alt=""></p><h2 id="4-Paxos算法描述"><a href="#4-Paxos算法描述" class="headerlink" title="4. Paxos算法描述"></a>4. Paxos算法描述</h2><p><img src="http://ols3fdyll.bkt.clouddn.com/Paxos_Prove_6.png" alt=""></p><h2 id="5-Learner学习提案"><a href="#5-Learner学习提案" class="headerlink" title="5. Learner学习提案"></a>5. Learner学习提案</h2><p><code>Learner</code> 学习（获取）被选定的 <code>value</code> 有如下三种方案:</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Paxos_Prove_7.png" alt=""></p><h2 id="6-如何保证Paxos算法的活性"><a href="#6-如何保证Paxos算法的活性" class="headerlink" title="6. 如何保证Paxos算法的活性"></a>6. 如何保证Paxos算法的活性</h2><p><img src="http://ols3fdyll.bkt.clouddn.com/Paxos_Prove_8.png" alt=""></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><code>Paxos</code> 在 <strong>节点宕机恢复</strong>、<strong>消息无序或丢失</strong>、<strong>网络分化</strong> 的场景下能保证 <strong>数据的一致性</strong>。而 <code>Paxos</code> 的描述侧重于 <strong>理论</strong>，在实际项目应用中，处理了 <code>N</code> 多实际细节后，可能已经变成了另外一种算法，这时候正确性已经无法得到理论的保证。</p><p>要证明分布式一致性算法的正确性通常比实现算法还困难。所以很多系统实际中使用的都是以 <code>Paxos</code> <strong>理论</strong> 为基础而 <strong>衍生</strong> 出来的变种和简化版。例如 <code>Google</code> 的 <code>Chubby</code>、<code>MegaStore</code>、<code>Spanner</code> 等系统，<code>ZooKeeper</code> 的 <code>ZAB</code> 协议，还有更加容易理解的 <code>Raft</code> 协议。</p><p>大部分系统都是靠在实践中运行很长一段时间，经过验证发现系统已可以基本运行，没有发现大的问题才能上生产环境。</p><hr><p>欢迎关注公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;世界上只有一种一致性算法，就是 &lt;code&gt;Paxos&lt;/code&gt;。出自一位 &lt;code&gt;Google&lt;/code&gt; 大神之口。&lt;code&gt;Paxos&lt;/code&gt; 也是出名的 &lt;strong&gt;晦涩难懂&lt;/strong&gt;，推理过程极其复杂。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系列" scheme="https://ostenant.coding.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Paxos" scheme="https://ostenant.coding.me/tags/Paxos/"/>
    
  </entry>
  
  <entry>
    <title>单元测试利器Mockito框架</title>
    <link href="https://ostenant.coding.me/2018/05/31/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%08%E5%88%A9%E5%99%A8Mockito%E6%A1%86%E6%9E%B6/"/>
    <id>https://ostenant.coding.me/2018/05/31/单元测试利器Mockito框架/</id>
    <published>2018-05-31T15:30:00.000Z</published>
    <updated>2018-06-06T06:04:00.431Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Mockito</code> 是当前最流行的 <strong>单元测试</strong> <code>Mock</code> 框架。采用 <code>Mock</code> 框架，我们可以 <strong>虚拟</strong> 出一个 <strong>外部依赖</strong>，降低测试 <strong>组件</strong> 之间的 <strong>耦合度</strong>，只注重代码的 <strong>流程与结果</strong>，真正地实现测试目的。</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="什么是Mock"><a href="#什么是Mock" class="headerlink" title="什么是Mock"></a>什么是Mock</h2><p><code>Mock</code> 的中文译为仿制的，模拟的，虚假的。对于测试框架来说，即构造出一个模拟/虚假的对象，使我们的测试能顺利进行下去。</p><p><code>Mock</code> 测试就是在测试过程中，对于某些 <strong>不容易构造</strong>（如 <code>HttpServletRequest</code> 必须在 <code>Servlet</code> 容器中才能构造出来）或者不容易获取 <strong>比较复杂</strong> 的对象（如 <code>JDBC</code> 中的 <code>ResultSet</code> 对象），用一个 <strong>虚拟</strong> 的对象（<code>Mock</code> 对象）来创建，以便测试方法。</p><h2 id="为什么使用Mock测试"><a href="#为什么使用Mock测试" class="headerlink" title="为什么使用Mock测试"></a>为什么使用Mock测试</h2><p><strong>单元测试</strong> 是为了验证我们的代码运行正确性，我们注重的是代码的流程以及结果的正确与否。</p><p>对比真实运行代码，可能其中有一些 <strong>外部依赖</strong> 的构建步骤相对麻烦，如果我们还是按照真实代码的构建规则构造出外部依赖，会大大增加单元测试的工作，代码也会参杂太多非测试部分的内容，测试用例显得复杂难懂。</p><p>采用 <code>Mock</code> 框架，我们可以 <strong>虚拟</strong> 出一个 <strong>外部依赖</strong>，只注重代码的 <strong>流程与结果</strong>，真正地实现测试目的。</p><h2 id="Mock测试框架的好处"><a href="#Mock测试框架的好处" class="headerlink" title="Mock测试框架的好处"></a>Mock测试框架的好处</h2><ol><li>可以很简单的虚拟出一个复杂对象（比如虚拟出一个接口的实现类）；</li><li>可以配置 <code>mock</code> 对象的行为；</li><li>可以使测试用例只注重测试流程与结果；</li><li>减少外部类、系统和依赖给单元测试带来的耦合。</li></ol><h2 id="Mockito的流程"><a href="#Mockito的流程" class="headerlink" title="Mockito的流程"></a>Mockito的流程</h2><p><img src="http://ols3fdyll.bkt.clouddn.com/mokito.png" alt=""></p><p>如图所示，使用 <code>Mockito</code> 的大致流程如下:</p><ol><li><p>创建 <strong>外部依赖</strong> 的 <code>Mock</code> 对象, 然后将此 <code>Mock</code> 对象注入到 <strong>测试类</strong> 中；</p></li><li><p>执行 <strong>测试代码</strong>；</p></li><li><p>校验 <strong>测试代码</strong> 是否执行正确。</p></li></ol><h2 id="Mockito的使用"><a href="#Mockito的使用" class="headerlink" title="Mockito的使用"></a>Mockito的使用</h2><p>在 <code>Module</code> 的 <code>build.gradle</code> 中添加如下内容：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">//Mockito for unit tests</span></span><br><span class="line">    testImplementation <span class="string">"org.mockito:mockito-core:2.+"</span></span><br><span class="line">    <span class="comment">//Mockito for Android tests</span></span><br><span class="line">    androidTestImplementation <span class="string">'org.mockito:mockito-android:2.+'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里稍微解释下：</p><ul><li><code>mockito-core</code>: 用于 <strong>本地单元测试</strong>，其测试代码路径位于 <code>module-name/src/test/java/</code></li><li><code>mockito-android</code>: 用于 <strong>设备测试</strong>，即需要运行 <code>android</code> 设备进行测试，其测试代码路径位于 <code>module-name/src/androidTest/java/</code></li></ul><blockquote><p>mockito-core最新版本可以在 Maven 中查询：mockito-core。<br>mockito-android最新版本可以在 Maven 中查询：mockito-android</p></blockquote><h3 id="Mockito的使用示例"><a href="#Mockito的使用示例" class="headerlink" title="Mockito的使用示例"></a>Mockito的使用示例</h3><p>普通单元测试使用 <code>mockito（mockito-core）</code>，路径：<code>module-name/src/test/java/</code></p><p>这里摘用官网的 <code>Demo</code>:</p><h4 id="检验调对象相关行为是否被调用"><a href="#检验调对象相关行为是否被调用" class="headerlink" title="检验调对象相关行为是否被调用"></a>检验调对象相关行为是否被调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mock creation</span></span><br><span class="line">List mockedList = mock(List.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use mock object - it does not throw any "unexpected interaction" exception</span></span><br><span class="line">mockedList.add(<span class="string">"one"</span>); <span class="comment">//调用了add("one")行为</span></span><br><span class="line">mockedList.clear(); <span class="comment">//调用了clear()行为</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Selective, explicit, highly readable verification</span></span><br><span class="line">verify(mockedList).add(<span class="string">"one"</span>); <span class="comment">// 检验add("one")是否已被调用</span></span><br><span class="line">verify(mockedList).clear(); <span class="comment">// 检验clear()是否已被调用</span></span><br></pre></td></tr></table></figure><p>这里 <code>mock</code> 了一个 <code>List</code>（这里只是为了用作 <code>Demo</code> 示例，通常对于 <code>List</code> 这种简单的类对象创建而言，直接 <code>new</code> 一个真实的对象即可，无需进行 <code>mock</code>），<code>verify()</code> 会检验对象是否在前面已经执行了相关行为，这里 <code>mockedList</code> 在 <code>verify</code> 之前已经执行了 <code>add(&quot;one&quot;)</code> 和 <code>clear()</code> 行为，所以<code>verify()</code> 会通过。</p><h4 id="配置-方法行为"><a href="#配置-方法行为" class="headerlink" title="配置/方法行为"></a>配置/方法行为</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// you can mock concrete classes, not only interfaces</span></span><br><span class="line">LinkedList mockedList = mock(LinkedList.class);</span><br><span class="line"><span class="comment">// stubbing appears before the actual execution</span></span><br><span class="line">when(mockedList.get(<span class="number">0</span>)).thenReturn(<span class="string">"first"</span>);</span><br><span class="line"><span class="comment">// the following prints "first"</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">0</span>));</span><br><span class="line"><span class="comment">// the following prints "null" because get(999) was not stubbed</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">999</span>));</span><br></pre></td></tr></table></figure><p>这里对几个比较重要的点进行解析：</p><blockquote><p>when(mockedList.get(0)).thenReturn(“first”)</p></blockquote><p>这句话 <code>Mockito</code> 会解析为：当对象 <code>mockedList</code> 调用 <code>get()</code>方法，并且参数为 <code>0</code> 时，返回结果为<code>&quot;first&quot;</code>，这相当于定制了我们 <code>mock</code> 对象的行为结果（<code>mock LinkedList</code> 对象为 <code>mockedList</code>，指定其行为 <code>get(0)</code>，则返回结果为 <code>&quot;first&quot;</code>)。</p><blockquote><p>mockedList.get(999)</p></blockquote><p>由于 <code>mockedList</code> 没有指定 <code>get(999)</code> 的行为，所以其结果为 <code>null</code>。因为 <code>Mockito</code> 的底层原理是使用 <code>cglib</code> 动态生成一个 <strong>代理类对象</strong>，因此，<code>mock</code> 出来的对象其实质就是一个 <strong>代理</strong>，该代理在 <strong>没有配置/指定行为</strong> 的情况下，默认返回 <strong>空值</strong>。</p><p>上面的 <code>Demo</code> 使用的是 <strong>静态方法</strong> <code>mock()</code> 模拟出一个实例，我们还可以通过注解 <code>@Mock</code> 也模拟出一个实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mock</span></span><br><span class="line"><span class="keyword">private</span> Intent mIntent;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="keyword">public</span> MockitoRule mockitoRule = MockitoJUnit.rule();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mockAndroid</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Intent intent = mockIntent();</span><br><span class="line">    assertThat(intent.getAction()).isEqualTo(<span class="string">"com.yn.test.mockito"</span>);</span><br><span class="line">    assertThat(intent.getStringExtra(<span class="string">"Name"</span>)).isEqualTo(<span class="string">"Whyn"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Intent <span class="title">mockIntent</span><span class="params">()</span></span>&#123;</span><br><span class="line">    when(mIntent.getAction()).thenReturn(<span class="string">"com.yn.test.mockito"</span>);</span><br><span class="line">    when(mIntent.getStringExtra(<span class="string">"Name"</span>)).thenReturn(<span class="string">"Whyn"</span>);</span><br><span class="line">    <span class="keyword">return</span> mIntent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于标记有 <code>@Mock</code>, <code>@Spy</code>, <code>@InjectMocks</code> 等注解的成员变量的 <strong>初始化</strong> 到目前为止有 <code>2</code> 种方法：</p><ol><li><p>对 <code>JUnit</code> 测试类添加 <code>@RunWith(MockitoJUnitRunner.class)</code></p></li><li><p>在标示有 <code>@Before</code> 方法内调用初始化方法：<code>MockitoAnnotations.initMocks(Object)</code></p></li></ol><p>上面的测试用例，对于 <code>@Mock</code> 等注解的成员变量的初始化又多了一种方式 <code>MockitoRule</code>。规则 <code>MockitoRule</code> 会自动帮我们调用 <code>MockitoAnnotations.initMocks(this)</code> 去 <strong>实例化</strong> 出 <strong>注解</strong> 的成员变量，我们就无需手动进行初始化了。</p><h2 id="Mockito的重要方法"><a href="#Mockito的重要方法" class="headerlink" title="Mockito的重要方法"></a>Mockito的重要方法</h2><h3 id="实例化虚拟对象"><a href="#实例化虚拟对象" class="headerlink" title="实例化虚拟对象"></a>实例化虚拟对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// You can mock concrete classes, not just interfaces</span></span><br><span class="line">LinkedList mockedList = mock(LinkedList.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stubbing</span></span><br><span class="line">when(mockedList.get(<span class="number">0</span>)).thenReturn(<span class="string">"first"</span>);</span><br><span class="line">when(mockedList.get(<span class="number">1</span>)).thenThrow(<span class="keyword">new</span> RuntimeException());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Following prints "first"</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">0</span>));</span><br><span class="line"><span class="comment">// Following throws runtime exception</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">1</span>));</span><br><span class="line"><span class="comment">// Following prints "null" because get(999) was not stubbed</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">999</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Although it is possible to verify a stubbed invocation, usually it's just redundant</span></span><br><span class="line"><span class="comment">// If your code cares what get(0) returns, then something else breaks (often even before verify() gets executed).</span></span><br><span class="line"><span class="comment">// If your code doesn't care what get(0) returns, then it should not be stubbed. Not convinced? See here.</span></span><br><span class="line">verify(mockedList).get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li><p>对于所有方法，<code>mock</code> 对象默认返回 <code>null</code>，<strong>原始类型/原始类型包装类</strong> 默认值，或者 <strong>空集合</strong>。比如对于 <code>int/Integer</code> 类型，则返回 <code>0</code>，对于 <code>boolean/Boolean</code> 则返回 <code>false</code>。</p></li><li><p>行为配置（<code>stub</code>）是可以被复写的：比如通常的对象行为是具有一定的配置，但是测试方法可以复写这个行为。请谨记行为复写可能表明潜在的行为太多了。</p></li><li><p>一旦配置了行为，方法总是会返回 <strong>配置值</strong>，无论该方法被调用了多少次。</p></li><li><p>最后一次行为配置是更加重要的，当你为一个带有相同参数的相同方法配置了很多次，最后一次起作用。</p></li></ul><h3 id="参数匹配"><a href="#参数匹配" class="headerlink" title="参数匹配"></a>参数匹配</h3><p><code>Mockito</code> 通过参数对象的 <code>equals()</code> 方法来验证参数是否一致，当需要更多的灵活性时，可以使用参数匹配器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stubbing using built-in anyInt() argument matcher</span></span><br><span class="line">when(mockedList.get(anyInt())).thenReturn(<span class="string">"element"</span>);</span><br><span class="line"><span class="comment">// Stubbing using custom matcher (let's say isValid() returns your own matcher implementation):</span></span><br><span class="line">when(mockedList.contains(argThat(isValid()))).thenReturn(<span class="string">"element"</span>);</span><br><span class="line"><span class="comment">// Following prints "element"</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">999</span>));</span><br><span class="line"><span class="comment">// You can also verify using an argument matcher</span></span><br><span class="line">verify(mockedList).get(anyInt());</span><br><span class="line"><span class="comment">// Argument matchers can also be written as Java 8 Lambdas</span></span><br><span class="line">verify(mockedList).add(argThat(someString -&gt; someString.length() &gt; <span class="number">5</span>));</span><br></pre></td></tr></table></figure><p><strong>参数匹配器</strong> 允许更加灵活的 <strong>验证</strong> 和 <strong>行为配置</strong>。更多 <strong>内置匹配器</strong> 和 <strong>自定义参数匹配器</strong> 例子请参考：<code>ArgumentMatchers</code>，<code>MockitoHamcrest</code></p><blockquote><p>注意：如果使用了参数匹配器，那么所有的参数都需要提供一个参数匹配器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">verify(mock).someMethod(anyInt(), anyString(), eq(<span class="string">"third argument"</span>));</span><br><span class="line"><span class="comment">// Above is correct - eq() is also an argument matcher</span></span><br><span class="line">verify(mock).someMethod(anyInt(), anyString(), <span class="string">"third argument"</span>);</span><br><span class="line"><span class="comment">// Above is incorrect - exception will be thrown because third argument is given without an argument matcher.</span></span><br></pre></td></tr></table></figure><p>类似 <code>anyObject()</code>，<code>eq()</code> 这类匹配器并不返回匹配数值。他们内部记录一个 <strong>匹配器堆栈</strong> 并返回一个空值（通常为 <code>null</code>）。这个实现是为了匹配 <code>java</code> 编译器的 <strong>静态类型安全</strong>，这样做的后果就是你不能在 <strong>检验/配置方法</strong> 外使用 <code>anyObject()</code>，<code>eq()</code> 等方法。</p><h3 id="校验次数"><a href="#校验次数" class="headerlink" title="校验次数"></a>校验次数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">LinkedList mockedList = mock(LinkedList.class);</span><br><span class="line"><span class="comment">// Use mock</span></span><br><span class="line">mockedList.add(<span class="string">"once"</span>);</span><br><span class="line">mockedList.add(<span class="string">"twice"</span>);</span><br><span class="line">mockedList.add(<span class="string">"twice"</span>);</span><br><span class="line">mockedList.add(<span class="string">"three times"</span>);</span><br><span class="line">mockedList.add(<span class="string">"three times"</span>);</span><br><span class="line">mockedList.add(<span class="string">"three times"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Follow two verifications work exactly the same - times(1) is used by default</span></span><br><span class="line">verify(mockedList).add(<span class="string">"once"</span>);</span><br><span class="line">verify(mockedList, times(<span class="number">1</span>)).add(<span class="string">"once"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exact number of invocations verification</span></span><br><span class="line">verify(mockedList, times(<span class="number">2</span>)).add(<span class="string">"twice"</span>);</span><br><span class="line">verify(mockedList, times(<span class="number">3</span>)).add(<span class="string">"three times"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Verification using never(). never() is an alias to times(0)</span></span><br><span class="line">verify(mockedList, never()).add(<span class="string">"never happened"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Verification using atLeast()/atMost()</span></span><br><span class="line">verify(mockedList, atLeastOnce()).add(<span class="string">"three times"</span>);</span><br><span class="line">verify(mockedList, atLeast(<span class="number">2</span>)).add(<span class="string">"three times"</span>);</span><br><span class="line">verify(mockedList, atMost(<span class="number">5</span>)).add(<span class="string">"three times"</span>);</span><br></pre></td></tr></table></figure><p>校验次数方法常用的有如下几个：</p><table><thead><tr><th style="text-align:left">Method</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:left">times(n)</td><td style="text-align:left">次数为n，默认为1（times(1)）</td></tr><tr><td style="text-align:left">never()</td><td style="text-align:left">次数为0，相当于times(0)</td></tr><tr><td style="text-align:left">atLeast(n)</td><td style="text-align:left">最少n次</td></tr><tr><td style="text-align:left">atLeastOnce()</td><td style="text-align:left">最少一次</td></tr><tr><td style="text-align:left">atMost(n)</td><td style="text-align:left">最多n次</td></tr></tbody></table><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doThrow(<span class="keyword">new</span> RuntimeException()).when(mockedList).clear();</span><br><span class="line"><span class="comment">// following throws RuntimeException</span></span><br><span class="line">mockedList.clear();</span><br></pre></td></tr></table></figure><h3 id="按顺序校验"><a href="#按顺序校验" class="headerlink" title="按顺序校验"></a>按顺序校验</h3><p>有时对于一些行为，有先后顺序之分，所以，当我们在校验时，就需要考虑这个行为的先后顺序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A. Single mock whose methods must be invoked in a particular order</span></span><br><span class="line">List singleMock = mock(List.class);</span><br><span class="line"><span class="comment">// Use a single mock</span></span><br><span class="line">singleMock.add(<span class="string">"was added first"</span>);</span><br><span class="line">singleMock.add(<span class="string">"was added second"</span>);</span><br><span class="line"><span class="comment">// Create an inOrder verifier for a single mock</span></span><br><span class="line">InOrder inOrder = inOrder(singleMock);</span><br><span class="line"><span class="comment">// Following will make sure that add is first called with "was added first, then with "was added second"</span></span><br><span class="line">inOrder.verify(singleMock).add(<span class="string">"was added first"</span>);</span><br><span class="line">inOrder.verify(singleMock).add(<span class="string">"was added second"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// B. Multiple mocks that must be used in a particular order</span></span><br><span class="line">List firstMock = mock(List.class);</span><br><span class="line">List secondMock = mock(List.class);</span><br><span class="line"><span class="comment">// Use mocks</span></span><br><span class="line">firstMock.add(<span class="string">"was called first"</span>);</span><br><span class="line">secondMock.add(<span class="string">"was called second"</span>);</span><br><span class="line"><span class="comment">// Create inOrder object passing any mocks that need to be verified in order</span></span><br><span class="line">InOrder inOrder = inOrder(firstMock, secondMock);</span><br><span class="line"><span class="comment">// Following will make sure that firstMock was called before secondMock</span></span><br><span class="line">inOrder.verify(firstMock).add(<span class="string">"was called first"</span>);</span><br><span class="line">inOrder.verify(secondMock).add(<span class="string">"was called second"</span>);</span><br></pre></td></tr></table></figure><h3 id="存根连续调用"><a href="#存根连续调用" class="headerlink" title="存根连续调用"></a>存根连续调用</h3><p>对于同一个方法，如果我们想让其在 <strong>多次调用</strong> 中分别 <strong>返回不同</strong> 的数值，那么就可以使用存根连续调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">when(mock.someMethod(<span class="string">"some arg"</span>))</span><br><span class="line">    .thenThrow(<span class="keyword">new</span> RuntimeException())</span><br><span class="line">    .thenReturn(<span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// First call: throws runtime exception:</span></span><br><span class="line">mock.someMethod(<span class="string">"some arg"</span>);</span><br><span class="line"><span class="comment">// Second call: prints "foo"</span></span><br><span class="line">System.out.println(mock.someMethod(<span class="string">"some arg"</span>));</span><br><span class="line"><span class="comment">// Any consecutive call: prints "foo" as well (last stubbing wins).</span></span><br><span class="line">System.out.println(mock.someMethod(<span class="string">"some arg"</span>));</span><br></pre></td></tr></table></figure><p>也可以使用下面更简洁的存根连续调用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">when(mock.someMethod(<span class="string">"some arg"</span>)).thenReturn(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意：存根连续调用要求必须使用链式调用，如果使用的是同个方法的多个存根配置，那么只有最后一个起作用（覆盖前面的存根配置）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All mock.someMethod("some arg") calls will return "two"</span></span><br><span class="line">when(mock.someMethod(<span class="string">"some arg"</span>).thenReturn(<span class="string">"one"</span>)</span><br><span class="line">when(mock.someMethod(<span class="string">"some arg"</span>).thenReturn(<span class="string">"two"</span>)</span><br></pre></td></tr></table></figure><h3 id="无返回值函数"><a href="#无返回值函数" class="headerlink" title="无返回值函数"></a>无返回值函数</h3><p>对于 <strong>返回类型</strong> 为 <code>void</code> 的方法，存根要求使用另一种形式的 <code>when(Object)</code> 函数，因为编译器要求括号内不能存在 <code>void</code> 方法。</p><p>例如，存根一个返回类型为 <code>void</code> 的方法，要求调用时抛出一个异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doThrow(<span class="keyword">new</span> RuntimeException()).when(mockedList).clear();</span><br><span class="line"><span class="comment">// Following throws RuntimeException:</span></span><br><span class="line">mockedList.clear();</span><br></pre></td></tr></table></figure><h3 id="监视真实对象"><a href="#监视真实对象" class="headerlink" title="监视真实对象"></a>监视真实对象</h3><p>前面使用的都是 <code>mock</code> 出来一个对象。这样，当 <strong>没有配置/存根</strong> 其具体行为的话，结果就会返回 <strong>空类型</strong>。而如果使用 <strong>特务对象</strong>（<code>spy</code>），那么对于 <strong>没有存根</strong> 的行为，它会调用 <strong>原来对象</strong> 的方法。可以把 <code>spy</code> 想象成局部 <code>mock</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">List spy = spy(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optionally, you can stub out some methods:</span></span><br><span class="line">when(spy.size()).thenReturn(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// Use the spy calls *real* methods</span></span><br><span class="line">spy.add(<span class="string">"one"</span>);</span><br><span class="line">spy.add(<span class="string">"two"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prints "one" - the first element of a list</span></span><br><span class="line">System.out.println(spy.get(<span class="number">0</span>));</span><br><span class="line"><span class="comment">// Size() method was stubbed - 100 is printed</span></span><br><span class="line">System.out.println(spy.size());</span><br><span class="line"><span class="comment">// Optionally, you can verify</span></span><br><span class="line">verify(spy).add(<span class="string">"one"</span>);</span><br><span class="line">verify(spy).add(<span class="string">"two"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意：由于 spy 是局部 mock，所以有时候使用 when(Object) 时，无法做到存根作用。此时，就可以考虑使用 doReturn() | Answer() | Throw() 这类方法进行存根：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">List spy = spy(list);</span><br><span class="line"><span class="comment">// Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)</span></span><br><span class="line">when(spy.get(<span class="number">0</span>)).thenReturn(<span class="string">"foo"</span>);</span><br><span class="line"><span class="comment">// You have to use doReturn() for stubbing</span></span><br><span class="line">doReturn(<span class="string">"foo"</span>).when(spy).get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><code>spy</code> 并不是 <strong>真实对象</strong> 的 <strong>代理</strong>。相反的，它对传递过来的 <strong>真实对象</strong> 进行 <strong>克隆</strong>。所以，对 <strong>真实对象</strong> 的任何操作，<code>spy</code> 对象并不会感知到。同理，对 <code>spy</code> 对象的任何操作，也不会影响到 <strong>真实对象</strong>。</p><p>当然，如果使用 <code>mock</code> 进行对象的 <strong>局部</strong> <code>mock</code>，通过 <code>doCallRealMethod() | thenCallRealMethod()</code> 方法也是可以的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// You can enable partial mock capabilities selectively on mocks:</span></span><br><span class="line">Foo mock = mock(Foo.class);</span><br><span class="line"><span class="comment">// Be sure the real implementation is 'safe'.</span></span><br><span class="line"><span class="comment">// If real implementation throws exceptions or depends on specific state of the object then you're in trouble.</span></span><br><span class="line">when(mock.someMethod()).thenCallRealMethod();</span><br></pre></td></tr></table></figure><h3 id="测试驱动开发"><a href="#测试驱动开发" class="headerlink" title="测试驱动开发"></a>测试驱动开发</h3><p>以 <strong>行为驱动开发</strong> 的格式使用 //given //when //then 注释为测试用法基石编写测试用例，这正是 <code>Mockito</code> 官方编写测试用例方法，强烈建议使用这种方式测试编写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.BDDMockito.*;</span><br><span class="line"></span><br><span class="line">Seller seller = mock(Seller.class);</span><br><span class="line">Shop shop = <span class="keyword">new</span> Shop(seller);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldBuyBread</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// Given</span></span><br><span class="line">    given(seller.askForBread()).willReturn(<span class="keyword">new</span> Bread());</span><br><span class="line">    <span class="comment">// When</span></span><br><span class="line">    Goods goods = shop.buyBread();</span><br><span class="line">    <span class="comment">// Then</span></span><br><span class="line">    assertThat(goods, containBread());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义错误校验输出信息"><a href="#自定义错误校验输出信息" class="headerlink" title="自定义错误校验输出信息"></a>自定义错误校验输出信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Will print a custom message on verification failure</span></span><br><span class="line">verify(mock, description(<span class="string">"This will print on failure"</span>)).someMethod();</span><br><span class="line"><span class="comment">// Will work with any verification mode</span></span><br><span class="line">verify(mock, times(<span class="number">2</span>).description(<span class="string">"someMethod should be called twice"</span>)).someMethod();</span><br></pre></td></tr></table></figure><h3 id="InjectMock"><a href="#InjectMock" class="headerlink" title="@InjectMock"></a>@InjectMock</h3><p>构造器，方法，成员变量依赖注入<br>使用 <code>@InjectMock</code> 注解时，<code>Mockito</code> 会检查 <strong>类构造器</strong>，<strong>方法</strong> 或 <strong>成员变量</strong>，依据它们的 <strong>类型</strong> 进行自动 <code>mock</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectMockTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDatabase database;</span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> ArticleManager manager;</span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> MockitoRule mockitoRule = MockitoJUnit.rule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInjectMock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Calls addListener with an instance of ArticleListener</span></span><br><span class="line">        manager.initialize();</span><br><span class="line">        <span class="comment">// Validate that addListener was called</span></span><br><span class="line">        verify(database).addListener(any(ArticleListener.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleManager</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> User user;</span><br><span class="line">        <span class="keyword">private</span> ArticleDatabase database;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ArticleManager</span><span class="params">(User user, ArticleDatabase database)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">            <span class="keyword">this</span>.user = user;</span><br><span class="line">            <span class="keyword">this</span>.database = database;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            database.addListener(<span class="keyword">new</span> ArticleListener());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleListener</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDatabase</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(ArticleListener listener)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成员变量 <code>manager</code> 类型为 <code>ArticleManager</code>，它的上面标识别了 <code>@InjectMocks</code>。这意味着要 <code>mock</code> 出 <code>manager</code>，<code>Mockito</code> 需要先自动 <code>mock</code> 出 <code>ArticleManager</code> 所需的 <strong>构造参数</strong>（即：<code>user</code> 和 <code>database</code>），最终 <code>mock</code> 得到一个 <code>ArticleManager</code>，赋值给 <code>manager</code>。</p><h3 id="参数捕捉"><a href="#参数捕捉" class="headerlink" title="参数捕捉"></a>参数捕捉</h3><p><code>ArgumentCaptor</code> 允许在 <code>verify</code> 的时候获取 <strong>方法参数内容</strong>，这使得我们能在 <strong>测试过程</strong> 中能对 <strong>调用方法参数</strong> 进行 <strong>捕捉</strong> 并 <strong>测试</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="keyword">public</span> MockitoRule mockitoRule = MockitoJUnit.rule();</span><br><span class="line"><span class="meta">@Captor</span></span><br><span class="line"><span class="keyword">private</span> ArgumentCaptor&lt;List&lt;String&gt;&gt; captor;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testArgumentCaptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; asList = Arrays.asList(<span class="string">"someElement_test"</span>, <span class="string">"someElement"</span>);</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; mockedList = mock(List.class);</span><br><span class="line">    mockedList.addAll(asList);</span><br><span class="line"></span><br><span class="line">    verify(mockedList).addAll(captor.capture()); <span class="comment">// When verify,you can capture the arguments of the calling method</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; capturedArgument = captor.getValue();</span><br><span class="line">    assertThat(capturedArgument, hasItem(<span class="string">"someElement"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mocktio的局限"><a href="#Mocktio的局限" class="headerlink" title="Mocktio的局限"></a>Mocktio的局限</h2><ol><li>不能 <code>mock</code> 静态方法；</li><li>不能 <code>mock</code> 构造器；</li><li>不能 <code>mock</code> <code>equals()</code> 和 <code>hashCode()</code> 方法。</li></ol><hr><p>欢迎扫码关注公众号：零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Mockito&lt;/code&gt; 是当前最流行的 &lt;strong&gt;单元测试&lt;/strong&gt; &lt;code&gt;Mock&lt;/code&gt; 框架。采用 &lt;code&gt;Mock&lt;/code&gt; 框架，我们可以 &lt;strong&gt;虚拟&lt;/strong&gt; 出一个 &lt;strong&gt;外部依赖&lt;/strong&gt;，降低测试 &lt;strong&gt;组件&lt;/strong&gt; 之间的 &lt;strong&gt;耦合度&lt;/strong&gt;，只注重代码的 &lt;strong&gt;流程与结果&lt;/strong&gt;，真正地实现测试目的。&lt;/p&gt;
    
    </summary>
    
      <category term="测试框架系列" scheme="https://ostenant.coding.me/categories/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Mockito" scheme="https://ostenant.coding.me/tags/Mockito/"/>
    
  </entry>
  
  <entry>
    <title>2018服务端架构师技术图谱</title>
    <link href="https://ostenant.coding.me/2018/05/30/2018%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/"/>
    <id>https://ostenant.coding.me/2018/05/30/2018服务端架构师技术图谱/</id>
    <published>2018-05-30T14:46:00.000Z</published>
    <updated>2018-06-07T04:26:55.619Z</updated>
    
    <content type="html"><![CDATA[<hr><p>本文摘自 <code>github</code> 上的一篇长约 <code>10</code> 万字服务端架构师技术总结归纳文档，覆盖广度包括数据结构、算法、并发、操作系统、设计模式、运维、中间件、网络、数据库、搜索引擎、性能、大数据、安全、常见开源框架、分布式、设计思想、项目管理和技术资源等。</p><a id="more"></a><p><img src="http://ols3fdyll.bkt.clouddn.com/2018.jpeg" alt=""></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#数据结构">数据结构</a><ul><li><a href="#队列">队列</a></li><li><a href="#集合">集合</a></li><li><a href="#链表数组">链表、数组</a></li><li><a href="#字典关联数组">字典、关联数组</a></li><li><a href="#栈">栈</a></li><li><a href="#树">树</a><ul><li><a href="#二叉树">二叉树</a></li><li><a href="#完全二叉树">完全二叉树</a></li><li><a href="#平衡二叉树">平衡二叉树</a></li><li><a href="#二叉查找树bst">二叉查找树（BST）</a></li><li><a href="#红黑树">红黑树</a></li><li><a href="#b-bb树">B-，B+，B*树</a></li><li><a href="#lsm-树">LSM 树</a></li></ul></li><li><a href="#bitset">BitSet</a></li></ul></li><li><a href="#常用算法">常用算法</a><ul><li><a href="#排序查找算法">排序、查找算法</a><ul><li><a href="#选择排序">选择排序</a></li><li><a href="#冒泡排序">冒泡排序</a></li><li><a href="#插入排序">插入排序</a></li><li><a href="#快速排序">快速排序</a></li><li><a href="#归并排序">归并排序</a></li><li><a href="#希尔排序">希尔排序</a></li><li><a href="#堆排序">堆排序</a></li><li><a href="#计数排序">计数排序</a></li><li><a href="#桶排序">桶排序</a></li><li><a href="#基数排序">基数排序</a></li><li><a href="#二分查找">二分查找</a></li><li><a href="#java-中的排序工具">Java 中的排序工具</a></li></ul></li><li><a href="#布隆过滤器">布隆过滤器</a></li><li><a href="#字符串比较">字符串比较</a><ul><li><a href="#kmp-算法">KMP 算法</a></li></ul></li><li><a href="#深度优先广度优先">深度优先、广度优先</a></li><li><a href="#贪心算法">贪心算法</a></li><li><a href="#回溯算法">回溯算法</a></li><li><a href="#剪枝算法">剪枝算法</a></li><li><a href="#动态规划">动态规划</a></li><li><a href="#朴素贝叶斯">朴素贝叶斯</a></li><li><a href="#推荐算法">推荐算法</a></li><li><a href="#最小生成树算法">最小生成树算法</a></li><li><a href="#最短路径算法">最短路径算法</a></li></ul></li><li><a href="#并发">并发</a><ul><li><a href="#多线程">多线程</a></li><li><a href="#线程安全">线程安全</a></li><li><a href="#一致性事务">一致性、事务</a><ul><li><a href="#事务-acid-特性">事务 ACID 特性</a></li><li><a href="#事务的隔离级别">事务的隔离级别</a></li><li><a href="#mvcc">MVCC</a></li></ul></li><li><a href="#锁">锁</a><ul><li><a href="#java中的锁和同步类">Java中的锁和同步类</a></li><li><a href="#公平锁--非公平锁">公平锁 &amp; 非公平锁</a></li><li><a href="#悲观锁">悲观锁</a></li><li><a href="#乐观锁--cas">乐观锁 &amp; CAS</a></li><li><a href="#aba-问题">ABA 问题</a></li><li><a href="#copyonwrite容器">CopyOnWrite容器</a></li><li><a href="#ringbuffer">RingBuffer</a></li><li><a href="#可重入锁--不可重入锁">可重入锁 &amp; 不可重入锁</a></li><li><a href="#互斥锁--共享锁">互斥锁 &amp; 共享锁</a></li><li><a href="#死锁">死锁</a></li></ul></li></ul></li><li><a href="#操作系统">操作系统</a><ul><li><a href="#计算机原理">计算机原理</a></li><li><a href="#cpu">CPU</a><ul><li><a href="#多级缓存">多级缓存</a></li></ul></li><li><a href="#进程">进程</a></li><li><a href="#线程">线程</a></li><li><a href="#协程">协程</a></li><li><a href="#linux">Linux</a></li></ul></li><li><a href="#设计模式">设计模式</a><ul><li><a href="#设计模式的六大原则">设计模式的六大原则</a></li><li><a href="#23种常见设计模式">23种常见设计模式</a></li><li><a href="#应用场景">应用场景</a></li><li><a href="#单例模式">单例模式</a></li><li><a href="#责任链模式">责任链模式</a></li><li><a href="#mvc">MVC</a></li><li><a href="#ioc">IOC</a></li><li><a href="#aop">AOP</a></li><li><a href="#uml">UML</a></li><li><a href="#微服务思想">微服务思想</a><ul><li><a href="#康威定律">康威定律</a></li></ul></li></ul></li><li><a href="#运维--统计--技术支持">运维 &amp; 统计 &amp; 技术支持</a><ul><li><a href="#常规监控">常规监控</a></li><li><a href="#apm">APM</a></li><li><a href="#统计分析">统计分析</a></li><li><a href="#持续集成cicd">持续集成(CI/CD)</a><ul><li><a href="#jenkins">Jenkins</a></li><li><a href="#环境分离">环境分离</a></li></ul></li><li><a href="#自动化运维">自动化运维</a><ul><li><a href="#ansible">Ansible</a></li><li><a href="#puppet">puppet</a></li><li><a href="#chef">chef</a></li></ul></li><li><a href="#测试">测试</a><ul><li><a href="#tdd-理论">TDD 理论</a></li><li><a href="#单元测试">单元测试</a></li><li><a href="#压力测试">压力测试</a></li><li><a href="#全链路压测">全链路压测</a></li><li><a href="#ab-灰度蓝绿测试">A/B 、灰度、蓝绿测试</a></li></ul></li><li><a href="#虚拟化">虚拟化</a><ul><li><a href="#kvm">KVM</a></li><li><a href="#xen">Xen</a></li><li><a href="#openvz">OpenVZ</a></li></ul></li><li><a href="#容器技术">容器技术</a><ul><li><a href="#docker">Docker</a></li></ul></li><li><a href="#云技术">云技术</a><ul><li><a href="#openstack">OpenStack</a></li></ul></li><li><a href="#devops">DevOps</a></li><li><a href="#文档管理">文档管理</a></li></ul></li><li><a href="#中间件">中间件</a><ul><li><a href="#web-server">Web Server</a><ul><li><a href="#nginx">Nginx</a></li><li><a href="#openresty">OpenResty</a></li><li><a href="#apache-httpd">Apache Httpd</a></li><li><a href="#tomcat">Tomcat</a><ul><li><a href="#架构原理">架构原理</a></li><li><a href="#调优方案">调优方案</a></li></ul></li><li><a href="#jetty">Jetty</a></li></ul></li><li><a href="#缓存">缓存</a><ul><li><a href="#本地缓存">本地缓存</a></li></ul></li><li><a href="#客户端缓存">客户端缓存</a></li><li><a href="#服务端缓存">服务端缓存</a><ul><li><a href="#web缓存">Web缓存</a></li><li><a href="#memcached">Memcached</a></li><li><a href="#redis">Redis</a><ul><li><a href="#架构">架构</a></li><li><a href="#回收策略">回收策略</a></li></ul></li><li><a href="#tair">Tair</a></li></ul></li><li><a href="#消息队列">消息队列</a><ul><li><a href="#消息总线">消息总线</a></li><li><a href="#消息的顺序">消息的顺序</a></li><li><a href="#rabbitmq">RabbitMQ</a></li><li><a href="#rocketmq">RocketMQ</a></li><li><a href="#activemq">ActiveMQ</a></li><li><a href="#kafka">Kafka</a></li><li><a href="#redis-消息推送">Redis 消息推送</a></li><li><a href="#zeromq">ZeroMQ</a></li></ul></li><li><a href="#定时调度">定时调度</a><ul><li><a href="#单机定时调度">单机定时调度</a></li><li><a href="#分布式定时调度">分布式定时调度</a></li></ul></li><li><a href="#rpc">RPC</a><ul><li><a href="#dubbo">Dubbo</a></li><li><a href="#thrift">Thrift</a></li><li><a href="#grpc">gRPC</a></li></ul></li><li><a href="#数据库中间件">数据库中间件</a><ul><li><a href="#sharding-jdbc">Sharding Jdbc</a></li></ul></li><li><a href="#日志系统">日志系统</a><ul><li><a href="#日志搜集">日志搜集</a></li></ul></li><li><a href="#配置中心">配置中心</a></li><li><a href="#api-网关">API 网关</a></li></ul></li><li><a href="#网络">网络</a><ul><li><a href="#协议">协议</a><ul><li><a href="#osi-七层协议">OSI 七层协议</a></li><li><a href="#tcpip">TCP/IP</a></li><li><a href="#http">HTTP</a></li><li><a href="#http20">HTTP2.0</a></li><li><a href="#https">HTTPS</a></li></ul></li><li><a href="#网络模型">网络模型</a><ul><li><a href="#epoll">Epoll</a></li><li><a href="#java-nio">Java NIO</a></li><li><a href="#kqueue">kqueue</a></li></ul></li><li><a href="#连接和短连接">连接和短连接</a></li><li><a href="#框架">框架</a></li><li><a href="#零拷贝zero-copy">零拷贝（Zero-copy）</a></li><li><a href="#序列化二进制协议">序列化(二进制协议)</a><ul><li><a href="#hessian">Hessian</a></li><li><a href="#protobuf">Protobuf</a></li></ul></li></ul></li><li><a href="#数据库">数据库</a><ul><li><a href="#基础理论">基础理论</a><ul><li><a href="#数据库设计的三大范式">数据库设计的三大范式</a></li></ul></li><li><a href="#mysql">MySQL</a><ul><li><a href="#原理">原理</a></li><li><a href="#innodb">InnoDB</a></li><li><a href="#优化">优化</a></li><li><a href="#索引">索引</a><ul><li><a href="#聚集索引-非聚集索引">聚集索引, 非聚集索引</a></li><li><a href="#复合索引">复合索引</a></li><li><a href="#自适应哈希索引ahi">自适应哈希索引(AHI)</a></li></ul></li><li><a href="#explain">explain</a></li></ul></li><li><a href="#nosql">NoSQL</a><ul><li><a href="#mongodb">MongoDB</a></li><li><a href="#hbase">Hbase</a></li></ul></li></ul></li><li><a href="#搜索引擎">搜索引擎</a><ul><li><a href="#搜索引擎原理">搜索引擎原理</a></li><li><a href="#lucene">Lucene</a></li><li><a href="#elasticsearch">Elasticsearch</a></li><li><a href="#solr">Solr</a></li><li><a href="#sphinx">sphinx</a></li></ul></li><li><a href="#性能">性能</a><ul><li><a href="#性能优化方法论">性能优化方法论</a></li><li><a href="#容量评估">容量评估</a></li><li><a href="#cdn-网络">CDN 网络</a></li><li><a href="#连接池">连接池</a></li><li><a href="#性能调优">性能调优</a></li></ul></li><li><a href="#大数据">大数据</a><ul><li><a href="#流式计算">流式计算</a><ul><li><a href="#storm">Storm</a></li><li><a href="#flink">Flink</a></li><li><a href="#kafka-stream">Kafka Stream</a></li><li><a href="#应用场景-1">应用场景</a></li></ul></li><li><a href="#hadoop">Hadoop</a><ul><li><a href="#hdfs">HDFS</a></li><li><a href="#mapreduce">MapReduce</a></li><li><a href="#yarn">Yarn</a></li></ul></li><li><a href="#spark">Spark</a></li></ul></li><li><a href="#安全">安全</a><ul><li><a href="#web-安全">web 安全</a><ul><li><a href="#xss">XSS</a></li><li><a href="#csrf">CSRF</a></li><li><a href="#sql-注入">SQL 注入</a></li><li><a href="#hash-dos">Hash Dos</a></li><li><a href="#脚本注入">脚本注入</a></li><li><a href="#漏洞扫描工具">漏洞扫描工具</a></li><li><a href="#验证码">验证码</a></li></ul></li><li><a href="#ddos-防范">DDoS 防范</a></li><li><a href="#用户隐私信息保护">用户隐私信息保护</a></li><li><a href="#序列化漏洞">序列化漏洞</a></li><li><a href="#加密解密">加密解密</a><ul><li><a href="#对称加密">对称加密</a></li><li><a href="#哈希算法">哈希算法</a></li><li><a href="#非对称加密">非对称加密</a></li></ul></li><li><a href="#服务器安全">服务器安全</a></li><li><a href="#数据安全">数据安全</a><ul><li><a href="#数据备份">数据备份</a></li></ul></li><li><a href="#网络隔离">网络隔离</a><ul><li><a href="#内外网分离">内外网分离</a></li><li><a href="#登录跳板机">登录跳板机</a></li></ul></li><li><a href="#授权认证">授权、认证</a><ul><li><a href="#rbac">RBAC</a></li><li><a href="#oauth20">OAuth2.0</a></li><li><a href="#双因素认证2fa">双因素认证（2FA）</a></li><li><a href="#单点登录sso">单点登录(SSO)</a></li></ul></li></ul></li><li><a href="#常用开源框架">常用开源框架</a><ul><li><a href="#开源协议">开源协议</a></li><li><a href="#日志框架">日志框架</a><ul><li><a href="#log4jlog4j2">Log4j、Log4j2</a></li><li><a href="#logback">Logback</a></li></ul></li><li><a href="#orm">ORM</a></li><li><a href="#网络框架">网络框架</a></li><li><a href="#web-框架">Web 框架</a><ul><li><a href="#spring-家族">Spring 家族</a></li></ul></li><li><a href="#工具框架">工具框架</a></li></ul></li><li><a href="#分布式设计">分布式设计</a><ul><li><a href="#扩展性设计">扩展性设计</a></li><li><a href="#稳定性--高可用">稳定性 &amp; 高可用</a><ul><li><a href="#硬件负载均衡">硬件负载均衡</a></li><li><a href="#软件负载均衡">软件负载均衡</a></li><li><a href="#限流">限流</a></li><li><a href="#应用层容灾">应用层容灾</a></li><li><a href="#跨机房容灾">跨机房容灾</a></li><li><a href="#容灾演练流程">容灾演练流程</a></li><li><a href="#平滑启动">平滑启动</a></li></ul></li><li><a href="#数据库扩展">数据库扩展</a><ul><li><a href="#读写分离模式">读写分离模式</a></li><li><a href="#分片模式">分片模式</a></li></ul></li><li><a href="#服务治理">服务治理</a><ul><li><a href="#服务注册与发现">服务注册与发现</a></li><li><a href="#服务路由控制">服务路由控制</a></li></ul></li><li><a href="#分布式一致">分布式一致</a><ul><li><a href="#cap-与-base-理论">CAP 与 BASE 理论</a></li><li><a href="#分布式锁">分布式锁</a></li><li><a href="#分布式一致性算法">分布式一致性算法</a><ul><li><a href="#paxos">PAXOS</a></li><li><a href="#zab">Zab</a></li><li><a href="#raft">Raft</a></li><li><a href="#gossip">Gossip</a></li><li><a href="#两阶段提交多阶段提交">两阶段提交、多阶段提交</a></li></ul></li><li><a href="#幂等">幂等</a></li><li><a href="#分布式一致方案">分布式一致方案</a></li><li><a href="#分布式-leader-节点选举">分布式 Leader 节点选举</a></li><li><a href="#tcctryconfirmcancel-柔性事务">TCC(Try/Confirm/Cancel) 柔性事务</a></li></ul></li><li><a href="#分布式文件系统">分布式文件系统</a></li><li><a href="#唯一id-生成">唯一ID 生成</a><ul><li><a href="#全局唯一id">全局唯一ID</a></li></ul></li><li><a href="#一致性hash算法">一致性Hash算法</a></li></ul></li><li><a href="#设计思想--开发模式">设计思想 &amp; 开发模式</a><ul><li><a href="#ddddomain-driven-design---领域驱动设计">DDD(Domain-driven Design - 领域驱动设计)</a><ul><li><a href="#命令查询职责分离cqrs">命令查询职责分离(CQRS)</a></li><li><a href="#贫血充血模型">贫血，充血模型</a></li></ul></li><li><a href="#actor-模式">Actor 模式</a></li><li><a href="#响应式编程">响应式编程</a><ul><li><a href="#reactor">Reactor</a></li><li><a href="#rxjava">RxJava</a></li><li><a href="#vertx">Vert.x</a></li></ul></li><li><a href="#dodaf20">DODAF2.0</a></li><li><a href="#serverless">Serverless</a></li><li><a href="#service-mesh">Service Mesh</a></li></ul></li><li><a href="#项目管理">项目管理</a><ul><li><a href="#架构评审">架构评审</a></li><li><a href="#重构">重构</a></li><li><a href="#代码规范">代码规范</a></li><li><a href="#代码-review">代码 Review</a></li><li><a href="#rup">RUP</a></li><li><a href="#看板管理">看板管理</a></li><li><a href="#scrum">SCRUM</a></li><li><a href="#敏捷开发">敏捷开发</a></li><li><a href="#极限编程xp">极限编程（XP）</a></li><li><a href="#结对编程">结对编程</a></li><li><a href="#fmea管理模式">FMEA管理模式</a></li></ul></li><li><a href="#通用业务术语">通用业务术语</a></li><li><a href="#技术趋势">技术趋势</a></li><li><a href="#政策法规">政策、法规</a><ul><li><a href="#法律">法律</a><ul><li><a href="#严格遵守刑法253法条">严格遵守刑法253法条</a></li></ul></li></ul></li><li><a href="#架构师素质">架构师素质</a></li><li><a href="#团队管理">团队管理</a><ul><li><a href="#招聘">招聘</a></li></ul></li><li><a href="#资讯">资讯</a><ul><li><a href="#行业资讯">行业资讯</a></li><li><a href="#公众号列表">公众号列表</a></li><li><a href="#博客">博客</a><ul><li><a href="#团队博客">团队博客</a></li><li><a href="#个人博客">个人博客</a></li></ul></li><li><a href="#综合门户社区">综合门户、社区</a></li><li><a href="#问答讨论类社区">问答、讨论类社区</a></li><li><a href="#行业数据分析">行业数据分析</a></li><li><a href="#专项网站">专项网站</a></li><li><a href="#其他类">其他类</a></li><li><a href="#推荐参考书">推荐参考书</a><ul><li><a href="#在线电子书">在线电子书</a></li><li><a href="#纸质书">纸质书</a><ul><li><a href="#开发方面">开发方面</a></li><li><a href="#架构方面">架构方面</a></li><li><a href="#技术管理方面">技术管理方面</a></li><li><a href="#基础理论-1">基础理论</a></li><li><a href="#工具方面">工具方面</a></li><li><a href="#大数据方面">大数据方面</a></li></ul></li></ul></li></ul></li><li><a href="#技术资源">技术资源</a><ul><li><a href="#开源资源">开源资源</a></li><li><a href="#手册文档教程">手册、文档、教程</a></li><li><a href="#在线课堂">在线课堂</a></li><li><a href="#会议活动">会议、活动</a></li><li><a href="#常用app">常用APP</a></li><li><a href="#找工作">找工作</a></li><li><a href="#工具">工具</a></li><li><a href="#代码托管">代码托管</a></li><li><a href="#文件服务">文件服务</a></li></ul></li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul><li><p><a href="https://www.cnblogs.com/lemon-flm/p/7877898.html" target="_blank" rel="noopener">《java队列——queue详细分析》</a></p><ul><li>非阻塞队列：ConcurrentLinkedQueue(无界线程安全)，采用CAS机制（compareAndSwapObject原子操作）。</li><li>阻塞队列：ArrayBlockingQueue(有界)、LinkedBlockingQueue（无界）、DelayQueue、PriorityBlockingQueue，采用锁机制；使用 ReentrantLock 锁。</li></ul></li><li><p><a href="https://www.cnblogs.com/mantu/p/5802393.html" target="_blank" rel="noopener">《LinkedList、ConcurrentLinkedQueue、LinkedBlockingQueue对比分析》</a></p></li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul><li><a href="https://blog.csdn.net/qq_33642117/article/details/52040345" target="_blank" rel="noopener">《Java Set集合的详解》</a></li></ul><h3 id="链表、数组"><a href="#链表、数组" class="headerlink" title="链表、数组"></a>链表、数组</h3><ul><li><a href="https://blog.csdn.net/wz249863091/article/details/52853360" target="_blank" rel="noopener">《Java集合详解–什么是List》</a></li></ul><h3 id="字典、关联数组"><a href="#字典、关联数组" class="headerlink" title="字典、关联数组"></a>字典、关联数组</h3><ul><li><a href="https://baike.xsoftlab.net/view/250.html" target="_blank" rel="noopener">《Java map 详解 - 用法、遍历、排序、常用API等》</a></li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul><li><a href="https://blog.csdn.net/javazejian/article/details/53362993" target="_blank" rel="noopener">《java数据结构与算法之栈（Stack）设计与实现》</a></li><li><a href="http://www.runoob.com/java/java-stack-class.html" target="_blank" rel="noopener">《Java Stack 类》</a></li><li><a href="https://blog.csdn.net/f2006116/article/details/51375225" target="_blank" rel="noopener">《java stack的详细实现分析》</a><ul><li>Stack 是线程安全的。</li><li>内部使用数组保存数据，不够时翻倍。</li></ul></li></ul><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p>每个节点最多有两个叶子节点。</p><ul><li><a href="https://blog.csdn.net/cai2016/article/details/52589952" target="_blank" rel="noopener">《二叉树》</a></li></ul><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><ul><li><a href="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin" target="_blank" rel="noopener">《完全二叉树》</a><ul><li>叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树。</li></ul></li></ul><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><p>左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><ul><li><a href="http://www.cnblogs.com/polly333/p/4798944.html" target="_blank" rel="noopener">《浅谈数据结构-平衡二叉树》</a></li><li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-2-3-Search-Tree.html" target="_blank" rel="noopener">《浅谈算法和数据结构: 八 平衡查找树之2-3树》</a></li></ul><h4 id="二叉查找树（BST）"><a href="#二叉查找树（BST）" class="headerlink" title="二叉查找树（BST）"></a>二叉查找树（BST）</h4><p>二叉查找树（Binary Search Tree），也称有序二叉树（ordered binary tree）,排序二叉树（sorted binary tree）。</p><ul><li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-Binary-Search-Tree.html" target="_blank" rel="noopener">《浅谈算法和数据结构: 七 二叉查找树》</a></li></ul><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><ul><li><a href="https://blog.csdn.net/sun_tttt/article/details/65445754" target="_blank" rel="noopener">《最容易懂得红黑树》</a><ul><li>添加阶段后，左旋或者右旋从而再次达到平衡。 </li></ul></li><li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-Red-Black-Tree.html" target="_blank" rel="noopener">《浅谈算法和数据结构: 九 平衡查找树之红黑树》</a></li></ul><h4 id="B-，B-，B-树"><a href="#B-，B-，B-树" class="headerlink" title="B-，B+，B*树"></a>B-，B+，B*树</h4><p>MySQL是基于B+树聚集索引组织表</p><ul><li><a href="https://blog.csdn.net/aqzwss/article/details/53074186" target="_blank" rel="noopener">《B-树，B+树，B*树详解》</a></li><li><a href="https://blog.csdn.net/bigtree_3721/article/details/73632405" target="_blank" rel="noopener">《B-树，B+树与B*树的优缺点比较》</a><ul><li>B+ 树的叶子节点链表结构相比于 B- 树便于扫库，和范围检索。<h4 id="LSM-树"><a href="#LSM-树" class="headerlink" title="LSM 树"></a>LSM 树</h4></li></ul></li></ul><p>LSM（Log-Structured Merge-Trees）和 B+ 树相比，是牺牲了部分读的性能来换取写的性能(通过批量写入)，实现读写之间的。<br>Hbase、LevelDB、Tair（Long DB）、nessDB 采用 LSM 树的结构。LSM可以快速建立索引。</p><ul><li><p><a href="https://blog.csdn.net/dbanote/article/details/8897599" target="_blank" rel="noopener">《LSM树 VS B+树》</a></p><ul><li>B+ 树读性能好，但由于需要有序结构，当key比较分散时，磁盘寻道频繁，造成写性能。</li><li>LSM 是将一个大树拆分成N棵小树，先写到内存（无寻道问题，性能高），在内存中构建一颗有序小树（有序树），随着小树越来越大，内存的小树会flush到磁盘上。当读时，由于不知道数据在哪棵小树上，因此必须遍历（二分查找）所有的小树，但在每颗小树内部数据是有序的。</li></ul></li><li><p><a href="https://blog.csdn.net/u014774781/article/details/52105708" target="_blank" rel="noopener">《LSM树（Log-Structured Merge Tree）存储引擎》</a></p><ul><li>极端的说，基于LSM树实现的HBase的写性能比MySQL高了一个数量级，读性能低了一个数量级。</li><li>优化方式：Bloom filter 替代二分查找；compact 小数位大树，提高查询性能。</li><li>Hbase 中，内存中达到一定阈值后，整体flush到磁盘上、形成一个文件（B+数），HDFS不支持update操作，所以Hbase做整体flush而不是merge update。flush到磁盘上的小树，定期会合并成一个大树。</li></ul></li></ul><h3 id="BitSet"><a href="#BitSet" class="headerlink" title="BitSet"></a>BitSet</h3><p>经常用于大规模数据的排重检查。</p><ul><li><a href="http://www.runoob.com/java/java-bitset-class.html" target="_blank" rel="noopener">《Java Bitset类》</a></li><li><a href="https://blog.csdn.net/caiandyong/article/details/51581160" target="_blank" rel="noopener">《Java BitSet（位集）》</a></li></ul><h2 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h2><ul><li><a href="https://blog.csdn.net/gane_cheng/article/details/52652705" target="_blank" rel="noopener">《常见排序算法及对应的时间复杂度和空间复杂度》</a></li></ul><h3 id="排序、查找算法"><a href="#排序、查找算法" class="headerlink" title="排序、查找算法"></a>排序、查找算法</h3><ul><li><a href="https://blog.csdn.net/gane_cheng/article/details/52652705" target="_blank" rel="noopener">《常见排序算法及对应的时间复杂度和空间复杂度》</a></li></ul><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><ul><li><a href="https://www.cnblogs.com/shen-hua/p/5424059.html" target="_blank" rel="noopener">《Java中的经典算法之选择排序（SelectionSort）》</a><ul><li>每一趟从待排序的记录中选出最小的元素，顺序放在已排好序的序列最后，直到全部记录排序完毕。</li></ul></li></ul><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><ul><li><a href="https://blog.csdn.net/shuaizai88/article/details/73250615" target="_blank" rel="noopener">《冒泡排序的2种写法》</a><ul><li>相邻元素前后交换、把最大的排到最后。</li><li>时间复杂度 O(n²) </li></ul></li></ul><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><ul><li><a href="https://www.cnblogs.com/hapjin/p/5517667.html" target="_blank" rel="noopener">《排序算法总结之插入排序》</a></li></ul><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><ul><li><a href="http://developer.51cto.com/art/201403/430986.htm" target="_blank" rel="noopener">《坐在马桶上看算法：快速排序》</a><ul><li>一侧比另外一次都大或小。 <h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4></li></ul></li><li><a href="http://www.cnblogs.com/chengxiao/p/6194356.html" target="_blank" rel="noopener">《图解排序算法(四)之归并排序》</a><ul><li>分而治之，分成小份排序，在合并(重建一个新空间进行复制)。 </li></ul></li></ul><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>TODO</p><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><ul><li><a href="https://www.cnblogs.com/chengxiao/p/6129630.html" target="_blank" rel="noopener">《图解排序算法(三)之堆排序》</a><ul><li>排序过程就是构建最大堆的过程，最大堆：每个结点的值都大于或等于其左右孩子结点的值，堆顶元素是最大值。</li></ul></li></ul><h4 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h4><ul><li><a href="https://www.cnblogs.com/suvllian/p/5495780.html" target="_blank" rel="noopener">《计数排序和桶排序》</a><ul><li>和桶排序过程比较像，差别在于桶的数量。</li></ul></li></ul><h4 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h4><ul><li><a href="http://blog.51cto.com/ahalei/1362789" target="_blank" rel="noopener">《【啊哈！算法】最快最简单的排序——桶排序》</a></li><li><a href="https://blog.csdn.net/sunjinshengli/article/details/70738527" target="_blank" rel="noopener">《排序算法（三）：计数排序与桶排序》</a><ul><li>桶排序将[0,1)区间划分为n个相同的大小的子区间，这些子区间被称为桶。</li><li>每个桶单独进行排序，然后再遍历每个桶。</li></ul></li></ul><h4 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h4><p>按照个位、十位、百位、…依次来排。</p><ul><li><a href="https://blog.csdn.net/lemon_tree12138/article/details/51695211" target="_blank" rel="noopener">《排序算法系列：基数排序》</a></li><li><a href="https://www.cnblogs.com/skywang12345/p/3603669.html" target="_blank" rel="noopener">《基数排序》</a></li></ul><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><ul><li><p><a href="https://www.cnblogs.com/coderising/p/5708632.html" target="_blank" rel="noopener">《二分查找(java实现)》</a></p><ul><li>要求待查找的序列有序。</li><li>时间复杂度 O(logN)。</li></ul></li><li><p><a href="https://blog.csdn.net/maoyuanming0806/article/details/78176957" target="_blank" rel="noopener">《java实现二分查找-两种方式》</a></p><ul><li>while + 递归。<h4 id="Java-中的排序工具"><a href="#Java-中的排序工具" class="headerlink" title="Java 中的排序工具"></a>Java 中的排序工具</h4></li></ul></li><li><a href="https://blog.csdn.net/u011410529/article/details/56668545?locationnum=6&amp;fps=1" target="_blank" rel="noopener">《Arrays.sort和Collections.sort实现原理解析》</a><ul><li>Collections.sort算法调用的是合并排序。</li><li>Arrays.sort() 采用了2种排序算法 – 基本类型数据使用快速排序法，对象数组使用归并排序。</li></ul></li></ul><h3 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h3><p>常用于大数据的排重，比如email，url 等。<br>核心原理：将每条数据通过计算产生一个指纹（一个字节或多个字节，但一定比原始数据要少很多），其中每一位都是通过随机计算获得，在将指纹映射到一个大的按位存储的空间中。注意：会有一定的错误率。<br>优点：空间和时间效率都很高。<br>缺点：随着存入的元素数量增加，误算率随之增加。</p><ul><li><a href="https://segmentfault.com/a/1190000002729689" target="_blank" rel="noopener">《布隆过滤器 – 空间效率很高的数据结构》</a></li><li><a href="https://blog.csdn.net/zdxiq000/article/details/57626464" target="_blank" rel="noopener">《大量数据去重：Bitmap和布隆过滤器(Bloom Filter)》</a></li><li><a href="https://blog.csdn.net/qq_30242609/article/details/71024458" target="_blank" rel="noopener">《基于Redis的布隆过滤器的实现》</a><ul><li>基于 Redis 的 Bitmap 数据结构。</li></ul></li><li><a href="https://blog.csdn.net/lemon_tree12138/article/details/47973715" target="_blank" rel="noopener">《网络爬虫：URL去重策略之布隆过滤器(BloomFilter)的使用》</a><ul><li>使用Java中的 BitSet 类 和 加权和hash算法。</li></ul></li></ul><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><h4 id="KMP-算法"><a href="#KMP-算法" class="headerlink" title="KMP 算法"></a>KMP 算法</h4><p>KMP：Knuth-Morris-Pratt算法（简称KMP）<br>核心原理是利用一个“部分匹配表”，跳过已经匹配过的元素。</p><ul><li><a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" target="_blank" rel="noopener">《字符串匹配的KMP算法》</a></li></ul><h3 id="深度优先、广度优先"><a href="#深度优先、广度优先" class="headerlink" title="深度优先、广度优先"></a>深度优先、广度优先</h3><ul><li><a href="https://www.cnblogs.com/0kk470/p/7555033.html" target="_blank" rel="noopener">《广度优先搜索BFS和深度优先搜索DFS》</a></li></ul><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><ul><li><a href="https://www.cnblogs.com/MrSaver/p/8641971.html" target="_blank" rel="noopener">《算法：贪婪算法基础》</a></li><li><a href="https://blog.csdn.net/a345017062/article/details/52443781" target="_blank" rel="noopener">《常见算法及问题场景——贪心算法》</a></li></ul><h3 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h3><ul><li><a href="https://blog.csdn.net/qfikh/article/details/51960331" target="_blank" rel="noopener">《 五大常用算法之四：回溯法》</a></li></ul><h3 id="剪枝算法"><a href="#剪枝算法" class="headerlink" title="剪枝算法"></a>剪枝算法</h3><ul><li><a href="https://blog.csdn.net/luningcsdn/article/details/50930276" target="_blank" rel="noopener">《α-β剪枝算法》</a></li></ul><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><ul><li><a href="https://www.cnblogs.com/little-YTMM/p/5372680.html" target="_blank" rel="noopener">《详解动态规划——邹博讲动态规划》</a></li><li><a href="https://blog.csdn.net/yao_zi_jie/article/details/54580283" target="_blank" rel="noopener">《动态规划算法的个人理解》</a></li></ul><h3 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h3><ul><li><p><a href="https://blog.csdn.net/amds123/article/details/70173402" target="_blank" rel="noopener">《带你搞懂朴素贝叶斯分类算法》</a></p><ul><li>P(B|A)=P(A|B)P(B)/P(A)</li></ul></li><li><p><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_one.html" target="_blank" rel="noopener">《贝叶斯推断及其互联网应用1》</a></p></li><li><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_two.html" target="_blank" rel="noopener">《贝叶斯推断及其互联网应用2》</a></li></ul><h3 id="推荐算法"><a href="#推荐算法" class="headerlink" title="推荐算法"></a>推荐算法</h3><ul><li><a href="http://www.infoq.com/cn/articles/recommendation-algorithm-overview-part01" target="_blank" rel="noopener">《推荐算法综述》</a></li><li><a href="https://www.oschina.net/news/51297/top-10-open-source-recommendation-systems" target="_blank" rel="noopener">《TOP 10 开源的推荐系统简介》</a></li></ul><h3 id="最小生成树算法"><a href="#最小生成树算法" class="headerlink" title="最小生成树算法"></a>最小生成树算法</h3><ul><li><a href="https://blog.csdn.net/luoshixian099/article/details/51908175" target="_blank" rel="noopener">《算法导论–最小生成树（Kruskal和Prim算法）》</a></li></ul><h3 id="最短路径算法"><a href="#最短路径算法" class="headerlink" title="最短路径算法"></a>最短路径算法</h3><ul><li><a href="https://blog.csdn.net/qq_35644234/article/details/60870719" target="_blank" rel="noopener">《Dijkstra算法详解》</a></li></ul><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><h3 id="Java-并发"><a href="#Java-并发" class="headerlink" title="Java 并发"></a>Java 并发</h3><ul><li><a href="https://github.com/CL0610/Java-concurrency" target="_blank" rel="noopener">Java 并发知识合集</a></li><li><a href="https://github.com/CL0610/Java-concurrency/blob/master/Java并发知识图谱.png" target="_blank" rel="noopener">JAVA并发知识图谱</a></li></ul><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul><li><a href="http://www.importnew.com/18459.html" target="_blank" rel="noopener">《40个Java多线程问题总结》</a></li></ul><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><ul><li><a href="https://www.cnblogs.com/zhanht/p/5450325.html" target="_blank" rel="noopener">《Java并发编程——线程安全及解决机制简介》</a></li></ul><h3 id="一致性、事务"><a href="#一致性、事务" class="headerlink" title="一致性、事务"></a>一致性、事务</h3><h4 id="事务-ACID-特性"><a href="#事务-ACID-特性" class="headerlink" title="事务 ACID 特性"></a>事务 ACID 特性</h4><ul><li><a href="https://blog.csdn.net/u012440687/article/details/52116108" target="_blank" rel="noopener">《数据库事务ACID特性》</a></li></ul><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><ul><li>未提交读：一个事务可以读取另一个未提交的数据，容易出现脏读的情况。</li><li>读提交：一个事务等另外一个事务提交之后才可以读取数据，但会出现不可重复读的情况（多次读取的数据不一致），读取过程中出现UPDATE操作，会多。（大多数数据库默认级别是RC，比如SQL Server，Oracle），读取的时候不可以修改。</li><li>可重复读： 同一个事务里确保每次读取的时候，获得的是同样的数据，但不保障原始数据被其他事务更新（幻读），Mysql InnoDB 就是这个级别。</li><li><p>序列化：所有事物串行处理（牺牲了效率）</p></li><li><p><a href="https://blog.csdn.net/qq_33290787/article/details/51924963" target="_blank" rel="noopener">《理解事务的4种隔离级别》</a></p></li><li><p><a href="https://www.cnblogs.com/z-sm/p/7245981.html" target="_blank" rel="noopener">数据库事务的四大特性及事务隔离级别</a></p></li><li><p><a href="http://blog.sina.com.cn/s/blog_499740cb0100ugs7.html" target="_blank" rel="noopener">《MySQL的InnoDB的幻读问题 》</a></p><ul><li>幻读的例子非常清楚。</li><li>通过 SELECT … FOR UPDATE 解决。</li></ul></li><li><p><a href="http://database.51cto.com/art/201804/570101.htm" target="_blank" rel="noopener">《一篇文章带你读懂MySQL和InnoDB》</a></p><ul><li>图解脏读、不可重复读、幻读问题。</li></ul></li></ul><h4 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h4><ul><li><p><a href="https://www.cnblogs.com/chenpingzhao/p/5065316.html" target="_blank" rel="noopener">《【mysql】关于innodb中MVCC的一些理解》</a></p><ul><li>innodb 中 MVCC 用在 Repeatable-Read 隔离级别。</li><li>MVCC 会产生幻读问题（更新时异常。）</li></ul></li><li><p><a href="https://blog.csdn.net/whoamiyang/article/details/51901888" target="_blank" rel="noopener">《轻松理解MYSQL MVCC 实现机制》</a></p><ul><li>通过隐藏版本列来实现 MVCC 控制，一列记录创建时间、一列记录删除时间，这里的时间</li><li>每次只操作比当前版本小（或等于）的 行。</li></ul></li></ul><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h4 id="Java中的锁和同步类"><a href="#Java中的锁和同步类" class="headerlink" title="Java中的锁和同步类"></a>Java中的锁和同步类</h4><ul><li><p><a href="https://www.cnblogs.com/qifengshi/p/6831055.html" target="_blank" rel="noopener">《Java中的锁分类》</a></p><ul><li>主要包括 synchronized、ReentrantLock、和 ReadWriteLock。 </li></ul></li><li><p><a href="https://www.cnblogs.com/waterystone/p/4920797.html" target="_blank" rel="noopener">《Java并发之AQS详解》</a></p></li><li><p><a href="http://cuisuqiang.iteye.com/blog/2020146" target="_blank" rel="noopener">《Java中信号量 Semaphore》</a></p><ul><li>有数量控制</li><li>申请用 acquire，申请不要则阻塞；释放用 release。</li></ul></li><li><p><a href="https://www.cnblogs.com/davidwang456/p/6094947.html" target="_blank" rel="noopener">《java开发中的Mutex vs Semaphore》</a></p><ul><li>简单的说 就是Mutex是排它的，只有一个可以获取到资源， Semaphore也具有排它性，但可以定义多个可以获取的资源的对象。     </li></ul></li></ul><h4 id="公平锁-amp-非公平锁"><a href="#公平锁-amp-非公平锁" class="headerlink" title="公平锁 &amp; 非公平锁"></a>公平锁 &amp; 非公平锁</h4><p>公平锁的作用就是严格按照线程启动的顺序来执行的，不允许其他线程插队执行的；而非公平锁是允许插队的。</p><ul><li><a href="https://blog.csdn.net/EthanWhite/article/details/55508357" target="_blank" rel="noopener">《公平锁与非公平锁》</a><ul><li>默认情况下 ReentrantLock 和 synchronized 都是非公平锁。ReentrantLock 可以设置成公平锁。</li></ul></li></ul><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>悲观锁如果使用不当（锁的条数过多），会引起服务大面积等待。推荐优先使用乐观锁+重试。</p><ul><li><p><a href="https://www.cnblogs.com/zhiqian-ali/p/6200874.html" target="_blank" rel="noopener">《【MySQL】悲观锁&amp;乐观锁》</a></p><ul><li>乐观锁的方式：版本号+重试方式</li><li>悲观锁：通过 select … for update 进行行锁(不可读、不可写，share 锁可读不可写)。</li></ul></li><li><p><a href="https://www.cnblogs.com/Lawson/p/5008741.html" target="_blank" rel="noopener">《Mysql查询语句使用select.. for update导致的数据库死锁分析》</a></p><ul><li>mysql的innodb存储引擎实务锁虽然是锁行，但它内部是锁索引的。</li><li>锁相同数据的不同索引条件可能会引起死锁。</li></ul></li><li><p><a href="https://www.cnblogs.com/zejin2008/p/5262751.html" target="_blank" rel="noopener">《Mysql并发时经典常见的死锁原因及解决方法》</a></p></li></ul><h4 id="乐观锁-amp-CAS"><a href="#乐观锁-amp-CAS" class="headerlink" title="乐观锁 &amp; CAS"></a>乐观锁 &amp; CAS</h4><ul><li><a href="http://www.importnew.com/20472.html" target="_blank" rel="noopener">《乐观锁的一种实现方式——CAS》</a><ul><li>和MySQL乐观锁方式相似，只不过是通过和原值进行比较。     </li></ul></li></ul><h4 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h4><p>由于高并发，在CAS下，更新后可能此A非彼A。通过版本号可以解决，类似于上文Mysql 中提到的的乐观锁。</p><ul><li><a href="https://www.cnblogs.com/549294286/p/3766717.html" target="_blank" rel="noopener">《Java CAS 和ABA问题》</a></li><li><a href="https://blog.csdn.net/li954644351/article/details/50511879" target="_blank" rel="noopener">《Java 中 ABA问题及避免》</a><ul><li>AtomicStampedReference 和 AtomicStampedReference。 </li></ul></li></ul><h4 id="CopyOnWrite容器"><a href="#CopyOnWrite容器" class="headerlink" title="CopyOnWrite容器"></a>CopyOnWrite容器</h4><p>可以对CopyOnWrite容器进行并发的读，而不需要加锁。CopyOnWrite并发容器用于读多写少的并发场景。比如白名单，黑名单，商品类目的访问和更新场景，不适合需要数据强一致性的场景。</p><ul><li><p><a href="https://www.cnblogs.com/hapjin/p/4840107.html" target="_blank" rel="noopener">《JAVA中写时复制(Copy-On-Write)Map实现》</a></p><ul><li>实现读写分离，读取发生在原始数据上，写入发生在副本上。  </li><li>不用加锁，通过最终一致实现一致性。</li></ul></li><li><p><a href="https://blog.csdn.net/a494303877/article/details/53404623" target="_blank" rel="noopener">《聊聊并发-Java中的Copy-On-Write容器》</a></p></li></ul><h4 id="RingBuffer"><a href="#RingBuffer" class="headerlink" title="RingBuffer"></a>RingBuffer</h4><ul><li><a href="http://www.cnblogs.com/l00l/p/4115001.html" target="_blank" rel="noopener">《线程安全的无锁RingBuffer的实现【一个读线程，一个写线程】》</a></li></ul><h4 id="可重入锁-amp-不可重入锁"><a href="#可重入锁-amp-不可重入锁" class="headerlink" title="可重入锁 &amp; 不可重入锁"></a>可重入锁 &amp; 不可重入锁</h4><ul><li><p><a href="https://www.cnblogs.com/dj3839/p/6580765.html" target="_blank" rel="noopener">《可重入锁和不可重入锁》</a></p><ul><li>通过简单代码举例说明可重入锁和不可重入锁。</li><li>可重入锁指同一个线程可以再次获得之前已经获得的锁。</li><li>可重入锁可以用户避免死锁。</li><li>Java中的可重入锁：synchronized 和 java.util.concurrent.locks.ReentrantLock</li></ul></li><li><p><a href="https://www.cnblogs.com/baizhanshi/p/7211802.html" target="_blank" rel="noopener">《ReenTrantLock可重入锁（和synchronized的区别）总结》</a></p><ul><li>synchronized 使用方便，编译器来加锁，是非公平锁。</li><li>ReenTrantLock 使用灵活，锁的公平性可以定制。</li><li>相同加锁场景下，推荐使用 synchronized。</li></ul></li></ul><h4 id="互斥锁-amp-共享锁"><a href="#互斥锁-amp-共享锁" class="headerlink" title="互斥锁 &amp; 共享锁"></a>互斥锁 &amp; 共享锁</h4><p>互斥锁：同时只能有一个线程获得锁。比如，ReentrantLock 是互斥锁，ReadWriteLock 中的写锁是互斥锁。<br>共享锁：可以有多个线程同时或的锁。比如，Semaphore、CountDownLatch 是共享锁，ReadWriteLock 中的读锁是共享锁。</p><ul><li><a href="https://www.cnblogs.com/liang1101/p/6475555.html" target="_blank" rel="noopener">《ReadWriteLock场景应用》</a></li></ul><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><ul><li><a href="https://blog.csdn.net/yunfenglw/article/details/45950305" target="_blank" rel="noopener">《“死锁”四个必要条件的合理解释》</a><ul><li>互斥、持有、不可剥夺、环形等待。</li></ul></li><li><p><a href="https://blog.csdn.net/u014039577/article/details/52351626" target="_blank" rel="noopener">Java如何查看死锁？</a></p><ul><li>JConsole 可以识别死锁。</li></ul></li><li><p><a href="https://blog.csdn.net/bohu83/article/details/51135061" target="_blank" rel="noopener">java多线程系列：死锁及检测</a></p><ul><li>jstack 可以显示死锁。</li></ul></li></ul><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="计算机原理"><a href="#计算机原理" class="headerlink" title="计算机原理"></a>计算机原理</h3><ul><li><a href="https://segmentfault.com/a/1190000003692840" target="_blank" rel="noopener">《操作系统基础知识——操作系统的原理，类型和结构》</a></li></ul><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><h4 id="多级缓存"><a href="#多级缓存" class="headerlink" title="多级缓存"></a>多级缓存</h4><p>典型的 CPU 有三级缓存，距离核心越近，速度越快，空间越小。L1 一般 32k，L2 一般 256k，L3 一般12M。内存速度需要200个 CPU 周期，CPU 缓存需要1个CPU周期。</p><ul><li><a href="https://blog.csdn.net/zero__007/article/details/54089730" target="_blank" rel="noopener">《从Java视角理解CPU缓存和伪共享》</a></li></ul><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>TODO</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul><li><a href="https://blog.csdn.net/asdf_1024/article/details/78978437" target="_blank" rel="noopener">《线程的生命周期及状态转换详解》</a></li></ul><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><ul><li><a href="https://www.thinksaas.cn/group/topic/839375/" target="_blank" rel="noopener">《终结python协程—-从yield到actor模型的实现》</a><ul><li>线程的调度是由操作系统负责，协程调度是程序自行负责</li><li>与线程相比，协程减少了无谓的操作系统切换.</li><li>实际上当遇到IO操作时做切换才更有意义，（因为IO操作不用占用CPU），如果没遇到IO操作，按照时间片切换.</li></ul></li></ul><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li><a href="http://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">《Linux 命令大全》</a></li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h3><ul><li><a href="https://blog.csdn.net/q291611265/article/details/48465113" target="_blank" rel="noopener">《设计模式的六大原则》</a><ul><li>开闭原则：对扩展开放,对修改关闭，多使用抽象类和接口。</li><li>里氏替换原则：基类可以被子类替换，使用抽象类继承,不使用具体类继承。</li><li>依赖倒转原则：要依赖于抽象,不要依赖于具体，针对接口编程,不针对实现编程。</li><li>接口隔离原则：使用多个隔离的接口,比使用单个接口好，建立最小的接口。</li><li>迪米特法则：一个软件实体应当尽可能少地与其他实体发生相互作用，通过中间类建立联系。</li><li>合成复用原则：尽量使用合成/聚合,而不是使用继承。</li></ul></li></ul><h3 id="23种常见设计模式"><a href="#23种常见设计模式" class="headerlink" title="23种常见设计模式"></a>23种常见设计模式</h3><ul><li><a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">《设计模式》</a></li><li><a href="https://www.cnblogs.com/susanws/p/5510229.html" target="_blank" rel="noopener">《23种设计模式全解析》</a></li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><p><a href="http://blog.jobbole.com/62314/" target="_blank" rel="noopener">《细数JDK里的设计模式》</a></p><ul><li><p>结构型模式：</p><ul><li>适配器：用来把一个接口转化成另一个接口，如 java.util.Arrays#asList()。</li><li>桥接模式：这个模式将抽象和抽象操作的实现进行了解耦，这样使得抽象和实现可以独立地变化，如JDBC；</li><li>组合模式：使得客户端看来单个对象和对象的组合是同等的。换句话说，某个类型的方法同时也接受自身类型作为参数，如 Map.putAll，List.addAll、Set.addAll。</li><li>装饰者模式：动态的给一个对象附加额外的功能，这也是子类的一种替代方式，如 java.util.Collections#checkedList|Map|Set|SortedSet|SortedMap。</li><li>享元模式：使用缓存来加速大量小对象的访问时间，如 valueOf(int)。</li><li>代理模式：代理模式是用一个简单的对象来代替一个复杂的或者创建耗时的对象，如 java.lang.reflect.Proxy</li></ul></li><li><p>创建模式:</p><ul><li>抽象工厂模式：抽象工厂模式提供了一个协议来生成一系列的相关或者独立的对象，而不用指定具体对象的类型，如 java.util.Calendar#getInstance()。</li><li>建造模式(Builder)：定义了一个新的类来构建另一个类的实例，以简化复杂对象的创建，如：java.lang.StringBuilder#append()。</li><li>工厂方法：就是 <strong>一个返*</strong> 回具体对象的方法，而不是多个，如 java.lang.Object#toString()、java.lang.Class#newInstance()。</li><li>原型模式：使得类的实例能够生成自身的拷贝、如：java.lang.Object#clone()。</li><li>单例模式：全局只有一个实例，如 java.lang.Runtime#getRuntime()。</li></ul></li><li>行为模式：<ul><li>责任链模式：通过把请求从一个对象传递到链条中下一个对象的方式，直到请求被处理完毕，以实现对象间的解耦。如 javax.servlet.Filter#doFilter()。</li><li>命令模式：将操作封装到对象内，以便存储，传递和返回，如：java.lang.Runnable。</li><li>解释器模式：定义了一个语言的语法，然后解析相应语法的语句，如，java.text.Format，java.text.Normalizer。</li><li>迭代器模式：提供一个一致的方法来顺序访问集合中的对象，如 java.util.Iterator。</li><li>中介者模式：通过使用一个中间对象来进行消息分发以及减少类之间的直接依赖，java.lang.reflect.Method#invoke()。</li><li>空对象模式：如 java.util.Collections#emptyList()。</li><li>观察者模式：它使得一个对象可以灵活的将消息发送给感兴趣的对象，如 java.util.EventListener。</li><li>模板方法模式：让子类可以重写方法的一部分，而不是整个重写，如 java.util.Collections#sort()。</li></ul></li></ul></li><li><p><a href="https://www.cnblogs.com/hwaggLee/p/4510687.html" target="_blank" rel="noopener">《Spring-涉及到的设计模式汇总》</a></p></li><li><a href="https://blog.csdn.net/u012387062/article/details/54719114" target="_blank" rel="noopener">《Mybatis使用的设计模式》</a></li></ul><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul><li><a href="https://blog.csdn.net/YECrazy/article/details/79481964" target="_blank" rel="noopener">《单例模式的三种实现 以及各自的优缺点》</a></li><li><a href="https://www.cnblogs.com/ttylinux/p/6498822.html" target="_blank" rel="noopener">《单例模式－－反射－－防止序列化破坏单例模式》</a><ul><li>使用枚举类型。</li></ul></li></ul><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><p>TODO</p><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><ul><li><a href="http://www.runoob.com/design-pattern/mvc-pattern.html" target="_blank" rel="noopener">《MVC 模式》</a><ul><li>模型(model)－视图(view)－控制器(controller) </li></ul></li></ul><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><ul><li><a href="https://www.zhihu.com/question/23277575" target="_blank" rel="noopener">《理解 IOC》</a></li><li><a href="https://www.cnblogs.com/NancyStartOnce/p/6813162.html" target="_blank" rel="noopener">《IOC 的理解与解释》</a><ul><li>正向控制：传统通过new的方式。反向控制，通过容器注入对象。</li><li>作用：用于模块解耦。</li><li>DI：Dependency Injection，即依赖注入，只关心资源使用，不关心资源来源。</li></ul></li></ul><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><ul><li><a href="https://my.oschina.net/yanquan345/blog/203415" target="_blank" rel="noopener">《轻松理解AOP(面向切面编程)》</a></li><li><a href="https://www.cnblogs.com/hongwz/p/5764917.html" target="_blank" rel="noopener">《Spring AOP详解》</a></li><li><a href="http://www.importnew.com/24305.html" target="_blank" rel="noopener">《Spring AOP的实现原理》</a><ul><li>Spring AOP使用的动态代理，主要有两种方式：JDK动态代理和CGLIB动态代理。</li></ul></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/" target="_blank" rel="noopener">《Spring AOP 实现原理与 CGLIB 应用》</a><ul><li>Spring AOP 框架对 AOP 代理类的处理原则是：如果目标对象的实现类实现了接口，Spring AOP 将会采用 JDK 动态代理来生成 AOP 代理类；如果目标对象的实现类没有实现接口，Spring AOP 将会采用 CGLIB 来生成 AOP 代理类 </li></ul></li></ul><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><ul><li><a href="https://www.w3cschool.cn/uml_tutorial/" target="_blank" rel="noopener">《UML教程》</a></li></ul><h3 id="微服务思想"><a href="#微服务思想" class="headerlink" title="微服务思想"></a>微服务思想</h3><ul><li><a href="https://www.cnblogs.com/wintersun/p/6219259.html" target="_blank" rel="noopener">《微服务架构设计》</a></li><li><a href="http://www.infoq.com/cn/articles/micro-service-technology-stack" target="_blank" rel="noopener">《微服务架构技术栈选型手册》</a></li></ul><h4 id="康威定律"><a href="#康威定律" class="headerlink" title="康威定律"></a>康威定律</h4><ul><li><p><a href="https://yq.aliyun.com/articles/8611" target="_blank" rel="noopener">《微服务架构的理论基础 - 康威定律》</a></p><ul><li>定律一：组织沟通方式会通过系统设计表达出来，就是说架构的布局和组织结构会有相似。</li><li>定律二：时间再多一件事情也不可能做的完美，但总有时间做完一件事情。一口气吃不成胖子，先搞定能搞定的。</li><li>定律三：线型系统和线型组织架构间有潜在的异质同态特性。种瓜得瓜，做独立自治的子系统减少沟通成本。</li><li>定律四：大的系统组织总是比小系统更倾向于分解。合久必分，分而治之。</li></ul></li><li><p><a href="https://static.geekbang.org/PDF-%E4%BF%AE%E6%94%B9%E7%89%88-%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4-%E5%9B%BE%E7%89%87-%E6%9D%A8%E6%B3%A2-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.pdf" target="_blank" rel="noopener">《微服务架构核⼼20讲》</a></p></li></ul><h1 id="运维-amp-统计-amp-技术支持"><a href="#运维-amp-统计-amp-技术支持" class="headerlink" title="运维 &amp; 统计 &amp; 技术支持"></a>运维 &amp; 统计 &amp; 技术支持</h1><h3 id="常规监控"><a href="#常规监控" class="headerlink" title="常规监控"></a>常规监控</h3><ul><li><p><a href="https://blog.csdn.net/enweitech/article/details/77849205" target="_blank" rel="noopener">《腾讯业务系统监控的修炼之路》</a></p><ul><li>监控的方式：主动、被动、旁路(比如舆情监控)</li><li>监控类型： 基础监控、服务端监控、客户端监控、<br>监控、用户端监控</li><li>监控的目标：全、块、准</li><li>核心指标：请求量、成功率、耗时</li></ul></li><li><p><a href="https://www.oschina.net/news/67525/monitoring-tools" target="_blank" rel="noopener">《开源还是商用？十大云运维监控工具横评》</a></p><ul><li>Zabbix、Nagios、Ganglia、Zenoss、Open-falcon、监控宝、 360网站服务监控、阿里云监控、百度云观测、小蜜蜂网站监测等。</li></ul></li><li><p><a href="http://developer.51cto.com/art/201612/525373.htm" target="_blank" rel="noopener">《监控报警系统搭建及二次开发经验》</a></p></li></ul><p><strong>命令行监控工具</strong></p><ul><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/44-an-quan-yu-yun-wei/445-fu-wu-qi-zhuang-tai-jian-ce/4451-ming-ling-xing-gong-ju.html" target="_blank" rel="noopener">《常用命令行监控工具》</a></p><ul><li>top、sar、tsar、nload</li></ul></li><li><p><a href="http://blog.jobbole.com/96846/" target="_blank" rel="noopener">《20个命令行工具监控 Linux 系统性能》</a></p></li><li><p><a href="https://my.oschina.net/feichexia/blog/196575" target="_blank" rel="noopener">《JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解》</a></p></li></ul><h3 id="APM"><a href="#APM" class="headerlink" title="APM"></a>APM</h3><p>APM —  Application Performance Management</p><ul><li><p><a href="http://bigbully.github.io/Dapper-translation/" target="_blank" rel="noopener">《Dapper，大规模分布式系统的跟踪系统》</a></p></li><li><p><a href="http://opentracing.io" target="_blank" rel="noopener">CNCF OpenTracing</a>，<a href="https://github.com/opentracing-contrib/opentracing-specification-zh" target="_blank" rel="noopener">中文版</a></p></li><li><p>主要开源软件，按字母排序</p><ul><li><a href="https://github.com/apache/incubator-skywalking" target="_blank" rel="noopener">Apache SkyWalking</a></li><li><a href="https://github.com/dianping/cat" target="_blank" rel="noopener">CAT</a></li><li><a href="https://github.com/jaegertracing/jaeger" target="_blank" rel="noopener">CNCF jaeger</a></li><li><a href="https://github.com/naver/pinpoint" target="_blank" rel="noopener">Pinpoint</a></li><li><a href="https://github.com/openzipkin/zipkin" target="_blank" rel="noopener">Zipkin</a></li></ul></li><li><p><a href="http://www.infoq.com/cn/articles/apm-Pinpoint-practice" target="_blank" rel="noopener">《开源APM技术选型与实战》</a></p><ul><li>主要基于 Google的Dapper（大规模分布式系统的跟踪系统） 思想。</li></ul></li></ul><h3 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h3><ul><li><p><a href="https://zhuanlan.zhihu.com/p/25195217" target="_blank" rel="noopener">《流量统计的基础：埋点》</a></p><ul><li>常用指标：访问与访客、停留时长、跳出率、退出率、转化率、参与度</li></ul></li><li><p><a href="http://www.25xt.com/company/17066.html" target="_blank" rel="noopener">《APP埋点常用的统计工具、埋点目标和埋点内容》</a></p><ul><li>第三方统计：友盟、百度移动、魔方、App Annie、talking data、神策数据等。</li></ul></li><li><p><a href="https://tech.meituan.com/mt-mobile-analytics-practice.html" target="_blank" rel="noopener">《美团点评前端无痕埋点实践》</a></p><ul><li>所谓无痕、即通过可视化工具配置采集节点，在前端自动解析配置并上报埋点数据，而非硬编码。 </li></ul></li></ul><h3 id="持续集成-CI-CD"><a href="#持续集成-CI-CD" class="headerlink" title="持续集成(CI/CD)"></a>持续集成(CI/CD)</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="noopener">《持续集成是什么？》</a></li><li><a href="https://www.testwo.com/article/1170" target="_blank" rel="noopener">《8个流行的持续集成工具》</a></li></ul><h4 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h4><ul><li><a href="https://www.liaoxuefeng.com/article/001463233913442cdb2d1bd1b1b42e3b0b29eb1ba736c5e000" target="_blank" rel="noopener">《使用Jenkins进行持续集成》</a></li></ul><h4 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h4><p>开发、测试、生成环境分离。</p><ul><li><a href="https://my.oschina.net/sancuo/blog/214904" target="_blank" rel="noopener">《开发环境、生产环境、测试环境的基本理解和区》</a></li></ul><h3 id="自动化运维"><a href="#自动化运维" class="headerlink" title="自动化运维"></a>自动化运维</h3><h4 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h4><ul><li><a href="http://www.ansible.com.cn/" target="_blank" rel="noopener">《Ansible中文权威指南》</a></li><li><a href="https://www.cnblogs.com/heiye123/articles/7855890.html" target="_blank" rel="noopener">《Ansible基础配置和企业级项目实用案例》</a></li></ul><h4 id="puppet"><a href="#puppet" class="headerlink" title="puppet"></a>puppet</h4><ul><li><a href="https://www.cnblogs.com/keerya/p/8040071.html" target="_blank" rel="noopener">《自动化运维工具——puppet详解》</a></li></ul><h4 id="chef"><a href="#chef" class="headerlink" title="chef"></a>chef</h4><ul><li><a href="https://www.ibm.com/developerworks/cn/cloud/library/1407_caomd_chef/" target="_blank" rel="noopener">《Chef 的安装与使用》</a></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="TDD-理论"><a href="#TDD-理论" class="headerlink" title="TDD 理论"></a>TDD 理论</h4><ul><li><a href="https://www.jianshu.com/p/62f16cd4fef3" target="_blank" rel="noopener">《深度解读 - TDD（测试驱动开发）》</a><ul><li>基于测试用例编码功能代码，XP（Extreme Programming）的核心实践.</li><li>好处：一次关注一个点，降低思维负担；迎接需求变化或改善代码的设计；提前澄清需求；快速反馈； </li></ul></li></ul><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><ul><li><a href="https://www.cnblogs.com/happyzm/p/6482886.html" target="_blank" rel="noopener">《Java单元测试之JUnit篇》</a></li><li><a href="https://blog.csdn.net/hotdust/article/details/53406086" target="_blank" rel="noopener">《JUnit 4 与 TestNG 对比》</a><ul><li>TestNG 覆盖 JUnit 功能，适用于更复杂的场景。 </li></ul></li><li><a href="https://blog.csdn.net/wqetfg/article/details/50900512" target="_blank" rel="noopener">《单元测试主要的测试功能点》</a><ul><li>模块接口测试、局部数据结构测试、路径测试 、错误处理测试、边界条件测试 。 </li></ul></li></ul><h4 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h4><ul><li><a href="https://blog.csdn.net/blueheart20/article/details/52170790" target="_blank" rel="noopener">《Apache ab 测试使用指南》</a></li><li><a href="https://www.cnblogs.com/binyue/p/6141088.html" target="_blank" rel="noopener">《大型网站压力测试及优化方案》</a></li><li><a href="http://news.chinabyte.com/466/14126966.shtml" target="_blank" rel="noopener">《10大主流压力/负载/性能测试工具推荐》</a></li><li><a href="http://quentinxxz.iteye.com/blog/2249799" target="_blank" rel="noopener">《真实流量压测工具 tcpcopy应用浅析》</a></li><li><a href="https://www.cnblogs.com/jwentest/p/7136727.html" target="_blank" rel="noopener">《nGrinder 简易使用教程》</a></li></ul><h4 id="全链路压测"><a href="#全链路压测" class="headerlink" title="全链路压测"></a>全链路压测</h4><ul><li><a href="http://www.infoq.com/cn/articles/jd-618-upgrade-full-link-voltage-test-program-forcebot" target="_blank" rel="noopener">《京东618：升级全链路压测方案，打造军演机器人ForceBot》</a></li><li><a href="https://zhuanlan.zhihu.com/p/30306892" target="_blank" rel="noopener">《饿了么全链路压测的探索与实践》</a></li><li><a href="https://zhuanlan.zhihu.com/p/28355759" target="_blank" rel="noopener">《四大语言，八大框架｜滴滴全链路压测解决之道》</a></li><li><a href="https://www.jianshu.com/p/27060fd61f72" target="_blank" rel="noopener">《全链路压测经验》</a></li></ul><h4 id="A-B-、灰度、蓝绿测试"><a href="#A-B-、灰度、蓝绿测试" class="headerlink" title="A/B 、灰度、蓝绿测试"></a>A/B 、灰度、蓝绿测试</h4><ul><li><a href="https://testerhome.com/topics/11165" target="_blank" rel="noopener">《技术干货 | AB 测试和灰度发布探索及实践》</a></li><li><p><a href="http://blog.51cto.com/purplegrape/1403123" target="_blank" rel="noopener">《nginx 根据IP 进行灰度发布》</a></p></li><li><p><a href="https://www.v2ex.com/t/344341" target="_blank" rel="noopener">《蓝绿部署、A/B 测试以及灰度发布》</a></p></li></ul><h3 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h3><ul><li><a href="https://blog.csdn.net/enweitech/article/details/52910082" target="_blank" rel="noopener">《VPS的三种虚拟技术OpenVZ、Xen、KVM优缺点比较》</a></li></ul><h4 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h4><ul><li><a href="http://blog.chinaunix.net/uid-20201831-id-5775661.html" target="_blank" rel="noopener">《KVM详解，太详细太深入了，经典》</a></li><li><a href="https://www.coderxing.com/kvm-install.html" target="_blank" rel="noopener">《【图文】KVM 虚拟机安装详解》</a></li></ul><h4 id="Xen"><a href="#Xen" class="headerlink" title="Xen"></a>Xen</h4><ul><li><a href="https://www.cnblogs.com/sddai/p/5931201.html" target="_blank" rel="noopener">《Xen虚拟化基本原理详解》</a></li></ul><h4 id="OpenVZ"><a href="#OpenVZ" class="headerlink" title="OpenVZ"></a>OpenVZ</h4><ul><li><a href="https://blog.csdn.net/longerzone/article/details/44829255" target="_blank" rel="noopener">《开源Linux容器 OpenVZ 快速上手指南》</a></li></ul><h3 id="容器技术"><a href="#容器技术" class="headerlink" title="容器技术"></a>容器技术</h3><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><ul><li><a href="https://www.cnblogs.com/SzeCheng/p/6822905.html" target="_blank" rel="noopener">《几张图帮你理解 docker 基本原理及快速入门》</a></li><li><a href="https://draveness.me/docker" target="_blank" rel="noopener">《Docker 核心技术与实现原理》</a></li><li><a href="http://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="noopener">《Docker 教程》</a></li></ul><h3 id="云技术"><a href="#云技术" class="headerlink" title="云技术"></a>云技术</h3><h4 id="OpenStack"><a href="#OpenStack" class="headerlink" title="OpenStack"></a>OpenStack</h4><ul><li><a href="https://www.cnblogs.com/klb561/p/8660264.html" target="_blank" rel="noopener">《OpenStack构架知识梳理》</a></li></ul><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><ul><li><a href="https://www.cnblogs.com/jetzhang/p/6068773.html" target="_blank" rel="noopener">《一分钟告诉你究竟DevOps是什么鬼？》</a></li><li><a href="http://www.infoq.com/cn/articles/detail-analysis-of-devops" target="_blank" rel="noopener">《DevOps详解》</a></li></ul><h3 id="文档管理"><a href="#文档管理" class="headerlink" title="文档管理"></a>文档管理</h3><ul><li><a href="http://www.confluence.cn/" target="_blank" rel="noopener">Confluence-收费文档管理系统</a></li><li>GitLab?</li><li>Wiki</li></ul><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="Web-Server"><a href="#Web-Server" class="headerlink" title="Web Server"></a>Web Server</h3><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><ul><li><p><a href="https://blog.csdn.net/qq_25797077/article/details/52200722" target="_blank" rel="noopener">《Ngnix的基本学习-多进程和Apache的比较》</a></p><ul><li>Nginx 通过异步非阻塞的事件处理机制实现高并发。Apache 每个请求独占一个线程，非常消耗系统资源。</li><li>事件驱动适合于IO密集型服务(Nginx)，多进程或线程适合于CPU密集型服务(Apache)，所以Nginx适合做反向代理，而非web服务器使用。  </li></ul></li><li><p><a href="https://www.cnblogs.com/cunkouzh/p/5410154.html" target="_blank" rel="noopener">《nginx与Apache的对比以及优缺点》</a></p><ul><li>nginx只适合静态和反向代理，不适合处理动态请求。</li></ul></li></ul><h4 id="OpenResty"><a href="#OpenResty" class="headerlink" title="OpenResty"></a>OpenResty</h4><ul><li><a href="http://openresty.org/cn/" target="_blank" rel="noopener">官方网站</a></li><li><a href="http://www.linkedkeeper.com/detail/blog.action?bid=1034" target="_blank" rel="noopener">《浅谈 OpenResty》</a><ul><li>通过 Lua 模块可以在Nginx上进行开发。 </li></ul></li></ul><h4 id="Apache-Httpd"><a href="#Apache-Httpd" class="headerlink" title="Apache Httpd"></a>Apache Httpd</h4><ul><li><a href="http://httpd.apache.org/" target="_blank" rel="noopener">官方网站</a></li></ul><h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h4><h5 id="架构原理"><a href="#架构原理" class="headerlink" title="架构原理"></a>架构原理</h5><ul><li><a href="https://www.cnblogs.com/hggen/p/6264475.html" target="_blank" rel="noopener">《TOMCAT原理详解及请求过程》</a></li><li><a href="https://www.cnblogs.com/crazylqy/p/4706223.html" target="_blank" rel="noopener">《Tomcat服务器原理详解》</a></li><li><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/" target="_blank" rel="noopener">《Tomcat 系统架构与设计模式,第 1 部分: 工作原理》</a></p></li><li><p><a href="https://blog.csdn.net/xlgen157387/article/details/79006434" target="_blank" rel="noopener">《四张图带你了解Tomcat系统架构》</a></p></li><li><p><a href="https://www.futurehosting.com/blog/jboss-vs-tomcat-choosing-a-java-application-server/" target="_blank" rel="noopener">《JBoss vs. Tomcat: Choosing A Java Application Server》</a></p><ul><li>Tomcat 是轻量级的 Serverlet 容器，没有实现全部 JEE 特性（比如持久化和事务处理），但可以通过其他组件代替，比如Srping。</li><li>Jboss 实现全部了JEE特性，软件开源免费、文档收费。</li></ul></li></ul><h5 id="调优方案"><a href="#调优方案" class="headerlink" title="调优方案"></a>调优方案</h5><ul><li><p><a href="https://www.cnblogs.com/sunfenqing/p/7339058.html" target="_blank" rel="noopener">《Tomcat 调优方案》</a></p><ul><li>启动NIO模式（或者APR）；调整线程池；禁用AJP连接器（Nginx+tomcat的架构，不需要AJP）； </li></ul></li><li><p><a href="http://blog.chinaunix.net/uid-20662363-id-3012760.html" target="_blank" rel="noopener">《tomcat http协议与ajp协议》</a></p></li><li><a href="http://dmouse.iteye.com/blog/1354527" target="_blank" rel="noopener">《AJP与HTTP比较和分析》</a><ul><li>AJP 协议（8009端口）用于降低和前端Server（如Apache，而且需要支持AJP协议）的连接数(前端)，通过长连接提高性能。</li><li>并发高时，AJP协议优于HTTP协议。</li></ul></li></ul><h4 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h4><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jetty/" target="_blank" rel="noopener">《Jetty 的工作原理以及与 Tomcat 的比较》</a></li><li><a href="https://blog.csdn.net/doutao6677/article/details/51957288" target="_blank" rel="noopener">《jetty和tomcat优势比较》</a><ul><li>架构比较:Jetty的架构比Tomcat的更为简单。</li><li>性能比较：Jetty和Tomcat性能方面差异不大，Jetty默认采用NIO结束在处理I/O请求上更占优势，Tomcat默认采用BIO处理I/O请求，Tomcat适合处理少数非常繁忙的链接，处理静态资源时性能较差。</li><li>其他方面：Jetty的应用更加快速，修改简单，对新的Servlet规范的支持较好;Tomcat 对JEE和Servlet 支持更加全面。 </li></ul></li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul><li><a href="https://blog.csdn.net/clementad/article/details/48229243" target="_blank" rel="noopener">《缓存失效策略（FIFO 、LRU、LFU三种算法的区别）》</a></li></ul><h4 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h4><ul><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4211.html" target="_blank" rel="noopener">《HashMap本地缓存》</a></p></li><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4212-ehcache.html" target="_blank" rel="noopener">《EhCache本地缓存》</a></p><ul><li>堆内、堆外、磁盘三级缓存。</li><li>可按照缓存空间容量进行设置。</li><li>按照时间、次数等过期策略。</li></ul></li><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4213-guava-cache.html" target="_blank" rel="noopener">《Guava Cache》</a></p><ul><li>简单轻量、无堆外、磁盘缓存。</li></ul></li></ul><ul><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/422-fu-wu-duan-ben-di-huan-cun/nginx-ben-di-huan-cun.html" target="_blank" rel="noopener">《Nginx本地缓存》</a></p></li><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/422-fu-wu-duan-ben-di-huan-cun/4222-pagespeed.html" target="_blank" rel="noopener">《Pagespeed—懒人工具，服务器端加速》</a></p></li></ul><h3 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h3><ul><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/423-ke-hu-duan-huan-cun.html" target="_blank" rel="noopener">《浏览器端缓存》</a></p><ul><li>主要是利用 Cache-Control 参数。</li></ul></li><li><p><a href="https://mp.weixin.qq.com/s/qHm_dJBhVbv0pJs8Crp77w" target="_blank" rel="noopener">《H5 和移动端 WebView 缓存机制解析与实战》</a></p></li></ul><h3 id="服务端缓存"><a href="#服务端缓存" class="headerlink" title="服务端缓存"></a>服务端缓存</h3><h4 id="Web缓存"><a href="#Web缓存" class="headerlink" title="Web缓存"></a>Web缓存</h4><ul><li><a href="https://github.com/jiangwenyuan/nuster" target="_blank" rel="noopener">nuster</a> - nuster cache</li><li><a href="https://github.com/varnishcache/varnish-cache" target="_blank" rel="noopener">varnish</a> - varnish cache</li><li><a href="https://github.com/squid-cache/squid" target="_blank" rel="noopener">squid</a> - squid cache</li></ul><h4 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h4><ul><li><a href="http://www.runoob.com/Memcached/Memcached-tutorial.html" target="_blank" rel="noopener">《Memcached 教程》</a></li><li><a href="https://blog.csdn.net/chenleixing/article/details/47035453" target="_blank" rel="noopener">《深入理解Memcached原理》</a><ul><li>采用多路复用技术提高并发性。</li><li>slab分配算法： memcached给Slab分配内存空间，默认是1MB。分配给Slab之后 把slab的切分成大小相同的chunk，Chunk是用于缓存记录的内存空间，Chunk 的大小默认按照1.25倍的速度递增。好处是不会频繁申请内存，提高IO效率，坏处是会有一定的内存浪费。</li></ul></li><li><a href="https://www.jianshu.com/p/36e5cd400580" target="_blank" rel="noopener">《Memcached软件工作原理》</a></li><li><p><a href="http://zhihuzeye.com/archives/2361" target="_blank" rel="noopener">《Memcache技术分享：介绍、使用、存储、算法、优化、命中率》</a></p></li><li><p><a href="https://blog.csdn.net/liu251890347/article/details/37690045" target="_blank" rel="noopener">《memcache 中 add 、 set 、replace 的区别》</a></p><ul><li>区别在于当key存在还是不存在时，返回值是true和false的。</li></ul></li><li><p><a href="https://pan.baidu.com/s/1qX00Lti?errno=0&amp;errmsg=Auth%20Login%20Sucess&amp;&amp;bduss=&amp;ssnerror=0&amp;traceid=" target="_blank" rel="noopener"><strong>《memcached全面剖析》</strong></a></p></li></ul><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><ul><li><a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">《Redis 教程》</a></li><li><a href="https://blog.csdn.net/wcf373722432/article/details/78678504" target="_blank" rel="noopener">《redis底层原理》</a><ul><li>使用 ziplist 存储链表，ziplist是一种压缩链表，它的好处是更能节省内存空间，因为它所存储的内容都是在连续的内存区域当中的。</li><li>使用 skiplist(跳跃表)来存储有序集合对象、查找上先从高Level查起、时间复杂度和红黑树相当，实现容易，无锁、并发性好。</li></ul></li><li><p><a href="http://doc.redisfans.com/topic/persistence.html" target="_blank" rel="noopener">《Redis持久化方式》</a></p><ul><li>RDB方式：定期备份快照，常用于灾难恢复。优点：通过fork出的进程进行备份，不影响主进程、RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。缺点：会丢数据。</li><li>AOF方式：保存操作日志方式。优点：恢复时数据丢失少，缺点：文件大，回复慢。</li><li>也可以两者结合使用。</li></ul></li><li><p><a href="https://blog.csdn.net/chunlongyu/article/details/53346436" target="_blank" rel="noopener">《分布式缓存–序列3–原子操作与CAS乐观锁》</a></p></li></ul><h5 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h5><ul><li><a href="https://blog.csdn.net/sunhuiliang85/article/details/73656830" target="_blank" rel="noopener">《Redis单线程架构》</a></li></ul><h5 id="回收策略"><a href="#回收策略" class="headerlink" title="回收策略"></a>回收策略</h5><ul><li><a href="https://blog.csdn.net/qq_29108585/article/details/63251491" target="_blank" rel="noopener">《redis的回收策略》</a></li></ul><h4 id="Tair"><a href="#Tair" class="headerlink" title="Tair"></a>Tair</h4><ul><li><a href="https://github.com/alibaba/tair" target="_blank" rel="noopener">官方网站</a></li><li><a href="http://blog.csdn.net/farphone/article/details/53522383" target="_blank" rel="noopener">《Tair和Redis的对比》</a></li><li>特点：可以配置备份节点数目，通过异步同步到备份节点</li><li>一致性Hash算法。</li><li>架构：和Hadoop 的设计思想类似，有Configserver，DataServer，Configserver 通过心跳来检测，Configserver也有主备关系。</li></ul><p>几种存储引擎:</p><ul><li>MDB，完全内存性，可以用来存储Session等数据。</li><li>Rdb（类似于Redis），轻量化，去除了aof之类的操作，支持Restfull操作</li><li>LDB（LevelDB存储引擎），持久化存储，LDB 作为rdb的持久化，google实现，比较高效，理论基础是LSM(Log-Structured-Merge Tree)算法，现在内存中修改数据，达到一定量时（和内存汇总的旧数据一同写入磁盘）再写入磁盘，存储更加高效，县比喻Hash算法。</li><li>Tair采用共享内存来存储数据，如果服务挂掉（非服务器），重启服务之后，数据亦然还在。</li></ul><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><ul><li><p><a href="https://www.cnblogs.com/charlesblc/p/6045238.html" target="_blank" rel="noopener">《消息队列-推/拉模式学习 &amp; ActiveMQ及JMS学习》</a></p><ul><li>RabbitMQ 消费者默认是推模式（也支持拉模式）。</li><li>Kafka 默认是拉模式。</li><li>Push方式：优点是可以尽可能快地将消息发送给消费者，缺点是如果消费者处理能力跟不上，消费者的缓冲区可能会溢出。</li><li>Pull方式：优点是消费端可以按处理能力进行拉去，缺点是会增加消息延迟。</li></ul></li><li><p><a href="https://blog.csdn.net/yunfeng482/article/details/72856762" target="_blank" rel="noopener">《Kafka、RabbitMQ、RocketMQ等消息中间件的对比 —— 消息发送性能和区别》</a></p></li></ul><h4 id="消息总线"><a href="#消息总线" class="headerlink" title="消息总线"></a>消息总线</h4><p>消息总线相当于在消息队列之上做了一层封装，统一入口，统一管控、简化接入成本。</p><ul><li><a href="https://blog.csdn.net/yanghua_kobe/article/details/43877281" target="_blank" rel="noopener">《消息总线VS消息队列》</a></li></ul><h4 id="消息的顺序"><a href="#消息的顺序" class="headerlink" title="消息的顺序"></a>消息的顺序</h4><ul><li><a href="https://www.cnblogs.com/cjsblog/p/8267892.html" target="_blank" rel="noopener">《如何保证消费者接收消息的顺序》</a></li></ul><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>支持事务，推拉模式都是支持、适合需要可靠性消息传输的场景。</p><ul><li><a href="https://blog.csdn.net/whoamiyang/article/details/54954780" target="_blank" rel="noopener">《RabbitMQ的应用场景以及基本原理介绍》</a></li><li><a href="https://www.jianshu.com/p/79ca08116d57" target="_blank" rel="noopener">《消息队列之 RabbitMQ》</a> </li><li><a href="https://blog.csdn.net/u013256816/article/details/55515234" target="_blank" rel="noopener">《RabbitMQ之消息确认机制（事务+Confirm）》</a></li></ul><h4 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h4><p>Java实现，推拉模式都是支持，吞吐量逊于Kafka。可以保证消息顺序。</p><ul><li><a href="https://www.jianshu.com/p/824066d70da8" target="_blank" rel="noopener">《RocketMQ 实战之快速入门》</a></li><li><a href="http://www.iocoder.cn/categories/RocketMQ/?vip&amp;architect-awesome" target="_blank" rel="noopener">《RocketMQ 源码解析》</a></li></ul><h4 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h4><p>纯Java实现，兼容JMS，可以内嵌于Java应用中。</p><ul><li><a href="https://www.cnblogs.com/wintersun/p/3962302.html" target="_blank" rel="noopener">《ActiveMQ消息队列介绍》</a></li></ul><h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4><p>高吞吐量、采用拉模式。适合高IO场景，比如日志同步。</p><ul><li><a href="http://kafka.apache.org/" target="_blank" rel="noopener">官方网站</a></li><li><a href="https://blog.csdn.net/allthesametome/article/details/47362451" target="_blank" rel="noopener">《各消息队列对比，Kafka深度解析，众人推荐，精彩好文！》</a></li><li><a href="http://lxw1234.com/archives/2015/10/538.htm" target="_blank" rel="noopener">《Kafka分区机制介绍与示例》</a></li></ul><h4 id="Redis-消息推送"><a href="#Redis-消息推送" class="headerlink" title="Redis 消息推送"></a>Redis 消息推送</h4><p>生产者、消费者模式完全是客户端行为，list 和 拉模式实现，阻塞等待采用 blpop 指令。</p><ul><li><a href="https://blog.csdn.net/qq_34212276/article/details/78455004" target="_blank" rel="noopener">《Redis学习笔记之十：Redis用作消息队列》</a></li></ul><h4 id="ZeroMQ"><a href="#ZeroMQ" class="headerlink" title="ZeroMQ"></a>ZeroMQ</h4><p> TODO</p><h3 id="定时调度"><a href="#定时调度" class="headerlink" title="定时调度"></a>定时调度</h3><h4 id="单机定时调度"><a href="#单机定时调度" class="headerlink" title="单机定时调度"></a>单机定时调度</h4><ul><li><p><a href="https://www.cnblogs.com/shuaiqing/p/7742382.html" target="_blank" rel="noopener">《linux定时任务cron配置》</a></p></li><li><p><a href="https://my.oschina.net/daquan/blog/483305" target="_blank" rel="noopener">《Linux cron运行原理》</a></p><ul><li>fork 进程 + sleep 轮询</li></ul></li><li><p><a href="https://www.cnblogs.com/drift-ice/p/3817269.html" target="_blank" rel="noopener">《Quartz使用总结》</a></p></li><li><a href="https://blog.csdn.net/wenniuwuren/article/details/42082981/" target="_blank" rel="noopener">《Quartz源码解析 —- 触发器按时启动原理》</a></li><li><a href="https://www.jianshu.com/p/bab8e4e32952" target="_blank" rel="noopener">《quartz原理揭秘和源码解读》</a><ul><li>定时调度在 QuartzSchedulerThread 代码中，while()无限循环，每次循环取出时间将到的trigger，触发对应的job，直到调度器线程被关闭。</li></ul></li></ul><h4 id="分布式定时调度"><a href="#分布式定时调度" class="headerlink" title="分布式定时调度"></a>分布式定时调度</h4><ul><li><p><a href="https://blog.csdn.net/qq_16216221/article/details/70314337" target="_blank" rel="noopener">《这些优秀的国产分布式任务调度系统，你用过几个？》</a></p><ul><li>opencron、LTS、XXL-JOB、Elastic-Job、Uncode-Schedule、Antares</li></ul></li><li><p><a href="https://www.cnblogs.com/zhenyuyaodidiao/p/4755649.html" target="_blank" rel="noopener">《Quartz任务调度的基本实现原理》</a></p><ul><li>Quartz集群中，独立的Quartz节点并不与另一其的节点或是管理节点通信，而是通过相同的数据库表来感知到另一Quartz应用的 </li></ul></li><li><a href="http://www.iocoder.cn/categories/Elastic-Job-Lite/?vip&amp;architect-awesome" target="_blank" rel="noopener">《Elastic-Job-Lite 源码解析》</a></li><li><a href="http://www.iocoder.cn/categories/Elastic-Job-Cloud/?vip&amp;architect-awesome" target="_blank" rel="noopener">《Elastic-Job-Cloud 源码解析》</a></li></ul><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><ul><li><p><a href="https://blog.csdn.net/top_code/article/details/54615853" target="_blank" rel="noopener">《从零开始实现RPC框架 - RPC原理及实现》</a></p><ul><li>核心角色：Server: 暴露服务的服务提供方、Client: 调用远程服务的服务消费方、Registry: 服务注册与发现的注册中心。</li></ul></li><li><p><a href="https://blog.csdn.net/testcs_dn/article/details/78050590" target="_blank" rel="noopener">《分布式RPC框架性能大比拼 dubbo、motan、rpcx、gRPC、thrift的性能比较》</a></p></li></ul><h4 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h4><ul><li><a href="http://dubbo.apache.org/" target="_blank" rel="noopener">官方网站</a></li><li><a href="https://www.cnblogs.com/steven520213/p/7606598.html" target="_blank" rel="noopener">dubbo实现原理简单介绍</a></li></ul><p><strong>SPI</strong><br>TODO</p><h4 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a>Thrift</h4><ul><li><a href="http://thrift.apache.org/" target="_blank" rel="noopener">官方网站</a></li><li><a href="https://blog.csdn.net/kesonyk/article/details/50924489" target="_blank" rel="noopener">《Thrift RPC详解》</a><ul><li>支持多语言，通过中间语言定义接口。</li></ul></li></ul><h4 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h4><p>服务端可以认证加密，在外网环境下，可以保证数据安全。</p><ul><li><a href="https://grpc.io/" target="_blank" rel="noopener">官方网站</a></li><li><a href="https://www.cnblogs.com/LBSer/p/4853234.html" target="_blank" rel="noopener">《你应该知道的RPC原理》</a></li></ul><h3 id="数据库中间件"><a href="#数据库中间件" class="headerlink" title="数据库中间件"></a>数据库中间件</h3><h4 id="Sharding-Jdbc"><a href="#Sharding-Jdbc" class="headerlink" title="Sharding Jdbc"></a>Sharding Jdbc</h4><ul><li><a href="http://shardingjdbc.io/" target="_blank" rel="noopener">官网</a></li></ul><h3 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h3><h4 id="日志搜集"><a href="#日志搜集" class="headerlink" title="日志搜集"></a>日志搜集</h4><ul><li><a href="http://cjting.me/misc/build-log-system-with-elkb/" target="_blank" rel="noopener">《从零开始搭建一个ELKB日志收集系统》</a></li><li><a href="https://blog.csdn.net/lzw_2006/article/details/51280058" target="_blank" rel="noopener">《用ELK搭建简单的日志收集分析系统》</a></li><li><a href="https://www.cnblogs.com/beginmind/p/6058194.html" target="_blank" rel="noopener">《日志收集系统-探究》</a></li></ul><h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><ul><li><p><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">Apollo - 携程开源的配置中心应用</a></p><ul><li>Spring Boot 和 Spring Cloud</li><li>支持推、拉模式更新配置</li><li>支持多种语言 </li></ul></li><li><p><a href="https://blog.csdn.net/u011320740/article/details/78742625" target="_blank" rel="noopener">《基于zookeeper实现统一配置管理》</a></p></li><li><p><a href="https://www.cnblogs.com/shamo89/p/8016908.html" target="_blank" rel="noopener">《 Spring Cloud Config 分布式配置中心使用教程》</a></p></li></ul><p>servlet 3.0 异步特性可用于配置中心的客户端</p><ul><li><a href="https://www.cnblogs.com/dogdogwang/p/7151866.html" target="_blank" rel="noopener">《servlet3.0 新特性——异步处理》</a></li></ul><h3 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a>API 网关</h3><p>主要职责：请求转发、安全认证、协议转换、容灾。</p><ul><li><a href="http://yunlzheng.github.io/2017/03/14/the-things-about-api-gateway/" target="_blank" rel="noopener">《API网关那些儿》</a></li><li><p><a href="http://www.infoq.com/cn/news/2016/07/API-background-architecture-floo" target="_blank" rel="noopener">《谈API网关的背景、架构以及落地方案》</a></p></li><li><p><a href="https://blog.csdn.net/zhanglh046/article/details/78651993" target="_blank" rel="noopener">《使用Zuul构建API Gateway》</a></p></li><li><a href="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/?vip&amp;architect-awesome" target="_blank" rel="noopener">《Spring Cloud Gateway 源码解析》</a></li><li><a href="https://mp.weixin.qq.com/s/LIq2CiXJQmmjBC0yvYLY5A" target="_blank" rel="noopener">《HTTP API网关选择之一Kong介绍》</a></li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><h4 id="OSI-七层协议"><a href="#OSI-七层协议" class="headerlink" title="OSI 七层协议"></a>OSI 七层协议</h4><ul><li><a href="https://www.cnblogs.com/Robin-YB/p/6668762.html" target="_blank" rel="noopener">《OSI七层协议模型、TCP/IP四层模型学习笔记》</a></li></ul><h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h4><ul><li><a href="https://www.cnblogs.com/onepixel/p/7092302.html" target="_blank" rel="noopener">《深入浅出 TCP/IP 协议》</a></li><li><a href="https://blog.csdn.net/whuslei/article/details/6667471/" target="_blank" rel="noopener">《TCP协议中的三次握手和四次挥手》</a></li></ul><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><ul><li><a href="https://www.cnblogs.com/wangning528/p/6388464.html" target="_blank" rel="noopener">《http协议详解(超详细)》</a></li></ul><h4 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a>HTTP2.0</h4><ul><li><a href="https://blog.csdn.net/zhuyiquan/article/details/69257126" target="_blank" rel="noopener">《HTTP 2.0 原理详细分析》</a></li><li><a href="https://blog.csdn.net/u012657197/article/details/77877840" target="_blank" rel="noopener">《HTTP2.0的基本单位为二进制帧》</a><ul><li>利用二进制帧负责传输。</li><li>多路复用。</li></ul></li></ul><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><ul><li><p><a href="https://www.cnblogs.com/zhangshitong/p/6478721.html" target="_blank" rel="noopener">《https原理通俗了解》</a></p><ul><li>使用非对称加密协商加密算法</li><li>使用对称加密方式传输数据</li><li>使用第三方机构签发的证书，来加密公钥，用于公钥的安全传输、防止被中间人串改。</li></ul></li><li><p><a href="https://blog.csdn.net/enweitech/article/details/53213862" target="_blank" rel="noopener">《八大免费SSL证书-给你的网站免费添加Https安全加密》</a></p></li></ul><h3 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h3><ul><li><p><a href="http://blog.51cto.com/litaotao/1289790" target="_blank" rel="noopener">《web优化必须了解的原理之I/o的五种模型和web的三种工作模式》</a></p><ul><li>五种I/O模型：阻塞I/O，非阻塞I/O，I/O复用、事件(信号)驱动I/O、异步I/O，前四种I/O属于同步操作，I/O的第一阶段不同、第二阶段相同，最后的一种则属于异步操作。</li><li>三种 Web Server 工作方式：Prefork(多进程)、Worker方式(线程方式)、Event方式。</li></ul></li><li><p><a href="http://www.cnblogs.com/Anker/p/3265058.html" target="_blank" rel="noopener">《select、poll、epoll之间的区别总结》</a></p><ul><li>select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的。</li><li>select 有打开文件描述符数量限制，默认1024（2048 for x64），100万并发，就要用1000个进程、切换开销大；poll采用链表结构，没有数量限制。</li><li>select，poll “醒着”的时候要遍历整个fd集合，而epoll在“醒着”的时候只要判断一下就绪链表是否为空就行了，通过回调机制节省大量CPU时间；select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，而epoll只要一次拷贝。</li><li>poll会随着并发增加，性能逐渐下降，epoll采用红黑树结构，性能稳定，不会随着连接数增加而降低。</li></ul></li><li><p><a href="http://xingyunbaijunwei.blog.163.com/blog/static/76538067201241685556302/" target="_blank" rel="noopener">《select，poll，epoll比较  》</a></p><ul><li>在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。</li></ul></li><li><p><a href="https://www.cnblogs.com/geason/p/5774096.html" target="_blank" rel="noopener">《深入理解Java NIO》</a></p><ul><li>NIO 是一种同步非阻塞的 IO 模型。同步是指线程不断轮询 IO 事件是否就绪，非阻塞是指线程在等待 IO 的时候，可以同时做其他任务</li></ul></li><li><p><a href="https://blog.csdn.net/skiof007/article/details/52873421" target="_blank" rel="noopener">《BIO与NIO、AIO的区别》</a></p></li><li><p><a href="https://blog.csdn.net/u013074465/article/details/46276967" target="_blank" rel="noopener">《两种高效的服务器设计模型：Reactor和Proactor模型》</a></p></li></ul><h4 id="Epoll"><a href="#Epoll" class="headerlink" title="Epoll"></a>Epoll</h4><ul><li><a href="https://www.cnblogs.com/fnlingnzb-learner/p/5835573.html" target="_blank" rel="noopener">《epoll使用详解（精髓）》</a></li></ul><h4 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java NIO"></a>Java NIO</h4><ul><li><a href="https://www.cnblogs.com/geason/p/5774096.html" target="_blank" rel="noopener">《深入理解Java NIO》</a></li><li><a href="https://blog.csdn.net/xidianliuy/article/details/51612676" target="_blank" rel="noopener">《Java NIO编写Socket服务器的一个例子》</a></li></ul><h4 id="kqueue"><a href="#kqueue" class="headerlink" title="kqueue"></a>kqueue</h4><ul><li><a href="http://www.cnblogs.com/luminocean/p/5631336.html" target="_blank" rel="noopener">《kqueue用法简介》</a></li></ul><h3 id="连接和短连接"><a href="#连接和短连接" class="headerlink" title="连接和短连接"></a>连接和短连接</h3><ul><li><a href="https://www.cnblogs.com/pangguoping/p/5571422.html" target="_blank" rel="noopener">《TCP/IP系列——长连接与短连接的区别》</a></li></ul><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><ul><li><a href="https://blog.csdn.net/excellentyuxiao/article/details/53390408" target="_blank" rel="noopener">《Netty原理剖析》</a><ul><li>Reactor 模式介绍。</li><li>Netty 是 Reactor 模式的一种实现。</li></ul></li></ul><h3 id="零拷贝（Zero-copy）"><a href="#零拷贝（Zero-copy）" class="headerlink" title="零拷贝（Zero-copy）"></a>零拷贝（Zero-copy）</h3><ul><li><a href="https://www.cnblogs.com/xys1228/p/6088805.html" target="_blank" rel="noopener">《对于 Netty ByteBuf 的零拷贝(Zero Copy) 的理解》</a><ul><li>多个物理分离的buffer，通过逻辑上合并成为一个，从而避免了数据在内存之间的拷贝。</li></ul></li></ul><h3 id="序列化-二进制协议"><a href="#序列化-二进制协议" class="headerlink" title="序列化(二进制协议)"></a>序列化(二进制协议)</h3><h4 id="Hessian"><a href="#Hessian" class="headerlink" title="Hessian"></a>Hessian</h4><ul><li><a href="https://www.cnblogs.com/happyday56/p/4268249.html" target="_blank" rel="noopener">《Hessian原理分析》</a><br>Binary-RPC;不仅仅是序列化</li></ul><h4 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h4><ul><li><a href="https://blog.csdn.net/antgan/article/details/52103966" target="_blank" rel="noopener">《Protobuf协议的Java应用例子》</a><br>Goolge出品、占用空间和效率完胜其他序列化类库，如Hessian；需要编写  .proto 文件。</li><li><p><a href="https://worktile.com/tech/share/prototol-buffers" target="_blank" rel="noopener">《Protocol Buffers序列化协议及应用》</a></p><pre><code>* 关于协议的解释；缺点：可读性差;</code></pre></li><li><p><a href="https://blog.csdn.net/eric520zenobia/article/details/53766571" target="_blank" rel="noopener">《简单的使用 protobuf 和 protostuff》</a></p><ul><li>protostuff 的好处是不用写 .proto 文件，Java 对象直接就可以序列化。</li></ul></li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h3><h4 id="数据库设计的三大范式"><a href="#数据库设计的三大范式" class="headerlink" title="数据库设计的三大范式"></a>数据库设计的三大范式</h4><ul><li><a href="https://www.cnblogs.com/waj6511988/p/7027127.html" target="_blank" rel="noopener">《数据库的三大范式以及五大约束》</a><ul><li>第一范式：数据表中的每一列（每个字段）必须是不可拆分的最小单元，也就是确保每一列的原子性；</li><li>第二范式（2NF）：满足1NF后，要求表中的所有列，都必须依赖于主键，而不能有任何一列与主键没有关系，也就是说一个表只描述一件事情；</li><li>第三范式：必须先满足第二范式（2NF），要求：表中的每一列只与主键直接相关而不是间接相关，（表中的每一列只能依赖于主键）；</li></ul></li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li><p><a href="http://www.admin10000.com/document/5372.html" target="_blank" rel="noopener">《MySQL的InnoDB索引原理详解》</a></p></li><li><p><a href="https://blog.csdn.net/xifeijian/article/details/20316775" target="_blank" rel="noopener">《MySQL存储引擎－－MyISAM与InnoDB区别》</a></p><ul><li>两种类型最主要的差别就是Innodb 支持事务处理与外键和行级锁</li></ul></li><li><p><a href="https://www.2cto.com/database/201211/172380.html" target="_blank" rel="noopener">《myisam和innodb索引实现的不同》</a></p></li></ul><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><ul><li><a href="https://my.oschina.net/kailuncen/blog/1504217" target="_blank" rel="noopener">《一篇文章带你读懂Mysql和InnoDB》</a></li></ul><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ul><li><p><a href="http://vdisk.weibo.com/s/muWOT" target="_blank" rel="noopener">《MySQL36条军规》</a></p></li><li><p><a href="https://www.cnblogs.com/zhouyusheng/p/8038224.html" target="_blank" rel="noopener">《MYSQL性能优化的最佳20+条经验》</a></p></li><li><a href="https://blog.csdn.net/when_less_is_more/article/details/70187459" target="_blank" rel="noopener">《SQL优化之道》</a></li><li><a href="https://www.cnblogs.com/sivkun/p/7518540.html" target="_blank" rel="noopener">《mysql数据库死锁的产生原因及解决办法》</a></li><li><a href="https://blog.csdn.net/monkey_d_feilong/article/details/52291556" target="_blank" rel="noopener">《导致索引失效的可能情况》</a></li><li><a href="https://blog.csdn.net/zy_281870667/article/details/51604540" target="_blank" rel="noopener">《 MYSQL分页limit速度太慢优化方法》</a><ul><li>原则上就是缩小扫描范围。</li></ul></li></ul><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><h5 id="聚集索引-非聚集索引"><a href="#聚集索引-非聚集索引" class="headerlink" title="聚集索引, 非聚集索引"></a>聚集索引, 非聚集索引</h5><ul><li><a href="https://blog.csdn.net/no_endless/article/details/77073549" target="_blank" rel="noopener">《MySQL 聚集索引/非聚集索引简述》</a></li><li><a href="https://www.cnblogs.com/zlcxbb/p/5757245.html" target="_blank" rel="noopener">《MyISAM和InnoDB的索引实现》</a></li></ul><p>MyISAM 是非聚集，InnoDB 是聚集</p><h5 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h5><ul><li><a href="https://www.cnblogs.com/summer0space/p/7247778.html" target="_blank" rel="noopener">《复合索引的优点和注意事项》</a></li></ul><h5 id="自适应哈希索引-AHI"><a href="#自适应哈希索引-AHI" class="headerlink" title="自适应哈希索引(AHI)"></a>自适应哈希索引(AHI)</h5><ul><li><a href="https://blog.csdn.net/Linux_ever/article/details/62043708" target="_blank" rel="noopener">《InnoDB存储引擎——自适应哈希索引》</a></li></ul><h4 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h4><ul><li><a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="noopener">《MySQL 性能优化神器 Explain 使用分析》</a></li></ul><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h4><ul><li><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">MongoDB 教程</a></li><li><a href="http://mxdxm.iteye.com/blog/2093603" target="_blank" rel="noopener">《Mongodb相对于关系型数据库的优缺点》</a><ul><li>优点：弱一致性（最终一致），更能保证用户的访问速度；内置GridFS，支持大容量的存储；Schema-less 数据库，不用预先定义结构；内置Sharding；相比于其他NoSQL，第三方支持丰富；性能优越；</li><li>缺点：mongodb不支持事务操作；mongodb占用空间过大；MongoDB没有如MySQL那样成熟的维护工具，这对于开发和IT运营都是个值得注意的地方；</li></ul></li></ul><h4 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h4><ul><li><a href="http://www.thebigdata.cn/HBase/35831.html" target="_blank" rel="noopener">《简明 HBase 入门教程（开篇）》</a></li><li><a href="https://www.cnblogs.com/qiaoyihang/p/6246424.html" target="_blank" rel="noopener">《深入学习HBase架构原理》</a></li><li><a href="https://blog.csdn.net/youzhouliu/article/details/67632882" target="_blank" rel="noopener">《传统的行存储和（HBase）列存储的区别》</a></li></ul><ul><li><p><a href="https://blog.csdn.net/lifuxiangcaohui/article/details/39891099" target="_blank" rel="noopener">《Hbase与传统数据库的区别》</a></p><ul><li>空数据不存储，节省空间，且适用于并发。</li></ul></li><li><p><a href="https://blog.csdn.net/u014091123/article/details/73163088" target="_blank" rel="noopener">《HBase Rowkey设计》</a></p><ul><li>rowkey 按照字典顺序排列，便于批量扫描。</li><li>通过散列可以避免热点。</li></ul></li></ul><h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><h3 id="搜索引擎原理"><a href="#搜索引擎原理" class="headerlink" title="搜索引擎原理"></a>搜索引擎原理</h3><ul><li><a href="https://www.jianshu.com/p/0193dc44135b" target="_blank" rel="noopener">《倒排索引–搜索引擎入门》</a></li></ul><h3 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h3><ul><li><a href="https://www.cnblogs.com/rodge-run/p/6551152.html" target="_blank" rel="noopener">《Lucene入门简介》</a></li></ul><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><ul><li><a href="https://blog.csdn.net/laoyang360/article/details/52244917" target="_blank" rel="noopener">《Elasticsearch学习，请先看这一篇！》</a></li><li><a href="https://blog.csdn.net/cyony/article/details/65437708" target="_blank" rel="noopener">《Elasticsearch索引原理》</a></li></ul><h3 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h3><ul><li><a href="https://blog.csdn.net/u011936655/article/details/51960005" target="_blank" rel="noopener">《 Apache Solr入门教程》</a></li><li><a href="https://blog.csdn.net/convict_eva/article/details/53537837" target="_blank" rel="noopener">《elasticsearch与solr比较》</a></li></ul><h3 id="sphinx"><a href="#sphinx" class="headerlink" title="sphinx"></a>sphinx</h3><ul><li><a href="http://blog.jobbole.com/101672/" target="_blank" rel="noopener">《Sphinx 的介绍和原理探索》</a></li></ul><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><h3 id="性能优化方法论"><a href="#性能优化方法论" class="headerlink" title="性能优化方法论"></a>性能优化方法论</h3><ul><li><p><a href="https://blog.csdn.net/huangwenyi1010/article/details/72673447?ref=myread" target="_blank" rel="noopener">《15天的性能优化工作，5方面的调优经验》</a></p><ul><li>代码层面、业务层面、数据库层面、服务器层面、前端优化。</li></ul></li><li><p><a href="https://blog.csdn.net/tenglizhe/article/details/44563135" target="_blank" rel="noopener">《系统性能优化的几个方面》</a></p></li></ul><h3 id="容量评估"><a href="#容量评估" class="headerlink" title="容量评估"></a>容量评估</h3><ul><li><a href="https://blog.csdn.net/u012528360/article/details/70054156" target="_blank" rel="noopener">《联网性能与容量评估的方法论和典型案例》</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651959542&amp;idx=1&amp;sn=2494bbea9a855e0e1c3ccd6d2562a600&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">《互联网架构，如何进行容量设计？》</a><ul><li>评估总访问量、评估平均访问量QPS、评估高峰QPS、评估系统、单机极限QPS</li></ul></li></ul><h3 id="CDN-网络"><a href="#CDN-网络" class="headerlink" title="CDN 网络"></a>CDN 网络</h3><ul><li><a href="https://www.cnblogs.com/wxiaona/p/5867685.html" target="_blank" rel="noopener">《CDN加速原理》</a></li><li><a href="https://www.zhihu.com/question/20536932" target="_blank" rel="noopener">《国内有哪些比较好的 CDN？》</a></li></ul><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><ul><li><a href="https://blog.csdn.net/fysuccess/article/details/66972554" target="_blank" rel="noopener">《主流Java数据库连接池比较与开发配置实战》</a></li></ul><h3 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h3><ul><li><a href="https://blog.csdn.net/yethyeth/article/details/73266455" target="_blank" rel="noopener">《九大Java性能调试工具，必备至少一款》</a></li></ul><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><h3 id="流式计算"><a href="#流式计算" class="headerlink" title="流式计算"></a>流式计算</h3><h4 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h4><ul><li><a href="http://storm.apache.org/" target="_blank" rel="noopener">官方网站</a></li><li><a href="https://blog.csdn.net/uisoul/article/details/77989927" target="_blank" rel="noopener">《最详细的Storm入门教程》</a></li></ul><h4 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h4><ul><li><a href="https://blog.csdn.net/lisi1129/article/details/54844919" target="_blank" rel="noopener">《Flink之一 Flink基本原理介绍》</a></li></ul><h4 id="Kafka-Stream"><a href="#Kafka-Stream" class="headerlink" title="Kafka Stream"></a>Kafka Stream</h4><ul><li><a href="https://yq.aliyun.com/articles/58382" target="_blank" rel="noopener">《Kafka Stream调研：一种轻量级流计算模式》</a></li></ul><h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><p>例如：</p><ul><li>广告相关实时统计；</li><li>推荐系统用户画像标签实时更新；</li><li>线上服务健康状况实时监测；</li><li>实时榜单；</li><li>实时数据统计。</li></ul><h3 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h3><ul><li><a href="https://blog.csdn.net/houbin0912/article/details/72967178" target="_blank" rel="noopener">《用通俗易懂的话说下hadoop是什么,能做什么》</a></li><li><a href="http://gitbook.cn/books/5954c9600326c7705af8a92a/index.html" target="_blank" rel="noopener">《史上最详细的Hadoop环境搭建》</a></li></ul><h4 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h4><ul><li><a href="https://segmentfault.com/a/1190000011575458" target="_blank" rel="noopener">《【Hadoop学习】HDFS基本原理》</a></li></ul><h4 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h4><ul><li><a href="https://blog.csdn.net/oppo62258801/article/details/72884633" target="_blank" rel="noopener">《用通俗易懂的大白话讲解Map/Reduce原理》</a></li><li><a href="https://blog.csdn.net/foye12/article/details/78358292" target="_blank" rel="noopener">《 简单的map-reduce的java例子》</a></li></ul><h4 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h4><ul><li><a href="http://www.cnblogs.com/codeOfLife/p/5492740.html" target="_blank" rel="noopener">《初步掌握Yarn的架构及原理》</a></li></ul><h3 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h3><ul><li><a href="http://www.cnblogs.com/tgzhu/p/5818374.html" target="_blank" rel="noopener">《Spark(一): 基本架构及原理》</a></li></ul><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="web-安全"><a href="#web-安全" class="headerlink" title="web 安全"></a>web 安全</h3><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><ul><li><a href="https://blog.csdn.net/qq_21956483/article/details/54377947" target="_blank" rel="noopener">《xss攻击原理与解决方法》</a><h4 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h4></li><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6412-csrf.html" target="_blank" rel="noopener">《CSRF原理及防范》</a></li></ul><h4 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h4><ul><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6413-sql-zhu-ru.html" target="_blank" rel="noopener">《SQL注入》</a></li></ul><h4 id="Hash-Dos"><a href="#Hash-Dos" class="headerlink" title="Hash Dos"></a>Hash Dos</h4><ul><li><a href="http://www.freebuf.com/articles/web/14199.html" target="_blank" rel="noopener">《邪恶的JAVA HASH DOS攻击》</a><ul><li>利用JsonObjet 上传大Json，JsonObject 底层使用HashMap；不同的数据产生相同的hash值，使得构建Hash速度变慢，耗尽CPU。</li></ul></li><li><a href="https://yq.aliyun.com/articles/92194?t=t1" target="_blank" rel="noopener">《一种高级的DoS攻击-Hash碰撞攻击》</a></li><li><a href="http://www.iteye.com/news/23939/" target="_blank" rel="noopener">《关于Hash Collision DoS漏洞：解析与解决方案》</a></li></ul><h4 id="脚本注入"><a href="#脚本注入" class="headerlink" title="脚本注入"></a>脚本注入</h4><ul><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6414-shang-chuan-wen-jian-guo-lv.html" target="_blank" rel="noopener">《上传文件漏洞原理及防范》</a></li></ul><h4 id="漏洞扫描工具"><a href="#漏洞扫描工具" class="headerlink" title="漏洞扫描工具"></a>漏洞扫描工具</h4><ul><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/6421-dvwa.html" target="_blank" rel="noopener">《DVWA》</a></li><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/w3af.html" target="_blank" rel="noopener">W3af</a></li><li><a href="https://blog.csdn.net/xygg0801/article/details/53610640" target="_blank" rel="noopener">OpenVAS详解</a></li></ul><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><ul><li><p><a href="https://blog.csdn.net/niaonao/article/details/51112686" target="_blank" rel="noopener">《验证码原理分析及实现》</a></p></li><li><p><a href="https://my.oschina.net/jiangbianwanghai/blog/1031031" target="_blank" rel="noopener">《详解滑动验证码的实现原理》</a></p><ul><li>滑动验证码是根据人在滑动滑块的响应时间，拖拽速度，时间，位置，轨迹，重试次数等来评估风险。</li></ul></li><li><p><a href="https://www.cnblogs.com/xcj26/p/5242758.html" target="_blank" rel="noopener">《淘宝滑动验证码研究》</a></p></li></ul><h3 id="DDoS-防范"><a href="#DDoS-防范" class="headerlink" title="DDoS 防范"></a>DDoS 防范</h3><ul><li><a href="http://netsecurity.51cto.com/art/201601/503799.htm" target="_blank" rel="noopener">《学习手册：DDoS的攻击方式及防御手段》</a></li><li><a href="http://netsecurity.51cto.com/art/201406/442756.htm" target="_blank" rel="noopener">《免费DDoS攻击测试工具大合集》</a></li></ul><h3 id="用户隐私信息保护"><a href="#用户隐私信息保护" class="headerlink" title="用户隐私信息保护"></a>用户隐私信息保护</h3><ol><li>用户密码非明文保存，加动态salt。</li><li>身份证号，手机号如果要显示，用 “*” 替代部分字符。</li><li>联系方式在的显示与否由用户自己控制。</li><li>TODO</li></ol><ul><li><a href="https://zhidao.baidu.com/question/1988017976673661587.html" target="_blank" rel="noopener">《个人隐私包括哪些》</a></li><li><p><a href="https://www.zhihu.com/question/20137108" target="_blank" rel="noopener">《在互联网上，隐私的范围包括哪些？》</a></p></li><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6425-jia-mi-chang-jing-ff1a-yong-hu-mi-ma-bao-cun.html" target="_blank" rel="noopener">《用户密码保存》</a></p></li></ul><h3 id="序列化漏洞"><a href="#序列化漏洞" class="headerlink" title="序列化漏洞"></a>序列化漏洞</h3><ul><li><a href="https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/" target="_blank" rel="noopener">《Lib之过？Java反序列化漏洞通用利用分析》</a></li></ul><h3 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h3><h4 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h4><ul><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6421-chang-jian-dui-cheng-jia-mi-suan-fa.html" target="_blank" rel="noopener">《常见对称加密算法》</a><ul><li>DES、3DES、Blowfish、AES</li><li>DES 采用 56位秘钥，Blowfish 采用1到448位变长秘钥，AES 128，192和256位长度的秘钥。</li><li>DES 秘钥太短（只有56位）算法目前已经被 AES 取代，并且 AES 有硬件加速，性能很好。</li></ul></li></ul><h4 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h4><ul><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6422-chang-jian-ha-xi-suan-fa-and-hmac.html" target="_blank" rel="noopener">《常用的哈希算法》</a></p><ul><li>MD5 和 SHA-1 已经不再安全，已被弃用。</li><li>目前 SHA-256 是比较安全的。</li></ul></li><li><p><a href="https://blog.csdn.net/zhangruhong168/article/details/78033202" target="_blank" rel="noopener">《基于Hash摘要签名的公网URL签名验证设计方案》</a></p></li></ul><h4 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h4><ul><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6424-chang-yong-fei-dui-cheng-jia-mi-suan-fa.html" target="_blank" rel="noopener">《常见非对称加密算法》</a></p><ul><li>RSA、DSA、ECDSA(螺旋曲线加密算法)</li><li>和 RSA 不同的是 DSA 仅能用于数字签名，不能进行数据加密解密，其安全性和RSA相当，但其性能要比RSA快。</li><li><p>256位的ECC秘钥的安全性等同于3072位的RSA秘钥。</p><p>  <a href="http://baijiahao.baidu.com/s?id=1578348858092033763&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">《区块链的加密技术》</a>    </p></li></ul></li></ul><h3 id="服务器安全"><a href="#服务器安全" class="headerlink" title="服务器安全"></a>服务器安全</h3><ul><li><a href="http://www.freebuf.com/articles/system/121540.html" target="_blank" rel="noopener">《Linux强化论：15步打造一个安全的Linux服务器》</a></li></ul><h3 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h3><h4 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h4><p>TODO</p><h3 id="网络隔离"><a href="#网络隔离" class="headerlink" title="网络隔离"></a>网络隔离</h3><h4 id="内外网分离"><a href="#内外网分离" class="headerlink" title="内外网分离"></a>内外网分离</h4><p>TODO</p><h4 id="登录跳板机"><a href="#登录跳板机" class="headerlink" title="登录跳板机"></a>登录跳板机</h4><p>在内外环境中通过跳板机登录到线上主机。</p><ul><li><a href="http://blog.51cto.com/zero01/2062618" target="_blank" rel="noopener">《搭建简易堡垒机》</a></li></ul><h3 id="授权、认证"><a href="#授权、认证" class="headerlink" title="授权、认证"></a>授权、认证</h3><h4 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h4><ul><li><a href="https://www.cnblogs.com/zq8024/p/5003050.html" target="_blank" rel="noopener">《基于组织角色的权限设计》</a></li><li><a href="https://www.cnblogs.com/shijiaqi1066/p/3793894.html" target="_blank" rel="noopener">《权限系统与RBAC模型概述》</a></li><li><a href="https://blog.csdn.net/he90227/article/details/38663553" target="_blank" rel="noopener">《Spring整合Shiro做权限控制模块详细案例分析》</a></li></ul><h4 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h4><ul><li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">《理解OAuth 2.0》</a></li><li><a href="https://www.cnblogs.com/flashsun/p/7424071.html" target="_blank" rel="noopener">《一张图搞定OAuth2.0》</a></li></ul><h4 id="双因素认证（2FA）"><a href="#双因素认证（2FA）" class="headerlink" title="双因素认证（2FA）"></a>双因素认证（2FA）</h4><p>2FA - Two-factor authentication，用于加强登录验证</p><p>常用做法是 登录密码 + 手机验证码（或者令牌Key，类似于与网银的 USB key）</p><ul><li>【《双因素认证（2FA）教程》】(<a href="http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html</a>)</li></ul><h4 id="单点登录-SSO"><a href="#单点登录-SSO" class="headerlink" title="单点登录(SSO)"></a>单点登录(SSO)</h4><ul><li><p><a href="https://www.cnblogs.com/ywlaker/p/6113927.html" target="_blank" rel="noopener">《单点登录原理与简单实现》</a></p></li><li><p><a href="https://github.com/apereo/cas" target="_blank" rel="noopener">CAS单点登录框架</a></p></li></ul><h2 id="常用开源框架"><a href="#常用开源框架" class="headerlink" title="常用开源框架"></a>常用开源框架</h2><h3 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h3><ul><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/chapter1/di-yi-zhang-ff1a-zhun-bei-qi-cheng/12-guan-yu-kai-yuan/123-kai-yuan-xie-yi-de-xuan-ze.html" target="_blank" rel="noopener">《开源协议的选择》</a></p></li><li><p><a href="http://choosealicense.online/" target="_blank" rel="noopener">如何选择一个开源软件协议</a></p></li></ul><h3 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h3><h4 id="Log4j、Log4j2"><a href="#Log4j、Log4j2" class="headerlink" title="Log4j、Log4j2"></a>Log4j、Log4j2</h4><ul><li><a href="https://blog.csdn.net/u012422446/article/details/51199724" target="_blank" rel="noopener">《log4j 详细讲解》</a></li><li><a href="https://blog.csdn.net/vbirdbest/article/details/71751835" target="_blank" rel="noopener">《log4j2 实际使用详解》</a></li><li><a href="https://my.oschina.net/OutOfMemory/blog/789267" target="_blank" rel="noopener">《Log4j1,Logback以及Log4j2性能测试对比》</a><ul><li>Log4J 异步日志性能优异。 </li></ul></li></ul><h4 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h4><ul><li><a href="https://blog.csdn.net/rulon147/article/details/52620541" target="_blank" rel="noopener">《最全LogBack 详解、含java案例和配置说明》</a></li></ul><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><ul><li><a href="https://blog.csdn.net/sinat_34093604/article/details/53082000" target="_blank" rel="noopener">《ORM框架使用优缺点》</a><ul><li>主要目的是为了提高开发效率。 </li></ul></li></ul><p><strong>MyBatis：</strong></p><ul><li><p><a href="https://www.cnblogs.com/winclpt/articles/7511672.html" target="_blank" rel="noopener">《mybatis缓存机制详解》</a></p><ul><li>一级缓存是SqlSession级别的缓存，缓存的数据只在SqlSession内有效</li><li>二级缓存是mapper级别的缓存，同一个namespace公用这一个缓存，所以对SqlSession是共享的；使用 LRU 机制清理缓存，通过 cacheEnabled 参数开启。  </li></ul></li><li><p><a href="https://blog.csdn.net/baidu_32877851/article/details/53959268" target="_blank" rel="noopener">《MyBatis学习之代码生成器Generator》</a></p></li></ul><h3 id="网络框架"><a href="#网络框架" class="headerlink" title="网络框架"></a>网络框架</h3><p>TODO</p><h3 id="Web-框架"><a href="#Web-框架" class="headerlink" title="Web 框架"></a>Web 框架</h3><h4 id="Spring-家族"><a href="#Spring-家族" class="headerlink" title="Spring 家族"></a>Spring 家族</h4><p><strong>Spring</strong></p><ul><li><a href="https://www.w3cschool.cn/wkspring/" target="_blank" rel="noopener">Spring 简明教程</a></li></ul><p><strong>Spring Boot</strong></p><ul><li><a href="http://projects.spring.io/spring-boot/" target="_blank" rel="noopener">官方网站</a></li><li><a href="http://blog.didispace.com/Spring-Boot%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">《Spring Boot基础教程》</a></li></ul><p><strong>Spring Cloud</strong></p><ul><li><a href="http://springboot.fun/" target="_blank" rel="noopener">Spring Boot 中文索引站</a></li><li><a href="https://springcloud.cc/" target="_blank" rel="noopener">Spring Cloud 中文文档</a></li><li><a href="http://blog.didispace.com/Spring-Cloud%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">《Spring Cloud基础教程》</a></li></ul><h3 id="工具框架"><a href="#工具框架" class="headerlink" title="工具框架"></a>工具框架</h3><ul><li><a href="https://www.cnblogs.com/crazylqy/p/4872236.html" target="_blank" rel="noopener">《Apache Commons 工具类介绍及简单使用》</a></li><li><a href="http://ifeve.com/google-guava/" target="_blank" rel="noopener">《Google guava 中文教程》</a></li></ul><h2 id="分布式设计"><a href="#分布式设计" class="headerlink" title="分布式设计"></a>分布式设计</h2><h3 id="扩展性设计"><a href="#扩展性设计" class="headerlink" title="扩展性设计"></a>扩展性设计</h3><ul><li><p><a href="https://blog.csdn.net/hemin1003/article/details/53633926" target="_blank" rel="noopener">《架构师不可不知的十大可扩展架构》</a></p><ul><li>总结下来，通用的套路就是分布、缓存及异步处理。 </li></ul></li><li><p><a href="https://yq.aliyun.com/articles/38119" target="_blank" rel="noopener">《可扩展性设计之数据切分》</a></p><ul><li>水平切分+垂直切分</li><li>利用中间件进行分片如，MySQL Proxy。</li><li>利用分片策略进行切分，如按照ID取模。 </li></ul></li><li><p><a href="https://blog.csdn.net/deniro_li/article/details/78458306" target="_blank" rel="noopener">《说说如何实现可扩展性的大型网站架构》</a></p><ul><li>分布式服务+消息队列。</li></ul></li><li><p><a href="https://blog.csdn.net/chaofanwei/article/details/29191073" target="_blank" rel="noopener">《大型网站技术架构（七）–网站的可扩展性架构》</a></p></li></ul><h3 id="稳定性-amp-高可用"><a href="#稳定性-amp-高可用" class="headerlink" title="稳定性 &amp; 高可用"></a>稳定性 &amp; 高可用</h3><ul><li><a href="https://blog.csdn.net/hustspy1990/article/details/78008324" target="_blank" rel="noopener">《系统设计：关于高可用系统的一些技术方案》</a><ul><li>可扩展：水平扩展、垂直扩展。 通过冗余部署，避免单点故障。</li><li>隔离：避免单一业务占用全部资源。避免业务之间的相互影响 2. 机房隔离避免单点故障。</li><li>解耦：降低维护成本，降低耦合风险。减少依赖，减少相互间的影响。</li><li>限流：滑动窗口计数法、漏桶算法、令牌桶算法等算法。遇到突发流量时，保证系统稳定。</li><li>降级：紧急情况下释放非核心功能的资源。牺牲非核心业务，保证核心业务的高可用。</li><li>熔断：异常情况超出阈值进入熔断状态，快速失败。减少不稳定的外部依赖对核心服务的影响。</li><li>自动化测试：通过完善的测试，减少发布引起的故障。</li><li>灰度发布：灰度发布是速度与安全性作为妥协，能够有效减少发布故障。</li></ul></li></ul><ul><li><a href="https://coolshell.cn/articles/17459.html" target="_blank" rel="noopener">《关于高可用的系统》</a><ul><li>设计原则：数据不丢(持久化)；服务高可用(服务副本)；绝对的100%高可用很难，目标是做到尽可能多的9，如99.999%（全年累计只有5分钟）。     </li></ul></li></ul><h4 id="硬件负载均衡"><a href="#硬件负载均衡" class="headerlink" title="硬件负载均衡"></a>硬件负载均衡</h4><ul><li><p><a href="https://www.cnblogs.com/wuyun-blog/p/6186198.html" target="_blank" rel="noopener">《转！！负载均衡器技术Nginx和F5的优缺点对比》</a></p><ul><li>主要是和F5对比。</li></ul></li><li><p><a href="https://www.cnblogs.com/lcword/p/5773296.html" target="_blank" rel="noopener">《软/硬件负载均衡产品 你知多少？》</a></p></li></ul><h4 id="软件负载均衡"><a href="#软件负载均衡" class="headerlink" title="软件负载均衡"></a>软件负载均衡</h4><ul><li><a href="https://www.cnblogs.com/tianzhiliang/articles/2317808.html" target="_blank" rel="noopener">《几种负载均衡算法》</a><br>  轮寻、权重、负载、最少连接、QoS</li><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/611-dns-fang-shi.html" target="_blank" rel="noopener">《DNS负载均衡》</a><ul><li>配置简单，更新速度慢。 </li></ul></li><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/613-nginx-fu-zai-jun-heng.html" target="_blank" rel="noopener">《Nginx负载均衡》</a></p><ul><li>简单轻量、学习成本低；主要适用于web应用。</li></ul></li><li><p><a href="https://www.cnblogs.com/edisonchou/p/4281978.html" target="_blank" rel="noopener">《借助LVS+Keepalived实现负载均衡 》</a></p><ul><li>配置比较负载、只支持到4层，性能较高。</li></ul></li><li><p><a href="http://www.ttlsa.com/linux/haproxy-study-tutorial/" target="_blank" rel="noopener">《HAProxy用法详解 全网最详细中文文档》</a></p><ul><li>支持到七层（比如HTTP）、功能比较全面，性能也不错。</li></ul></li><li><p><a href="http://blog.itpub.net/25704976/viewspace-1319781/" target="_blank" rel="noopener">《Haproxy+Keepalived+MySQL实现读均衡负载》</a></p><ul><li>主要是用户读请求的负载均衡。</li></ul></li><li><p><a href="https://www.cnblogs.com/lylife/p/5584019.html" target="_blank" rel="noopener">《rabbitmq+haproxy+keepalived实现高可用集群搭建》</a></p></li></ul><h4 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h4><ul><li><a href="https://www.cnblogs.com/haoxinyue/p/6792309.html" target="_blank" rel="noopener">《谈谈高并发系统的限流》</a><ul><li>计数器：通过滑动窗口计数器，控制单位时间内的请求次数，简单粗暴。</li><li>漏桶算法：固定容量的漏桶，漏桶满了就丢弃请求，比较常用。</li><li>令牌桶算法：固定容量的令牌桶，按照一定速率添加令牌，处理请求前需要拿到令牌，拿不到令牌则丢弃请求，或进入丢队列，可以通过控制添加令牌的速率，来控制整体速度。Guava 中的 RateLimiter 是令牌桶的实现。</li><li>Nginx 限流：通过 <code>limit_req</code> 等模块限制并发连接数。</li></ul></li></ul><h4 id="应用层容灾"><a href="#应用层容灾" class="headerlink" title="应用层容灾"></a>应用层容灾</h4><ul><li><p><a href="https://segmentfault.com/a/1190000005988895" target="_blank" rel="noopener">《防雪崩利器：熔断器 Hystrix 的原理与使用》</a></p><ul><li>雪崩效应原因：硬件故障、硬件故障、程序Bug、重试加大流量、用户大量请求。 </li><li>雪崩的对策：限流、改进缓存模式(缓存预加载、同步调用改异步)、自动扩容、降级。</li><li>Hystrix设计原则：<ul><li>资源隔离：Hystrix通过将每个依赖服务分配独立的线程池进行资源隔离, 从而避免服务雪崩。</li><li>熔断开关：服务的健康状况 = 请求失败数 / 请求总数，通过阈值设定和滑动窗口控制开关。</li><li>命令模式：通过继承 HystrixCommand 来包装服务调用逻辑。 </li></ul></li></ul></li><li><p><a href="https://blog.csdn.net/zeb_perfect/article/details/54135506" target="_blank" rel="noopener">《缓存穿透，缓存击穿，缓存雪崩解决方案分析》</a></p></li><li><a href="https://blog.csdn.net/zeb_perfect/article/details/54135506" target="_blank" rel="noopener">《缓存击穿、失效以及热点key问题》</a> <ul><li>主要策略：失效瞬间：单机使用锁；使用分布式锁；不过期；</li><li>热点数据：热点数据单独存储；使用本地缓存；分成多个子key；</li></ul></li></ul><h4 id="跨机房容灾"><a href="#跨机房容灾" class="headerlink" title="跨机房容灾"></a>跨机房容灾</h4><ul><li><p><a href="http://dc.idcquan.com/ywgl/71559.shtml" target="_blank" rel="noopener">《“异地多活”多机房部署经验谈》</a></p><ul><li>通过自研中间件进行数据同步。 </li></ul></li><li><p><a href="https://blog.csdn.net/jeffreynicole/article/details/48135093" target="_blank" rel="noopener">《异地多活（异地双活）实践经验》</a></p><ul><li>注意延迟问题，多次跨机房调用会将延时放大数倍。</li><li>建房间专线很大概率会出现问题，做好运维和程序层面的容错。</li><li>不能依赖于程序端数据双写，要有自动同步方案。 </li><li>数据永不在高延迟和较差网络质量下，考虑同步质量问题。</li><li>核心业务和次要业务分而治之，甚至只考虑核心业务。</li><li>异地多活监控部署、测试也要跟上。</li><li>业务允许的情况下考虑用户分区，尤其是游戏、邮箱业务。</li><li>控制跨机房消息体大小，越小越好。</li><li>考虑使用docker容器虚拟化技术，提高动态调度能力。</li></ul></li><li><p><a href="https://blog.csdn.net/yoara/article/details/38013751" target="_blank" rel="noopener">容灾技术及建设经验介绍</a></p></li></ul><h4 id="容灾演练流程"><a href="#容灾演练流程" class="headerlink" title="容灾演练流程"></a>容灾演练流程</h4><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650996320&amp;idx=1&amp;sn=0ed3be190bbee4a9277886ef88cbb2e5" target="_blank" rel="noopener">《依赖治理、灰度发布、故障演练，阿里电商故障演练系统的设计与实战经验》</a><ul><li>常见故障画像</li><li>案例：预案有效性、预案有效性、故障复现、架构容灾测试、参数调优、参数调优、故障突袭、联合演练。</li></ul></li></ul><h4 id="平滑启动"><a href="#平滑启动" class="headerlink" title="平滑启动"></a>平滑启动</h4><ul><li><p>平滑重启应用思路<br>1.端流量（如vip层）、2. flush 数据(如果有)、3, 重启应用</p></li><li><p><a href="https://blog.csdn.net/u011001084/article/details/73480432" target="_blank" rel="noopener">《JVM安全退出（如何优雅的关闭java服务）》</a><br>推荐推出方式：System.exit，Kill SIGTERM；不推荐 kill-9；用 Runtime.addShutdownHook 注册钩子。</p></li><li><a href="http://ju.outofmemory.cn/entry/337235" target="_blank" rel="noopener">《常见Java应用如何优雅关闭》</a><br>Java、Srping、Dubbo 优雅关闭方式。</li></ul><h3 id="数据库扩展"><a href="#数据库扩展" class="headerlink" title="数据库扩展"></a>数据库扩展</h3><h4 id="读写分离模式"><a href="#读写分离模式" class="headerlink" title="读写分离模式"></a>读写分离模式</h4><ul><li><a href="https://www.cnblogs.com/houdj/p/6563771.html" target="_blank" rel="noopener">《Mysql主从方案的实现》</a></li><li><a href="https://www.cnblogs.com/edisonchou/p/4133148.html" target="_blank" rel="noopener">《搭建MySQL主从复制经典架构》</a></li><li><p><a href="https://blog.csdn.net/nimasike/article/details/48048341" target="_blank" rel="noopener">《Haproxy+多台MySQL从服务器(Slave) 实现负载均衡》</a></p></li><li><p><a href="https://www.cnblogs.com/zhangsubai/p/6801764.html" target="_blank" rel="noopener">《DRBD+Heartbeat+Mysql高可用读写分离架构》</a></p><ul><li>DRDB 进行磁盘复制，避免单点问题。</li></ul></li><li><p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/62-ke-kuo-zhan-de-shu-ju-ku-jia-gou/621-gao-ke-yong-mysql-de-ji-zhong-fang-an/6214-mysql-cluster-fang-an.html" target="_blank" rel="noopener">《MySQL Cluster 方式》</a></p></li></ul><h4 id="分片模式"><a href="#分片模式" class="headerlink" title="分片模式"></a>分片模式</h4><ul><li><p><a href="https://www.jianshu.com/p/32b3e91aa22c" target="_blank" rel="noopener">《分库分表需要考虑的问题及方案》</a></p><ul><li>中间件： 轻量级：sharding-jdbc、TSharding；重量级：Atlas、MyCAT、Vitess等。</li><li>问题：事务、Join、迁移、扩容、ID、分页等。</li><li>事务补偿：对数据进行对帐检查;基于日志进行比对;定期同标准数据来源进行同步等。</li><li>分库策略：数值范围；取模；日期等。</li><li>分库数量：通常 MySQL 单库 5千万条、Oracle 单库一亿条需要分库。 </li></ul></li><li><p><a href="https://www.2cto.com/database/201503/380348.html" target="_blank" rel="noopener">《MySql分表和表分区详解》</a></p><ul><li>分区：是MySQL内部机制，对客户端透明，数据存储在不同文件中，表面上看是同一个表。</li><li>分表：物理上创建不同的表、客户端需要管理分表路由。</li></ul></li></ul><h3 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h3><h4 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h4><ul><li><a href="https://blog.csdn.net/jiaolongdy/article/details/51188798" target="_blank" rel="noopener">《永不失联！如何实现微服务架构中的服务发现？》</a><ul><li>客户端服务发现模式：客户端直接查询注册表，同时自己负责负载均衡。Eureka 采用这种方式。</li><li>服务器端服务发现模式：客户端通过负载均衡查询服务实例。</li></ul></li><li><p><a href="https://blog.csdn.net/u010963948/article/details/71730165" target="_blank" rel="noopener">《SpringCloud服务注册中心比较:Consul vs Zookeeper vs Etcd vs Eureka》</a></p><ul><li>CAP支持：Consul（CA）、zookeeper（cp）、etcd（cp） 、euerka（ap）</li><li>作者认为目前 Consul 对 Spring cloud 的支持比较好。</li></ul></li><li><p><a href="http://mobile.51cto.com/news-502394.htm" target="_blank" rel="noopener">《基于Zookeeper的服务注册与发现》</a></p><ul><li>优点：API简单、Pinterest，Airbnb 在用、多语言、通过watcher机制来实现配置PUSH，能快速响应配置变化。 </li></ul></li></ul><h4 id="服务路由控制"><a href="#服务路由控制" class="headerlink" title="服务路由控制"></a>服务路由控制</h4><ul><li><a href="https://blog.csdn.net/xundh/article/details/59492750" target="_blank" rel="noopener">《分布式服务框架学习笔记4 服务路由》</a><ul><li>原则：透明化路由</li><li>负载均衡策略：随机、轮询、服务调用延迟、一致性哈希、粘滞连接</li><li>本地路由有限策略：injvm(优先调用jvm内部的服务)，innative(优先使用相同物理机的服务),原则上找距离最近的服务。</li><li>配置方式：统一注册表；本地配置；动态下发。</li></ul></li></ul><h3 id="分布式一致"><a href="#分布式一致" class="headerlink" title="分布式一致"></a>分布式一致</h3><h4 id="CAP-与-BASE-理论"><a href="#CAP-与-BASE-理论" class="headerlink" title="CAP 与 BASE 理论"></a>CAP 与 BASE 理论</h4><ul><li><a href="http://www.cnblogs.com/szlbm/p/5588543.html" target="_blank" rel="noopener">《从分布式一致性谈到CAP理论、BASE理论》</a><ul><li>一致性分类：强一致(立即一致)；弱一致(可在单位时间内实现一致，比如秒级)；最终一致(弱一致的一种，一定时间内最终一致)</li><li>CAP：一致性、可用性、分区容错性(网络故障引起)</li><li>BASE：Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）</li><li>BASE理论的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</li></ul></li></ul><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><ul><li><a href="http://www.hollischuang.com/archives/1716" target="_blank" rel="noopener">《分布式锁的几种实现方式》</a><ul><li>基于数据库的分布式锁：优点：操作简单、容易理解。缺点：存在单点问题、数据库性能够开销较大、不可重入；</li><li>基于缓存的分布式锁：优点：非阻塞、性能好。缺点：操作不好容易造成锁无法释放的情况。</li><li>Zookeeper 分布式锁：通过有序临时节点实现锁机制，自己对应的节点需要最小，则被认为是获得了锁。优点：集群可以透明解决单点问题，避免锁不被释放问题，同时锁可以重入。缺点：性能不如缓存方式，吞吐量会随着zk集群规模变大而下降。</li></ul></li><li><p><a href="https://www.tuicool.com/articles/VZJr6fY" target="_blank" rel="noopener">《基于Zookeeper的分布式锁》</a></p><ul><li>清楚的原理描述 + Java 代码示例。 </li></ul></li><li><p><a href="https://www.cnblogs.com/0201zcr/p/5942748.html" target="_blank" rel="noopener">《jedisLock—redis分布式锁实现》</a></p><ul><li>基于 setnx(set if ont exists)，有则返回false，否则返回true。并支持过期时间。</li></ul></li><li><p><a href="https://blog.csdn.net/albertfly/article/details/77412333" target="_blank" rel="noopener">《Memcached 和 Redis 分布式锁方案》</a></p><ul><li>利用 memcached 的 add（有别于set）操作，当key存在时，返回false。</li></ul></li></ul><h4 id="分布式一致性算法"><a href="#分布式一致性算法" class="headerlink" title="分布式一致性算法"></a>分布式一致性算法</h4><h5 id="PAXOS"><a href="#PAXOS" class="headerlink" title="PAXOS"></a>PAXOS</h5><ul><li><a href="https://www.cnblogs.com/linbingdong/p/6253479.html" target="_blank" rel="noopener">《分布式系列文章——Paxos算法原理与推导》</a></li><li><a href="https://blog.csdn.net/u010039929/article/details/70171672" target="_blank" rel="noopener">《Paxos–&gt;Fast Paxos–&gt;Zookeeper分析》</a></li><li><a href="https://www.cnblogs.com/leesf456/p/6012777.html" target="_blank" rel="noopener">《【分布式】Zookeeper与Paxos》</a></li></ul><h5 id="Zab"><a href="#Zab" class="headerlink" title="Zab"></a>Zab</h5><ul><li><a href="https://www.jianshu.com/p/fb527a64deee" target="_blank" rel="noopener">《Zab：Zookeeper 中的分布式一致性协议介绍》</a></li></ul><h5 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a>Raft</h5><ul><li><a href="http://www.cnblogs.com/mindwind/p/5231986.html" target="_blank" rel="noopener">《Raft 为什么是更易理解的分布式一致性算法》</a><ul><li>三种角色：Leader（领袖）、Follower（群众）、Candidate（候选人）</li><li>通过随机等待的方式发出投票，得票多的获胜。</li></ul></li></ul><h5 id="Gossip"><a href="#Gossip" class="headerlink" title="Gossip"></a>Gossip</h5><ul><li><a href="http://blog.51cto.com/tianya23/530743" target="_blank" rel="noopener">《Gossip算法》</a></li></ul><h5 id="两阶段提交、多阶段提交"><a href="#两阶段提交、多阶段提交" class="headerlink" title="两阶段提交、多阶段提交"></a>两阶段提交、多阶段提交</h5><ul><li><a href="http://blog.jobbole.com/95632/" target="_blank" rel="noopener">《关于分布式事务、两阶段提交协议、三阶提交协议》</a></li></ul><h4 id="幂等"><a href="#幂等" class="headerlink" title="幂等"></a>幂等</h4><ul><li><a href="https://www.cnblogs.com/wxgblogs/p/6639272.html" target="_blank" rel="noopener">《分布式系统—幂等性设计》</a><ul><li>幂等特性的作用：该资源具备幂等性，请求方无需担心重复调用会产生错误。</li><li>常见保证幂等的手段：MVCC（类似于乐观锁）、去重表(唯一索引)、悲观锁、一次性token、序列号方式。 </li></ul></li></ul><h4 id="分布式一致方案"><a href="#分布式一致方案" class="headerlink" title="分布式一致方案"></a>分布式一致方案</h4><ul><li><a href="http://www.infoq.com/cn/articles/solution-of-distributed-system-transaction-consistency" target="_blank" rel="noopener">《分布式系统事务一致性解决方案》</a></li><li><a href="https://weibo.com/ttarticle/p/show?id=2309403965965003062676" target="_blank" rel="noopener">《保证分布式系统数据一致性的6种方案》</a></li></ul><h4 id="分布式-Leader-节点选举"><a href="#分布式-Leader-节点选举" class="headerlink" title="分布式 Leader 节点选举"></a>分布式 Leader 节点选举</h4><ul><li><a href="https://blog.csdn.net/johnson_moon/article/details/78809995" target="_blank" rel="noopener">《利用zookeeper实现分布式leader节点选举》</a></li></ul><h4 id="TCC-Try-Confirm-Cancel-柔性事务"><a href="#TCC-Try-Confirm-Cancel-柔性事务" class="headerlink" title="TCC(Try/Confirm/Cancel) 柔性事务"></a>TCC(Try/Confirm/Cancel) 柔性事务</h4><ul><li><a href="https://www.jianshu.com/p/ab1a1c6b08a1" target="_blank" rel="noopener">《传统事务与柔性事务》</a><ul><li>基于BASE理论：基本可用、柔性状态、最终一致。</li><li>解决方案：记录日志+补偿（正向补充或者回滚）、消息重试(要求程序要幂等)；“无锁设计”、采用乐观锁机制。</li></ul></li></ul><h3 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/27666295" target="_blank" rel="noopener">说说分布式文件存储系统-基本架构</a> ？</li><li><a href="https://blog.csdn.net/gatieme/article/details/44982961" target="_blank" rel="noopener">《各种分布式文件系统的比较》</a> ？<ul><li>HDFS：大批量数据读写，用于高吞吐量的场景，不适合小文件。</li><li>FastDFS：轻量级、适合小文件。</li></ul></li></ul><h3 id="唯一ID-生成"><a href="#唯一ID-生成" class="headerlink" title="唯一ID 生成"></a>唯一ID 生成</h3><h4 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h4><ul><li><p><a href="https://www.cnblogs.com/baiwa/p/5318432.html" target="_blank" rel="noopener">《高并发分布式系统中生成全局唯一Id汇总》</a></p><ul><li>Twitter 方案（Snowflake 算法）：41位时间戳+10位机器标识（比如IP，服务器名称等）+12位序列号(本地计数器)</li><li>Flicker 方案：MySQL自增ID + “REPLACE INTO XXX:SELECT LAST_INSERT_ID();” </li><li>UUID：缺点，无序，字符串过长，占用空间，影响检索性能。</li><li>MongoDB 方案：利用 ObjectId。缺点：不能自增。</li></ul></li><li><p><a href="https://blog.csdn.net/hdu09075340/article/details/79103851" target="_blank" rel="noopener">《TDDL 在分布式下的SEQUENCE原理》</a></p><ul><li>在数据库中创建 sequence 表，用于记录，当前已被占用的id最大值。</li><li>每台客户端主机取一个id区间（比如 1000~2000）缓存在本地，并更新 sequence 表中的id最大值记录。</li><li>客户端主机之间取不同的id区间，用完再取，使用乐观锁机制控制并发。</li></ul></li></ul><h3 id="一致性Hash算法"><a href="#一致性Hash算法" class="headerlink" title="一致性Hash算法"></a>一致性Hash算法</h3><ul><li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/631-yi-zhi-xing-ha-xi.html" target="_blank" rel="noopener">《一致性哈希算法》</a></li></ul><h2 id="设计思想-amp-开发模式"><a href="#设计思想-amp-开发模式" class="headerlink" title="设计思想 &amp; 开发模式"></a>设计思想 &amp; 开发模式</h2><h3 id="DDD-Domain-driven-Design-领域驱动设计"><a href="#DDD-Domain-driven-Design-领域驱动设计" class="headerlink" title="DDD(Domain-driven Design - 领域驱动设计)"></a>DDD(Domain-driven Design - 领域驱动设计)</h3><ul><li><p><a href="https://www.cnblogs.com/netfocus/p/5548025.html" target="_blank" rel="noopener">《浅谈我对DDD领域驱动设计的理解》</a></p><ul><li>概念：DDD 主要对传统软件开发流程(分析-设计-编码)中各阶段的割裂问题而提出，避免由于一开始分析不明或在软件开发过程中的信息流转不一致而造成软件无法交付（和需求方设想不一致）的问题。DDD 强调一切以领域（Domain）为中心，强调领域专家（Domain Expert）的作用，强调先定义好领域模型之后在进行开发，并且领域模型可以指导开发（所谓的驱动）。</li><li>过程：理解领域、拆分领域、细化领域，模型的准确性取决于模型的理解深度。</li><li>设计：DDD 中提出了建模工具，比如聚合、实体、值对象、工厂、仓储、领域服务、领域事件来帮助领域建模。</li></ul></li><li><p><a href="https://www.cnblogs.com/butterfly100/p/7827870.html" target="_blank" rel="noopener">《领域驱动设计的基础知识总结》</a></p><ul><li>领域（Doamin）本质上就是问题域，比如一个电商系统，一个论坛系统等。</li><li>界限上下文（Bounded Context）：阐述子域之间的关系，可以简单理解成一个子系统或组件模块。</li><li>领域模型（Domain Model）：DDD的核心是建立（用通用描述语言、工具—领域通用语言）正确的领域模型；反应业务需求的本质，包括实体和过程；其贯穿软件分析、设计、开发 的整个过程；常用表达领域模型的方式：图、代码或文字；</li><li>领域通用语言：领域专家、开发设计人员都能立即的语言或工具。</li><li>经典分层架构：用户界面/展示层、应用层、领域层、基础设施层，是四层架构模式。</li><li>使用的模式：<ul><li>关联尽量少，尽量单项，尽量降低整体复杂度。</li><li>实体（Entity）：领域中的唯一标示，一个实体的属性尽量少，少则清晰。</li><li>值对象（Value Object）：没有唯一标识，且属性值不可变，小二简单的对象，比如Date。</li><li>领域服务（Domain Service）： 协调多个领域对象，只有方法没有状态(不存数据)；可以分为应用层服务，领域层服务、基础层服务。</li><li>聚合及聚合根（Aggregate，Aggregate Root）：聚合定义了一组具有内聚关系的相关对象的集合；聚合根是对聚合引用的唯一元素；当修改一个聚合时，必须在事务级别；大部分领域模型中，有70%的聚合通常只有一个实体，30%只有2~3个实体；如果一个聚合只有一个实体，那么这个实体就是聚合根；如果有多个实体，那么我们可以思考聚合内哪个对象有独立存在的意义并且可以和外部直接进行交互；</li><li>工厂（Factory）：类似于设计模式中的工厂模式。</li><li>仓储（Repository）：持久化到DB，管理对象，且只对聚合设计仓储。</li></ul></li></ul></li><li><p><a href="http://www.cnblogs.com/Leo_wl/p/3866629.html" target="_blank" rel="noopener">《领域驱动设计(DDD)实现之路》</a></p><ul><li>聚合：比如一辆汽车（Car）包含了引擎（Engine）、车轮（Wheel）和油箱（Tank）等组件，缺一不可。</li></ul></li><li><p><a href="http://www.hollischuang.com/archives/553" target="_blank" rel="noopener">《领域驱动设计系列（2）浅析VO、DTO、DO、PO的概念、区别和用处》</a></p></li></ul><h4 id="命令查询职责分离-CQRS"><a href="#命令查询职责分离-CQRS" class="headerlink" title="命令查询职责分离(CQRS)"></a>命令查询职责分离(CQRS)</h4><p>CQRS — Command Query Responsibility Seperation</p><ul><li><p><a href="https://www.cnblogs.com/cnblogsfans/p/4551990.html" target="_blank" rel="noopener">《领域驱动设计系列 (六)：CQRS》</a></p><ul><li>核心思想：读写分离（查询和更新在不同的方法中），不同的流程只是不同的设计方式，CQ代码分离，分布式环境中会有明显体现（有冗余数据的情况下），目的是为了高性能。</li></ul></li><li><p><a href="http://www.techweb.com.cn/network/system/2017-07-07/2553563.shtml" target="_blank" rel="noopener">《DDD CQRS架构和传统架构的优缺点比较》</a></p><ul><li>最终一致的设计理念；依赖于高可用消息中间件。</li></ul></li><li><p><a href="http://www.cnblogs.com/netfocus/p/4055346.html" target="_blank" rel="noopener">《CQRS架构简介》</a></p><ul><li>一个实现 CQRS 的抽象案例。</li></ul></li><li><p><a href="http://www.uml.org.cn/zjjs/201609221.asp" target="_blank" rel="noopener">《深度长文：我对CQRS/EventSourcing架构的思考》</a></p><ul><li>CQRS 模式分析 + 12306 抢票案例</li></ul></li></ul><h4 id="贫血，充血模型"><a href="#贫血，充血模型" class="headerlink" title="贫血，充血模型"></a>贫血，充血模型</h4><ul><li><a href="https://kb.cnblogs.com/page/520743/" target="_blank" rel="noopener">《贫血，充血模型的解释以及一些经验》</a><ul><li>失血模型：老子和儿子分别定义，相互不知道，二者实体定义中完全没有业务逻辑，通过外部Service进行关联。</li><li>贫血模型：老子知道儿子，儿子也知道老子；部分业务逻辑放到实体中；优点：各层单项依赖，结构清楚，易于维护；缺点：不符合OO思想，相比于充血模式，Service层较为厚重；</li><li>充血模型：和贫血模型类似，区别在于如何划分业务逻辑。优点：Service层比较薄，只充当Facade的角色，不和DAO打交道、复合OO思想；缺点：非单项依赖，DO和DAO之间双向依赖、和Service层的逻辑划分容易造成混乱。</li><li>肿胀模式：是一种极端情况，取消Service层、全部业务逻辑放在DO中；优点：符合OO思想、简化了分层；缺点：暴露信息过多、很多非DO逻辑也会强行并入DO。这种模式应该避免。</li><li>作者主张使用贫血模式。</li></ul></li></ul><h3 id="Actor-模式"><a href="#Actor-模式" class="headerlink" title="Actor 模式"></a>Actor 模式</h3><p>TODO</p><h3 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h3><h4 id="Reactor"><a href="#Reactor" class="headerlink" title="Reactor"></a>Reactor</h4><p>TODO</p><h4 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h4><p>TODO</p><h4 id="Vert-x"><a href="#Vert-x" class="headerlink" title="Vert.x"></a>Vert.x</h4><p>TODO</p><h3 id="DODAF2-0"><a href="#DODAF2-0" class="headerlink" title="DODAF2.0"></a>DODAF2.0</h3><ul><li><a href="http://www.360doc.com/content/16/0627/19/33945750_571201779.shtml" target="_blank" rel="noopener">《DODAF2.0方法论》</a></li><li><a href="http://blog.51cto.com/xiaoyong/1553164" target="_blank" rel="noopener">《DODAF2.0之能力视角如何落地》</a></li></ul><h2 id="Serverless"><a href="#Serverless" class="headerlink" title="Serverless"></a>Serverless</h2><p>无需过多关系服务器的服务架构理念。</p><ul><li><p><a href="http://www.jdon.com/soa/serverless.html" target="_blank" rel="noopener">《什么是Serverless无服务器架构？》</a></p><ul><li>Serverless 不代表出去服务器，而是去除对服务器运行状态的关心。</li><li>Serverless 代表一思维方式的转变，从“构建一套服务在一台服务器上，对对个事件进行响应转变为构建一个为服务器，来响应一个事件”。</li><li>Serverless 不代表某个具体的框架。</li></ul></li><li><p><a href="http://www.infoq.com/cn/news/2017/10/how-to-understand-serverless" target="_blank" rel="noopener">《如何理解Serverless？》</a></p><ul><li>依赖于 Baas （(Mobile) Backend as a Service） 和 Faas （Functions as a service）</li></ul></li></ul><h3 id="Service-Mesh"><a href="#Service-Mesh" class="headerlink" title="Service Mesh"></a>Service Mesh</h3><ul><li><a href="https://time.geekbang.org/article/2355" target="_blank" rel="noopener">《什么是Service Mesh？》</a></li><li><p><a href="https://www.jianshu.com/p/e23e3e74538e" target="_blank" rel="noopener">《初识 Service Mesh》</a></p></li><li><p><a href="https://time.geekbang.org/article/2355" target="_blank" rel="noopener">《什么是Service Mesh？》</a></p></li></ul><h2 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h2><h3 id="架构评审"><a href="#架构评审" class="headerlink" title="架构评审"></a>架构评审</h3><ul><li><a href="http://developer.51cto.com/art/201506/478486.htm" target="_blank" rel="noopener">《架构设计之如何评审架构设计说明书》</a></li><li><a href="https://blog.csdn.net/wireless_com/article/details/45935591" target="_blank" rel="noopener">《人人都是架构师：非功能性需求》</a></li></ul><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><ul><li><a href="http://www.infoq.com/cn/articles/architect-12-rules-complete/" target="_blank" rel="noopener">《架构之重构的12条军规》</a></li></ul><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ul><li><a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener">《阿里巴巴Java开发手册》</a></li></ul><h3 id="代码-Review"><a href="#代码-Review" class="headerlink" title="代码 Review"></a>代码 Review</h3><p>制度还是制度!<br>另外，每个公司需要根据自己的需求和目标制定自己的 check list</p><ul><li><p><a href="http://www.sohu.com/a/229745352_181657" target="_blank" rel="noopener">《为什么你做不好 Code Review？》</a></p><ul><li>代码 review 做的好，在于制度建设。</li></ul></li><li><p><a href="https://blog.csdn.net/uxyheaven/article/details/49773619" target="_blank" rel="noopener">《从零开始Code Review》</a></p></li><li><p><a href="https://www.cnblogs.com/zuoping/p/5477047.html" target="_blank" rel="noopener">《Code Review Checklist》</a></p></li><li><p><a href="https://dzone.com/articles/java-code-review-checklist" target="_blank" rel="noopener">《Java Code Review Checklist》</a></p></li><li><p><a href="https://blog.csdn.net/legend0011/article/details/45585575" target="_blank" rel="noopener">《如何用 gitlab 做 code review》</a></p></li></ul><h3 id="RUP"><a href="#RUP" class="headerlink" title="RUP"></a>RUP</h3><ul><li><a href="https://blog.csdn.net/apanious/article/details/51011946" target="_blank" rel="noopener">《运用RUP 4+1视图方法进行软件架构设计》</a></li></ul><h3 id="看板管理"><a href="#看板管理" class="headerlink" title="看板管理"></a>看板管理</h3><ul><li><a href="https://blog.csdn.net/tkchen/article/details/51637643" target="_blank" rel="noopener">《说说看板在项目中的应用》</a></li></ul><h3 id="SCRUM"><a href="#SCRUM" class="headerlink" title="SCRUM"></a>SCRUM</h3><p>SCRUM - 争球</p><ul><li>3个角色:Product Owner(PO) 产品负责人;Scrum Master（SM），推动Scrum执行;Team 开发团队。</li><li>3个工件：Product Backlog 产品TODOLIST，含优先级;Sprint Backlog 功能开发 TODO LIST；燃尽图；</li><li>五个价值观：专注、勇气、公开、承诺、尊重。</li></ul><ul><li><p><a href="https://blog.csdn.net/inny100_100/article/details/54633757" target="_blank" rel="noopener">《敏捷项目管理流程-Scrum框架最全总结！》</a></p></li><li><p><a href="https://blog.csdn.net/superkunkun/article/details/52951142" target="_blank" rel="noopener">《敏捷其实很简单3—敏捷方法之scrum》</a></p></li></ul><h3 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h3><p>TODO</p><h2 id="极限编程（XP）"><a href="#极限编程（XP）" class="headerlink" title="极限编程（XP）"></a>极限编程（XP）</h2><p>XP - eXtreme Programming</p><ul><li><p><a href="http://www.woshipm.com/pmd/406917.html" target="_blank" rel="noopener">《主流敏捷开发方法：极限编程XP》</a></p><ul><li>是一种指导开发人员的方法论。</li><li><p>4大价值：</p><ul><li>沟通：鼓励口头沟通，提高效率。</li><li>简单：够用就好。</li><li>反馈：及时反馈、通知相关人。</li><li>勇气：提倡拥抱变化，敢于重构。</li></ul></li><li><p>5个原则：快速反馈、简单性假设、逐步修改、提倡更改（小步快跑）、优质工作（保证质量的前提下保证小步快跑）。</p></li><li>5个工作：阶段性冲刺；冲刺计划会议；每日站立会议；冲刺后review；回顾会议。</li></ul></li></ul><h3 id="结对编程"><a href="#结对编程" class="headerlink" title="结对编程"></a>结对编程</h3><p>边写码，边review。能够增强代码质量、减少bug。</p><ul><li><a href="http://www.baike.com/wiki/%E7%BB%93%E5%AF%B9%E7%BC%96%E7%A8%8B" target="_blank" rel="noopener">《结对编程》</a></li></ul><h3 id="PDCA-循环质量管理"><a href="#PDCA-循环质量管理" class="headerlink" title="PDCA 循环质量管理"></a>PDCA 循环质量管理</h3><p>P——PLAN 策划，D——DO 实施，C——CHECK 检查，A——ACT 改进</p><ul><li><a href="http://www.baike.com/wiki/PDCA" target="_blank" rel="noopener">《PDCA》</a></li></ul><h3 id="FMEA管理模式"><a href="#FMEA管理模式" class="headerlink" title="FMEA管理模式"></a>FMEA管理模式</h3><p>TODO</p><h2 id="通用业务术语"><a href="#通用业务术语" class="headerlink" title="通用业务术语"></a>通用业务术语</h2><p>TODO</p><h2 id="技术趋势"><a href="#技术趋势" class="headerlink" title="技术趋势"></a>技术趋势</h2><p>TODO</p><h2 id="政策、法规"><a href="#政策、法规" class="headerlink" title="政策、法规"></a>政策、法规</h2><p>TODO</p><h3 id="法律"><a href="#法律" class="headerlink" title="法律"></a>法律</h3><h4 id="严格遵守刑法253法条"><a href="#严格遵守刑法253法条" class="headerlink" title="严格遵守刑法253法条"></a>严格遵守刑法253法条</h4><p>我国刑法第253条之一规定：</p><blockquote><ul><li>国家机关或者金融、电信、交通、教育、医疗等单位的工作人员，违反国家规定，将本单位在履行职责或者提供服务过程中获得的公民个人信息，出售或者非法提供给他人，情节严重的，处3年以下有期徒刑或者拘役，并处或者单处罚金。</li><li>窃取或者以其他方法非法获取上述信息，情节严重的，依照前款的规定处罚。 </li><li>单位犯前两款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照各该款的规定处罚。</li></ul></blockquote><p>最高人民法院、最高人民检察院关于执行《中华人民共和国刑法》确定罪名的补充规定（四）规定：触犯刑法第253条之一第1款之规定，构成“出售、非法提供公民个人信息罪”；触犯刑法第253条之一第2款之规定，构成“非法获取公民个人信息罪”</p><ul><li><a href="https://baike.baidu.com/item/%E9%9D%9E%E6%B3%95%E8%8E%B7%E5%8F%96%E5%85%AC%E6%B0%91%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%BD%AA" target="_blank" rel="noopener">《非法获取公民个人信息罪》</a></li></ul><h2 id="架构师素质"><a href="#架构师素质" class="headerlink" title="架构师素质"></a>架构师素质</h2><ul><li><p><a href="http://hellojava.info/?p=430" target="_blank" rel="noopener">《架构师画像》</a></p><ul><li>业务理解和抽象能力</li><li>NB的代码能力</li><li>全面：1. 在面对业务问题上，架构师脑海里是否会浮现出多种技术方案；2. 在做系统设计时是否考虑到了足够多的方方面面；3. 在做系统设计时是否考虑到了足够多的方方面面； </li><li>全局：是否考虑到了对上下游的系统的影响。</li><li>权衡：权衡投入产出比；优先级和节奏控制；</li></ul></li><li><p><a href="http://www.infoq.com/cn/articles/architecture-optimization-and-design-the-architect-must-know" target="_blank" rel="noopener">《关于架构优化和设计，架构师必须知道的事情》</a></p><ul><li>要去考虑的细节：模块化、轻耦合、无共享架构；减少各个组件之前的依赖、注意服务之间依赖所有造成的链式失败及影响等。</li><li>基础设施、配置、测试、开发、运维综合考虑。</li><li>考虑人、团队、和组织的影响。 </li></ul></li><li><p><a href="https://www.zhihu.com/question/19841397" target="_blank" rel="noopener">《如何才能真正的提高自己，成为一名出色的架构师？》</a> </p></li><li><p><a href="https://blog.csdn.net/sanbingyutuoniao123/article/details/54144129" target="_blank" rel="noopener">《架构师的必备素质和成长途径》</a></p><ul><li>素质：业务理解、技术广度、技术深度、丰富经验、沟通能力、动手能力、美学素养。</li><li>成长路径：2年积累知识、4年积累技能和组内影响力、7年积累部门内影响力、7年以上积累跨部门影响力。 </li></ul></li><li><p><a href="http://blog.51cto.com/frankfan/1248401" target="_blank" rel="noopener">《架构设计师—你在哪层楼？》</a></p><ul><li>第一层的架构师看到的只是产品本身</li><li>第二层的架构师不仅看到自己的产品，还看到了整体的方案</li><li>第三层的架构师看到的是商业价值 </li></ul></li></ul><h2 id="团队管理"><a href="#团队管理" class="headerlink" title="团队管理"></a>团队管理</h2><p>TODO</p><h3 id="招聘"><a href="#招聘" class="headerlink" title="招聘"></a>招聘</h3><h2 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h2><h3 id="行业资讯"><a href="#行业资讯" class="headerlink" title="行业资讯"></a>行业资讯</h3><ul><li><a href="http://36kr.com/" target="_blank" rel="noopener">36kr</a></li><li><a href="http://www.techweb.com.cn/" target="_blank" rel="noopener">Techweb</a></li></ul><h3 id="公众号列表"><a href="#公众号列表" class="headerlink" title="公众号列表"></a>公众号列表</h3><p>TODO</p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><h4 id="团队博客"><a href="#团队博客" class="headerlink" title="团队博客"></a>团队博客</h4><ul><li><a href="http://jm.taobao.org/" target="_blank" rel="noopener">阿里中间件博客</a></li><li><a href="https://tech.meituan.com" target="_blank" rel="noopener">美团点评技术团队博客</a></li></ul><h4 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h4><ul><li><a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰的网络日志</a></li><li><a href="https://coolshell.cn/" target="_blank" rel="noopener">酷壳 - COOLSHELL-陈皓</a></li><li><a href="http://hellojava.info/" target="_blank" rel="noopener">hellojava-阿里毕玄</a></li><li><a href="http://cmsblogs.com/" target="_blank" rel="noopener">Cm’s Blog</a></li><li><a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD-翟永超-《Spring Cloud微服务实战》作者</a></li></ul><h3 id="综合门户、社区"><a href="#综合门户、社区" class="headerlink" title="综合门户、社区"></a>综合门户、社区</h3><p><strong>国内：</strong></p><ul><li><a href="http://csdn.net" target="_blank" rel="noopener">CSDN</a><br>   老牌技术社区、不必解释。</li><li><a href="http://www.51cto.com/" target="_blank" rel="noopener">51cto.com</a></li><li><a href="http://www.iteye.com/" target="_blank" rel="noopener">ITeye</a><ul><li>偏 Java 方向 </li></ul></li><li><a href="https://www.cnblogs.com" target="_blank" rel="noopener">博客园</a></li><li><a href="http://www.tom.net/" target="_blank" rel="noopener">ChinaUnix</a><ul><li>偏 Linux 方向 </li></ul></li><li><a href="https://www.oschina.net/" target="_blank" rel="noopener">开源中国社区</a></li><li><a href="http://www.open-open.com/" target="_blank" rel="noopener">深度开源</a></li><li><p><a href="http://www.jobbole.com/" target="_blank" rel="noopener">伯乐在线</a></p><ul><li>涵盖 IT职场、Web前端、后端、移动端、数据库等方面内容，偏技术端。</li></ul></li><li><p><a href="http://www.itpub.net/" target="_blank" rel="noopener">ITPUB</a></p></li><li><a href="https://cloud.tencent.com/developer/column" target="_blank" rel="noopener">腾讯云— 云+社区</a></li><li><a href="https://yq.aliyun.com/" target="_blank" rel="noopener">阿里云— 云栖社区</a></li><li><a href="https://www.ibm.com/developerworks/cn/" target="_blank" rel="noopener">IBM DeveloperWorks</a></li><li><a href="https://toutiao.io/" target="_blank" rel="noopener">开发者头条</a></li><li><a href="http://www.linkedkeeper.com" target="_blank" rel="noopener">LinkedKeeper</a></li></ul><p><strong>国外：</strong></p><ul><li><a href="https://dzone.com" target="_blank" rel="noopener">DZone</a></li><li><a href="https://www.reddit.com" target="_blank" rel="noopener">Reddit</a></li></ul><h3 id="问答、讨论类社区"><a href="#问答、讨论类社区" class="headerlink" title="问答、讨论类社区"></a>问答、讨论类社区</h3><ul><li><a href="https://segmentfault.com" target="_blank" rel="noopener">segmentfault</a><ul><li>问答+专栏 </li></ul></li><li><a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a></li><li><a href="https://stackoverflow.com/" target="_blank" rel="noopener">stackoverflow</a></li></ul><h3 id="行业数据分析"><a href="#行业数据分析" class="headerlink" title="行业数据分析"></a>行业数据分析</h3><ul><li><a href="http://report.iresearch.cn/" target="_blank" rel="noopener">艾瑞网</a></li><li><p><a href="https://www.questmobile.com.cn" target="_blank" rel="noopener">QUEST MOBILE</a></p></li><li><p><a href="http://data.stats.gov.cn/" target="_blank" rel="noopener">国家数据</a></p></li><li><p><a href="http://www.talkingdata.com/" target="_blank" rel="noopener">TalkingData</a></p></li></ul><h3 id="专项网站"><a href="#专项网站" class="headerlink" title="专项网站"></a>专项网站</h3><ul><li><p>测试:</p><ul><li><a href="http://www.ltesting.net/" target="_blank" rel="noopener">领测国际</a> </li><li><a href="https://www.testwo.com/" target="_blank" rel="noopener">测试窝</a></li><li><a href="https://testerhome.com" target="_blank" rel="noopener">TesterHome</a></li></ul></li><li><p>运维:</p><pre><code>* [运维派](http://www.yunweipai.com/) * [Abcdocker](https://www.abcdocker.com/)</code></pre></li><li><p>Java:</p><ul><li><a href="http://www.importnew.com/" target="_blank" rel="noopener">ImportNew</a><ul><li>专注于 Java 技术分享</li></ul></li><li><a href="https://howtodoinjava.com/" target="_blank" rel="noopener">HowToDoInJava</a><ul><li>英文博客</li></ul></li></ul></li><li><p>安全</p><ul><li><a href="https://www.2cto.com/" target="_blank" rel="noopener">红黑联盟</a> </li><li><a href="http://www.freebuf.com/" target="_blank" rel="noopener">FreeBuf</a></li></ul></li><li><p>大数据</p><ul><li><a href="http://www.thebigdata.cn/" target="_blank" rel="noopener">中国大数据</a> </li></ul></li><li><p>其他专题网站：</p><ul><li><a href="http://www.dockerinfo.net/" target="_blank" rel="noopener">DockerInfo</a><ul><li>专注于 Docker 应用及咨询、教程的网站。</li></ul></li><li><a href="https://www.linuxidc.com/" target="_blank" rel="noopener">Linux公社</a><ul><li>Linux 主题社区</li></ul></li></ul></li></ul><h3 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h3><ul><li><a href="https://github.com/TeamStuQ/skill-map" target="_blank" rel="noopener">程序员技能图谱</a></li></ul><h3 id="推荐参考书"><a href="#推荐参考书" class="headerlink" title="推荐参考书"></a>推荐参考书</h3><h4 id="在线电子书"><a href="#在线电子书" class="headerlink" title="在线电子书"></a>在线电子书</h4><ul><li><a href="https://github.com/forezp/SpringCloudLearning" target="_blank" rel="noopener">《深入理解Spring Cloud与微服务构建》</a></li></ul><ul><li><a href="http://techforum-img.cn-hangzhou.oss-pub.aliyun-inc.com/1523849261680/AliTech101_RD.pdf" target="_blank" rel="noopener">《阿里技术参考图册-研发篇》</a></li><li><p><a href="http://techforum-img.cn-hangzhou.oss-pub.aliyun-inc.com/1523848064814/AliTech101_Algorithms.pdf" target="_blank" rel="noopener">《阿里技术参考图册-算法篇》</a></p></li><li><p><a href="http://dpurl.cn/n/1lqcX" target="_blank" rel="noopener">《2018美团点评技术年货（合辑）》70M</a></p></li><li><p><a href="http://www.infoq.com/cn/architect/" target="_blank" rel="noopener">InfoQ《架构师》月刊</a></p></li><li><p><a href="https://www.w3cschool.cn/architectroad/" target="_blank" rel="noopener">《架构师之路》</a></p></li></ul><h4 id="纸质书"><a href="#纸质书" class="headerlink" title="纸质书"></a>纸质书</h4><h5 id="开发方面"><a href="#开发方面" class="headerlink" title="开发方面"></a>开发方面</h5><ul><li>《阿里巴巴Java开发手册》<a href="https://union-click.jd.com/jdc?d=bVKwZQ" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=阿里巴巴Java开发手册" target="_blank" rel="noopener">淘宝</a></li></ul><h5 id="架构方面"><a href="#架构方面" class="headerlink" title="架构方面"></a>架构方面</h5><ul><li>《软件架构师的12项修炼：技术技能篇》<a href="https://union-click.jd.com/jdc?d=gXvRd8" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=软件架构师的12项修炼：技术技能篇" target="_blank" rel="noopener">淘宝</a></li><li>《架构之美》<a href="https://union-click.jd.com/jdc?d=xJit5I" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=架构之美" target="_blank" rel="noopener">淘宝</a></li><li>《分布式服务架构》<a href="https://union-click.jd.com/jdc?d=JS5Od9" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=分布式服务架构" target="_blank" rel="noopener">淘宝</a></li><li>《聊聊架构》 <a href="https://union-click.jd.com/jdc?d=FHooH4" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=聊聊架构" target="_blank" rel="noopener">淘宝</a></li><li>《云原生应用架构实践》<a href="https://union-click.jd.com/jdc?d=orkJSj" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=云原生应用架构实践" target="_blank" rel="noopener">淘宝</a></li><li>《亿级流量网站架构核心技术》<a href="https://union-click.jd.com/jdc?d=RnOSP5" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=亿级流量网站架构核心技术" target="_blank" rel="noopener">淘宝</a></li><li>《淘宝技术这十年》<a href="https://union-click.jd.com/jdc?d=LwrDfD" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=淘宝技术这十年" target="_blank" rel="noopener">淘宝</a></li><li><p>《企业IT架构转型之道-中台战略思想与架构实战》 <a href="https://union-click.jd.com/jdc?d=89pAEm" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=企业IT架构转型之道" target="_blank" rel="noopener">淘宝</a></p></li><li><p>《高可用架构（第1卷）》<a href="https://item.jd.com/12195481.html" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=高可用架构" target="_blank" rel="noopener">淘宝</a></p></li></ul><h5 id="技术管理方面"><a href="#技术管理方面" class="headerlink" title="技术管理方面"></a>技术管理方面</h5><ul><li>《CTO说》<a href="https://union-click.jd.com/jdc?d=zhTZyr" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=CTO说" target="_blank" rel="noopener">淘宝</a></li><li>《技术管理之巅》<a href="https://union-click.jd.com/jdc?d=LgRBUW" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=技术管理之巅" target="_blank" rel="noopener">淘宝</a></li><li>《网易一千零一夜：互联网产品项目管理实战》<a href="https://union-click.jd.com/jdc?d=jcRz2r" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=网易一千零一夜：互联网产品项目管理实战" target="_blank" rel="noopener">淘宝</a></li></ul><h5 id="基础理论-1"><a href="#基础理论-1" class="headerlink" title="基础理论"></a>基础理论</h5><ul><li>《数学之美》<a href="https://union-click.jd.com/jdc?d=ghIES2" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=数学之美" target="_blank" rel="noopener">淘宝</a></li><li>《编程珠玑》<a href="https://union-click.jd.com/jdc?d=YmhdEu" target="_blank" rel="noopener">京东</a> <a href="https://s.taobao.com/search?q=编程珠玑" target="_blank" rel="noopener">淘宝</a></li></ul><h5 id="工具方面"><a href="#工具方面" class="headerlink" title="工具方面"></a>工具方面</h5><p>TODO</p><h5 id="大数据方面"><a href="#大数据方面" class="headerlink" title="大数据方面"></a>大数据方面</h5><h1 id="技术资源"><a href="#技术资源" class="headerlink" title="技术资源"></a>技术资源</h1><h3 id="开源资源"><a href="#开源资源" class="headerlink" title="开源资源"></a>开源资源</h3><ul><li><p><a href="https://github.com" target="_blank" rel="noopener">github</a></p></li><li><p><a href="https://www.apache.org/index.html" target="_blank" rel="noopener">Apache 软件基金会</a></p></li></ul><h3 id="手册、文档、教程"><a href="#手册、文档、教程" class="headerlink" title="手册、文档、教程"></a>手册、文档、教程</h3><p><strong>国内：</strong></p><ul><li><a href="http://w3cschool.cn" target="_blank" rel="noopener">W3Cschool</a> </li><li><p><a href="http://www.runoob.com/" target="_blank" rel="noopener">Runoob.com</a></p><ul><li>HTML 、 CSS、XML、Java、Python、PHP、设计模式等入门手册。</li></ul></li><li><p><a href="https://love2.io/" target="_blank" rel="noopener">Love2.io</a></p><ul><li>很多很多中文在线电子书，是一个全新的开源技术文档分享平台。</li></ul></li><li><a href="http://gitbook.cn/" target="_blank" rel="noopener">gitbook.cn</a><ul><li>付费电子书。 </li></ul></li><li><a href="http://www.apachecn.org/" target="_blank" rel="noopener">ApacheCN</a><ul><li>AI、大数据方面系列中文文档。</li></ul></li></ul><p><strong>国外：</strong></p><ul><li><a href="http://www.quickcode.co/" target="_blank" rel="noopener">Quick Code</a><ul><li>免费在线技术教程。</li></ul></li><li><a href="http://gitbook.com" target="_blank" rel="noopener">gitbook.com</a><ul><li>有部分中文电子书。</li></ul></li><li><a href="https://www.cheatography.com/" target="_blank" rel="noopener">Cheatography</a><ul><li>Cheat Sheets 大全，单页文档网站。</li></ul></li><li><a href="https://www.tutorialspoint.com/index.htm" target="_blank" rel="noopener">Tutorialspoint</a><ul><li>知名教程网站，提供Java、Python、JS、SQL、大数据等高质量入门教程。</li></ul></li></ul><h3 id="在线课堂"><a href="#在线课堂" class="headerlink" title="在线课堂"></a>在线课堂</h3><ul><li><a href="http://www.xuetuwuyou.com/" target="_blank" rel="noopener">学徒无忧</a></li><li><a href="https://time.geekbang.org/" target="_blank" rel="noopener">极客时间</a></li><li><a href="https://segmentfault.com/lives" target="_blank" rel="noopener">segmentfault</a></li><li><a href="https://new.stuq.org/course/explore" target="_blank" rel="noopener">斯达克学院</a></li><li><a href="http://nowcoder.com" target="_blank" rel="noopener">牛客网</a></li><li><a href="https://www.jikexueyuan.com/" target="_blank" rel="noopener">极客学院</a></li><li><a href="http://edu.51cto.com/" target="_blank" rel="noopener">51CTO学院</a></li></ul><h3 id="会议、活动"><a href="#会议、活动" class="headerlink" title="会议、活动"></a>会议、活动</h3><ul><li><a href="http://www.infoq.com/cn/qcon/" target="_blank" rel="noopener">QCon</a></li><li><a href="https://archsummit.com" target="_blank" rel="noopener">ArchSummit</a></li><li><a href="http://www.thegitc.com/" target="_blank" rel="noopener">GITC全球互联网技术大会</a></li></ul><p><strong>活动发布平台:</strong> </p><ul><li><a href="http://www.huodongxing.com/" target="_blank" rel="noopener">活动行</a></li></ul><h3 id="常用APP"><a href="#常用APP" class="headerlink" title="常用APP"></a>常用APP</h3><ul><li><a href="https://time.geekbang.org" target="_blank" rel="noopener">极客时间</a></li><li><a href="https://www.igetget.com" target="_blank" rel="noopener">得到</a></li></ul><h3 id="找工作"><a href="#找工作" class="headerlink" title="找工作"></a>找工作</h3><ul><li><a href="https://www.zhipin.com" target="_blank" rel="noopener">Boss直聘</a></li><li><a href="https://www.lagou.com" target="_blank" rel="noopener">拉勾网</a></li><li><a href="https://www.liepin.com" target="_blank" rel="noopener">猎聘</a></li><li><a href="https://cn.100offer.com/" target="_blank" rel="noopener">100Offer</a></li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="https://s.geekbang.org/" target="_blank" rel="noopener">极客搜索</a><ul><li>技术文章搜索引擎。</li></ul></li></ul><h3 id="代码托管"><a href="#代码托管" class="headerlink" title="代码托管"></a>代码托管</h3><ul><li><a href="https://coding.net" target="_blank" rel="noopener">Coding</a></li><li><a href="https://gitee.com/" target="_blank" rel="noopener">码云</a></li></ul><h3 id="文件服务"><a href="#文件服务" class="headerlink" title="文件服务"></a>文件服务</h3><ul><li>七牛</li><li>又拍云</li></ul><h3 id="综合云服务商"><a href="#综合云服务商" class="headerlink" title="综合云服务商"></a>综合云服务商</h3><ul><li>阿里云</li><li><a href="https://cloud.tencent.com/redirect.php?redirect=1012&amp;cps_key=c2665015d90871c0cb20fef91b7afc3c" target="_blank" rel="noopener">腾讯云</a></li><li>百度云</li><li>新浪云</li><li>金山云</li><li><a href="https://amazonaws-china.com/cn/" target="_blank" rel="noopener">亚马逊云(AWS)</a></li><li><a href="https://cloud.google.com/?hl=zh-cn" target="_blank" rel="noopener">谷歌云</a></li><li><a href="https://azure.microsoft.com/zh-cn/" target="_blank" rel="noopener">微软云</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;本文摘自 &lt;code&gt;github&lt;/code&gt; 上的一篇长约 &lt;code&gt;10&lt;/code&gt; 万字服务端架构师技术总结归纳文档，覆盖广度包括数据结构、算法、并发、操作系统、设计模式、运维、中间件、网络、数据库、搜索引擎、性能、大数据、安全、常见开源框架、分布式、设计思想、项目管理和技术资源等。&lt;/p&gt;
    
    </summary>
    
      <category term="技术知识图谱" scheme="https://ostenant.coding.me/categories/%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>实战Spring Boot 2.0 Reactive编程系列(一) - WebFlux初体验</title>
    <link href="https://ostenant.coding.me/2018/05/27/%E5%AE%9E%E6%88%98Spring%20Boot%202.0%20Reactive%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97(%E4%B8%80)%20-%20WebFlux%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://ostenant.coding.me/2018/05/27/实战Spring Boot 2.0 Reactive编程系列(一) - WebFlux初体验/</id>
    <published>2018-05-27T07:25:00.000Z</published>
    <updated>2018-06-07T04:31:21.400Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上文引入了 <strong>反应式编程模型</strong> 相关概念，对 <code>Spring Reactor</code> 的核心 <code>API</code> 进行了简单归纳。本文会对 <code>Spring 5 WebFlux</code> 进行相关介绍，包括引入 <code>Servlet 3.1 +</code>，各个功能组件 <code>Router Functions</code>、<code>WebFlux</code> 和 <code>Reactive Streams</code> 等，以及如何在 <code>Spring Boot 2.0</code> 中分别以 <strong>全局功能路由</strong> 和 <code>MVC</code> <strong>控制器</strong> 的方式配置 <code>HTTP</code> 请求处理。</p><a id="more"></a><p><img src="http://ols3fdyll.bkt.clouddn.com/Sprng_Boot_2.0_Log.png" alt=""></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Spring-5-WebFlux介绍"><a href="#Spring-5-WebFlux介绍" class="headerlink" title="Spring 5 WebFlux介绍"></a>Spring 5 WebFlux介绍</h2><p>关于 <code>Spring 5</code> 的 <code>WebFlux</code> 响应式编程，下图是传统 <code>Spring Web MVC</code> 结构以及<code>Spring 5</code> 中新增加的基于 <code>Reactive Streams</code> 的 <code>Spring WebFlux</code> 框架。可以使用 <code>webFlux</code> 模块来构建 <strong>异步的</strong>、<strong>非堵塞的</strong>、<strong>事件驱动</strong> 的服务，其在 <strong>伸缩性方面</strong> 表现非常好。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/WebFlux_01_00.png" alt=""></p><p>如图所示，<code>WebFlux</code> 模块从上到下依次是 <code>Router Functions</code>、<code>WebFlux</code>、<code>Reactive Streams</code> 三个新组件。</p><h3 id="Servlet-3-1-API介绍"><a href="#Servlet-3-1-API介绍" class="headerlink" title="Servlet 3.1+ API介绍"></a>Servlet 3.1+ API介绍</h3><p><code>WebFlux</code> 模块需要运行在实现了 <code>Servlet 3.1+</code> <strong>规范</strong> 的容器之上。<code>Servlet 3.1</code> 规范中新增了对 <strong>异步处理</strong> 的支持，在新的 <code>Servlet</code> 规范中，<code>Servlet</code> 线程不需要一直 <strong>阻塞等待</strong> 到业务处理完成。</p><p>在 <code>Servlet 3.1</code> 中，其请求处理的线程模型大致如下：</p><ol><li><p><code>Servlet</code> 线程接收到新的请求后，不需要等待业务处理完成再进行结果输出，而是将这个请求委托给另外一个线程（业务线程）来完成。</p></li><li><p><code>Servlet</code> 线程将委托完成之后变返回到容器中去接收新的请求。</p></li></ol><p><code>Servlet 3.1</code> 规范特别适用于那种 <strong>业务处理非常耗时</strong> 的场景之下，可以减少 <strong>服务器资源</strong> 的占用，并且提高 <strong>并发处理速度</strong> ，而对于那些能 <strong>快速响应</strong> 的场景收益并不大。</p><p>所以 <code>WebFlux</code> 支持的容器有 <code>Tomcat</code>、<code>Jetty</code> 等 <strong>同步容器</strong> ，也可以是 <code>Netty</code> 和 <code>Undertow</code> 这类 <strong>异步容器</strong>。在容器中 <code>Spring WebFlux</code> 会将 <strong>输入流</strong> 适配成 <code>Mono</code> 或 <code>Flux</code> 格式进行统一处理。</p><h3 id="Spring-WebFlux的功能模块"><a href="#Spring-WebFlux的功能模块" class="headerlink" title="Spring WebFlux的功能模块"></a>Spring WebFlux的功能模块</h3><p>下面介绍上图中 <code>WebFlux</code> 各个模块：</p><h4 id="1-Router-Functions"><a href="#1-Router-Functions" class="headerlink" title="1. Router Functions"></a>1. Router Functions</h4><p>对标准的 <code>@Controller</code>，<code>@RequestMapping</code>等的 <code>Spring MVC</code> 注解，提供一套 <strong>函数式风格</strong> 的 <code>API</code>，用于创建 <code>Router</code>、<code>Handler</code> 和<code>Filter</code>。</p><h4 id="2-WebFlux"><a href="#2-WebFlux" class="headerlink" title="2. WebFlux"></a>2. WebFlux</h4><p>核心组件，协调上下游各个组件提供 <strong>响应式编程</strong> 支持。</p><h4 id="3-Reactive-Streams"><a href="#3-Reactive-Streams" class="headerlink" title="3. Reactive Streams"></a>3. Reactive Streams</h4><p>一种支持 <strong>背压</strong> <code>(Backpressure)</code> 的 <strong>异步数据流处理标准</strong>，主流实现有 <code>RxJava</code> 和 <code>Reactor</code>，<code>Spring WebFlux</code> 集成的是<code>Reactor</code>。</p><h4 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h4><p><code>Flux</code> 和 <code>Mono</code> 属于 <strong>事件发布者</strong>，类似于 <strong>生产者</strong>，对消费者 <strong>提供订阅接口</strong>。当有事件发生的时候，<code>Flux</code> 或 <code>Mono</code> 会回调 <strong>消费者</strong>相应的方法来通知 <strong>消费者</strong> 相应的事件。</p><p>下面这张图是 <code>Flux</code> 的工作流程图：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Flux_Workflow.png" alt=""></p><p>关于 <code>Flux</code> 的工作模式，可以看出 <code>Flux</code> 可以 触发 <code>(emit)</code> 很多 <code>item</code>，而这些 <code>item</code> 可以经过若干 <code>Operators</code> 然后才被 <code>subscribe</code>，下面是使用 <code>Flux</code> 的一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Flux.fromIterable(getSomeLongList())</span><br><span class="line">    .mergeWith(Flux.interval(<span class="number">100</span>))</span><br><span class="line">    .doOnNext(serviceA::someObserver)</span><br><span class="line">    .map(d -&gt; d * <span class="number">2</span>)</span><br><span class="line">    .take(<span class="number">3</span>)</span><br><span class="line">    .onErrorResumeWith(errorHandler::fallback)</span><br><span class="line">    .doAfterTerminate(serviceM::incrementTerminate)</span><br><span class="line">    .subscribe(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="Mono"><a href="#Mono" class="headerlink" title="Mono"></a>Mono</h4><p>下面的图片是 <code>Mono</code> 的处理流程，可以很直观的看出来 <code>Mono</code> 和 <code>Flux</code> 的区别：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Mono_Workflow.png" alt=""></p><p><code>Mono</code> 只能触发 <code>(emit)</code> 一个 <code>item</code>，下面是使用 <code>Mono</code> 的一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mono.fromCallable(System::currentTimeMillis)</span><br><span class="line">    .flatMap(time -&gt; Mono.first(serviceA.findRecent(time), serviceB.findRecent(time)))</span><br><span class="line">    .timeout(Duration.ofSeconds(<span class="number">3</span>), errorHandler::fallback)</span><br><span class="line">    .doOnSuccess(r -&gt; serviceM.incrementSuccess())</span><br><span class="line">    .subscribe(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-2-0-Reactive-Stack"><a href="#Spring-Boot-2-0-Reactive-Stack" class="headerlink" title="Spring Boot 2.0 Reactive Stack"></a>Spring Boot 2.0 Reactive Stack</h2><p><code>Spring Boot Webflux</code> 就是基于 <code>Reactor</code> 实现的。<code>Spring Boot 2.0</code> 包括一个新的 <code>spring-webflux</code> 模块。该模块包含对 <strong>响应式</strong> <code>HTTP</code> 和 <code>WebSocket</code> 客户端的支持，以及对 <code>REST</code> 、<code>HTML</code> 和 <code>WebSocket</code> <strong>交互等程序</strong> 的支持。一般来说，<code>Spring MVC</code> 用于 <strong>同步处理</strong>，<code>Spring Webflux</code> 用于 <strong>异步处理</strong>。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/SpringBoot2.0_Reactor.png" alt=""></p><p>如上图所示，从 <code>Web</code> 表现层到数据访问，再到容器，<code>Spring Boot 2.0</code> 同时提供了 <strong>同步阻塞式</strong> 和 <strong>异步非阻塞式</strong> 两套完整的 <code>API Stack</code>。</p><p>从上而下对比以下两者的区别:</p><table><thead><tr><th style="text-align:left">API Stack</th><th style="text-align:left">Sevlet Stack</th><th style="text-align:left">Reactive Stack</th></tr></thead><tbody><tr><td style="text-align:left">Web控制层</td><td style="text-align:left">Spring MVC</td><td style="text-align:left">Spring WebFlux</td></tr><tr><td style="text-align:left">安全认证层</td><td style="text-align:left">Spring Security</td><td style="text-align:left">Spring Security</td></tr><tr><td style="text-align:left">数据访问层</td><td style="text-align:left">Spring Data Repositories</td><td style="text-align:left">Spring Data Reactive Repositories</td></tr><tr><td style="text-align:left">容器API</td><td style="text-align:left">Servlet API</td><td style="text-align:left">Reactive Streams Adapters</td></tr><tr><td style="text-align:left">内嵌容器</td><td style="text-align:left">Servlet Containers</td><td style="text-align:left">Netty, Servlet 3.1+ Containers</td></tr></tbody></table><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>控制层一旦使用 <code>Spring WebFlux</code>，它下面的安全认证层、数据访问层都必须使用 <code>Reactive API</code>。其次，<code>Spring Data Reactive Repositories</code> 目前只支持 <code>MongoDB</code>、<code>Redis</code> 和 <code>Couchbase</code> 等几种不支持事务管理的 <code>NOSQL</code>。技术选型时一定要权衡这些弊端和风险，比如：</p><ol><li><p><code>Spring MVC</code> 能满足场景的，就不需要更改为  <code>Spring WebFlux</code>。</p></li><li><p>要注意容器的支持，可以看看底层 <strong>内嵌容器</strong> 的支持。</p></li><li><p><strong>微服务</strong> 体系结构，<code>Spring WebFlux</code> 和 <code>Spring MVC</code> 可以混合使用。尤其开发 <code>IO</code> <strong>密集型</strong> 服务的时候，可以选择 <code>Spring WebFlux</code> 去实现。</p></li></ol><h3 id="编程模型"><a href="#编程模型" class="headerlink" title="编程模型"></a>编程模型</h3><p><code>Spring 5 Web</code> 模块包含了 <code>Spring WebFlux</code> 的 <code>HTTP</code> 抽象。类似 <code>Servlet API</code>， <code>WebFlux</code> 提供了 <code>WebHandler API</code> 去定义 <strong>非阻塞</strong> <code>API</code> 抽象接口。可以选择以下两种编程模型实现：</p><ol><li><p><strong>注解控制层:</strong> 和 <code>MVC</code> 保持一致，<code>WebFlux</code> 也支持 <strong>响应性</strong> <code>@RequestBody</code> 注解。</p></li><li><p><strong>功能性端点:</strong> 基于 <code>lambda</code> 轻量级编程模型，用来 <strong>建立路由</strong> 和 <strong>处理请求</strong> 的工具。和上面最大的区别就是，这种模型，<strong>全程</strong> 控制了 <strong>请求 - 响应</strong> 的生命流程</p></li></ol><h3 id="内嵌容器"><a href="#内嵌容器" class="headerlink" title="内嵌容器"></a>内嵌容器</h3><p>跟 <code>Spring Boot</code> 大框架一样启动应用，但 <code>Spring WebFlux</code> 默认是通过 <code>Netty</code> 启动，并且自动设置了 <strong>默认端口</strong> 为 <code>8080</code>。另外还提供了对 <code>Jetty</code>、<code>Undertow</code> 等容器的支持。开发者自行在添加对应的容器 <code>Starter</code> 组件依赖，即可配置并使用对应 <strong>内嵌容器实例</strong>。</p><blockquote><p>注意: 必须是 Servlet 3.1+ 容器，如 Tomcat、Jetty；或者非 Servlet 容器，如 Netty 和 Undertow。</p></blockquote><h3 id="Starter-组件"><a href="#Starter-组件" class="headerlink" title="Starter 组件"></a>Starter 组件</h3><p>跟 <code>Spring Boot</code> 大框架一样，<code>Spring Boot Webflux</code> 提供了很多 <strong>开箱即用</strong> 的 <code>Starter</code> 组件。添加 <code>spring-boot-starter-webflux</code> 依赖，就可用于构建 <strong>响应式</strong> <code>API</code> 服务，其包含了 <code>WebFlux</code> 和 <code>Tomcat</code> <strong>内嵌容器</strong> 等。</p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><h4 id="Spring-Initializr构建项目骨架"><a href="#Spring-Initializr构建项目骨架" class="headerlink" title="Spring Initializr构建项目骨架"></a>Spring Initializr构建项目骨架</h4><p>利用 <code>Spring Initializer</code> 快速生成 <code>Spring Boot</code> 应用，配置项目信息并设置依赖。</p><h4 id="配置Maven依赖"><a href="#配置Maven依赖" class="headerlink" title="配置Maven依赖"></a>配置Maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-Boot启动类"><a href="#Spring-Boot启动类" class="headerlink" title="Spring Boot启动类"></a>Spring Boot启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置实体类"><a href="#配置实体类" class="headerlink" title="配置实体类"></a>配置实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    String body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-MVC控制器方式"><a href="#1-MVC控制器方式" class="headerlink" title="1. MVC控制器方式"></a>1. MVC控制器方式</h3><h4 id="1-1-编写控制器"><a href="#1-1-编写控制器" class="headerlink" title="1.1. 编写控制器"></a>1.1. 编写控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;Message&gt; <span class="title">allMessages</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Flux.just(</span><br><span class="line">            Message.builder().body(<span class="string">"hello Spring 5"</span>).build(),</span><br><span class="line">            Message.builder().body(<span class="string">"hello Spring Boot 2"</span>).build()</span><br><span class="line">        );</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-编写测试类"><a href="#1-2-编写测试类" class="headerlink" title="1.2. 编写测试类"></a>1.2. 编写测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@WebFluxTest</span>(controllers = MessageController.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    WebTestClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllMessagesShouldBeOk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        client.get().uri(<span class="string">"/"</span>).exchange().expectStatus().isOk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-查看启动日志"><a href="#1-3-查看启动日志" class="headerlink" title="1.3. 查看启动日志"></a>1.3. 查看启动日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2018-05-27 17:37:23.550  INFO 67749 --- [           main] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped <span class="string">"&#123;[],methods=[GET]&#125;"</span> onto reactor.core.publisher.Flux&lt;com.example.demo.Message&gt; com.example.demo.MessageController.allMessages()</span><br><span class="line">2018-05-27 17:37:23.998  INFO 67749 --- [ctor-http-nio-1] r.ipc.netty.tcp.BlockingNettyContext     : Started HttpServer on /0:0:0:0:0:0:0:0:8080</span><br><span class="line">2018-05-27 17:37:23.999  INFO 67749 --- [           main] o.s.b.web.embedded.netty.NettyWebServer  : Netty started on port(s): 8080</span><br><span class="line">2018-05-27 17:37:24.003  INFO 67749 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication <span class="keyword">in</span> 1.6 seconds (JVM running <span class="keyword">for</span> 2.274)</span><br></pre></td></tr></table></figure><p>从日志里可以看出：</p><ol><li>启动时 <code>WebFlux</code> 利用 <code>MVC</code> 原生的 <code>RequestMappingHandlerMapping</code> 将控制器里的 <strong>请求路径</strong> 和 <code>MVC</code> 中的 <strong>处理器</strong> 进行绑定。</li><li><code>Spring WebFlux</code> 默认采用 <code>Netty</code> 作为 <strong>内嵌容器</strong>，且启动端口默认为 <code>8080</code>。</li></ol><p>访问 <a href="localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>，返回结果如下：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Controller_Result_001.png" alt=""></p><h3 id="2-全局Router-API方式"><a href="#2-全局Router-API方式" class="headerlink" title="2. 全局Router API方式"></a>2. 全局Router API方式</h3><h4 id="2-1-配置全局Router-Bean"><a href="#2-1-配置全局Router-Bean" class="headerlink" title="2.1. 配置全局Router Bean"></a>2.1. 配置全局Router Bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoRouterConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title">routes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> route(GET(<span class="string">"/"</span>), (ServerRequest req)-&gt; ok()</span><br><span class="line">                .body(</span><br><span class="line">                    BodyInserters.fromObject(</span><br><span class="line">                        Arrays.asList(</span><br><span class="line">                            Message.builder().body(<span class="string">"hello Spring 5"</span>).build(),</span><br><span class="line">                            Message.builder().body(<span class="string">"hello Spring Boot 2"</span>).build()</span><br><span class="line">                        )</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-编写测试类"><a href="#2-2-编写测试类" class="headerlink" title="2.2. 编写测试类"></a>2.2. 编写测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@WebFluxTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    WebTestClient client;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllMessagesShouldBeOk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        client.get().uri(<span class="string">"/"</span>).exchange().expectStatus().isOk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-查看启动日志"><a href="#2-3-查看启动日志" class="headerlink" title="2.3. 查看启动日志"></a>2.3. 查看启动日志</h4><p>运行 <code>Spring Boot</code> 启动入口类，启动日志如下(不重要的省略)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2018-05-27 17:20:28.870  INFO 67696 --- [           main] o.s.w.r.f.s.s.RouterFunctionMapping      : Mapped (GET &amp;&amp; /) -&gt; com.example.demo.DemoRouterConfig$<span class="variable">$Lambda</span><span class="variable">$213</span>/1561745898@3381b4fc</span><br><span class="line">2018-05-27 17:20:28.931  INFO 67696 --- [           main] o.s.w.r.r.m.a.ControllerMethodResolver   : Looking <span class="keyword">for</span> @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@1460a8c0: startup date [Sun May 27 17:20:27 CST 2018]; root of context hierarchy</span><br><span class="line">2018-05-27 17:20:29.311  INFO 67696 --- [ctor-http-nio-1] r.ipc.netty.tcp.BlockingNettyContext     : Started HttpServer on /0:0:0:0:0:0:0:0:8080</span><br><span class="line">2018-05-27 17:20:29.312  INFO 67696 --- [           main] o.s.b.web.embedded.netty.NettyWebServer  : Netty started on port(s): 8080</span><br><span class="line">2018-05-27 17:20:29.316  INFO 67696 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication <span class="keyword">in</span> 2.137 seconds (JVM running <span class="keyword">for</span> 3.169)</span><br></pre></td></tr></table></figure><p>从日志里可以看出：启动时 <code>WebFlux</code> 利用 <code>RouterFunctionMapping</code> 将 <code>RouterFunction</code> 里的 <strong>全局路径</strong> 和 <strong>请求处理</strong> 进行了映射和绑定。</p><p>访问 <a href="localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>，返回结果如下：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Router_Result_000.png" alt=""></p><p>可以看出，无论是使用 <code>Fucntional Router</code> 还是 <code>MVC Controller</code>，都可以产生相同的效果！</p><h2 id="开发运行环境"><a href="#开发运行环境" class="headerlink" title="开发运行环境"></a>开发运行环境</h2><ul><li><p><strong>JDK 1.8 +</strong> : <code>Spring Boot 2.x</code> 要求 <code>JDK 1.8</code> 环境及以上版本。另外，<code>Spring Boot 2.x</code> 只兼容 <code>Spring Framework 5.0</code> 及以上版本。</p></li><li><p><strong>Maven 3.2 +</strong> : 为 <code>Spring Boot 2.x</code> 提供了相关依赖构建工具是 <code>Maven</code>，版本需要 <code>3.2</code> 及以上版本。使用 <code>Gradle</code> 则需要 <code>1.12</code> 及以上版本。<code>Maven</code> 和 <code>Gradle</code> 大家各自挑选下喜欢的就好。</p></li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文首先对 <code>Spring 5 WebFlux</code> 进行了单独介绍，包括引入 <code>Servlet 3.1 +</code>，各个功能组件 <code>Router Functions</code>、<code>WebFlux</code> 和 <code>Reactive Streams</code> 等。然后在 <code>Spring Boot 2.0</code> 详细地介绍了 <code>Reactive Stack</code> 和 <code>Servlet Stack</code> 的组成区别，并分别给出了 <code>WebFlux</code> 基于 <strong>全局功能路由</strong> 和 <strong>控制器</strong> 的配置和使用案例。</p><hr><p>欢迎关注技术公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上文引入了 &lt;strong&gt;反应式编程模型&lt;/strong&gt; 相关概念，对 &lt;code&gt;Spring Reactor&lt;/code&gt; 的核心 &lt;code&gt;API&lt;/code&gt; 进行了简单归纳。本文会对 &lt;code&gt;Spring 5 WebFlux&lt;/code&gt; 进行相关介绍，包括引入 &lt;code&gt;Servlet 3.1 +&lt;/code&gt;，各个功能组件 &lt;code&gt;Router Functions&lt;/code&gt;、&lt;code&gt;WebFlux&lt;/code&gt; 和 &lt;code&gt;Reactive Streams&lt;/code&gt; 等，以及如何在 &lt;code&gt;Spring Boot 2.0&lt;/code&gt; 中分别以 &lt;strong&gt;全局功能路由&lt;/strong&gt; 和 &lt;code&gt;MVC&lt;/code&gt; &lt;strong&gt;控制器&lt;/strong&gt; 的方式配置 &lt;code&gt;HTTP&lt;/code&gt; 请求处理。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Reactive编程系列" scheme="https://ostenant.coding.me/categories/Spring-Reactive%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Reactive Streams" scheme="https://ostenant.coding.me/tags/Reactive-Streams/"/>
    
      <category term="Spring WebFlux" scheme="https://ostenant.coding.me/tags/Spring-WebFlux/"/>
    
      <category term="Spring Boot 2.0" scheme="https://ostenant.coding.me/tags/Spring-Boot-2-0/"/>
    
  </entry>
  
  <entry>
    <title>聊聊Spring Reactor反应式编程</title>
    <link href="https://ostenant.coding.me/2018/05/26/%E8%81%8A%E8%81%8ASpring%20Reactor%E5%8F%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://ostenant.coding.me/2018/05/26/聊聊Spring Reactor反应式编程/</id>
    <published>2018-05-26T08:41:00.000Z</published>
    <updated>2018-05-27T10:03:31.352Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了应对 <strong>高并发环境下</strong> 的服务端编程，微软提出了一个实现 <strong>异步编程</strong> 的方案 -  <code>Reactive Programming</code>，中文名称 <strong>反应式编程</strong>。随后，其它技术也迅速地跟上了脚步，像 <code>ES6</code> 通过 <code>Promise</code> 引入了类似的异步编程方式。<code>Java</code> 社区也没有落后很多，<code>Netflix</code> 和 <code>TypeSafe</code> 公司提供了 <code>RxJava</code> 和 <code>Akka Stream</code> 技术，让 <code>Java</code> 平台也有了能够实现反应式编程的框架。</p><a id="more"></a><p><img src="http://ols3fdyll.bkt.clouddn.com/Reactor.png" alt=""></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>函数式编程是种编程方式，它将计算机的运算视为函数的计算。函数编程语言最重要的基础是 <strong>λ演算</strong> <code>(lambda calculus)</code>，而λ演算的函数可以接受函数当作 <strong>输入(参数)</strong> 和 <strong>输出(返回值)</strong>。<code>lambda</code> 表达式对与大多数程序员已经很熟悉了，<code>jdk8</code> 以及 <code>es6</code>都是引入的 <code>lambda</code>。</p><h3 id="函数式编程的特点"><a href="#函数式编程的特点" class="headerlink" title="函数式编程的特点"></a>函数式编程的特点</h3><ul><li>惰性计算 </li><li>函数是“第一等公民” </li><li>只使用表达式而不使用语句 </li><li>没有副作用</li></ul><h2 id="反应式编程"><a href="#反应式编程" class="headerlink" title="反应式编程"></a>反应式编程</h2><p>反应式编程 <code>(reactive programming)</code> 是一种基于 <strong>数据流</strong> <code>(data stream)</code> 和 <strong>变化传递</strong> <code>(propagation of change)</code> 的 <strong>声明式</strong> <code>(declarative)</code> 的编程范式。</p><h3 id="反应式编程的特点"><a href="#反应式编程的特点" class="headerlink" title="反应式编程的特点"></a>反应式编程的特点</h3><h4 id="1-事件驱动"><a href="#1-事件驱动" class="headerlink" title="1. 事件驱动"></a>1. 事件驱动</h4><p>在一个 <strong>事件驱动</strong> 的应用程序中，组件之间的交互是通过松耦合的 <strong>生产者</strong> <code>(production)</code>和 <strong>消费者</strong> <code>(consumption)</code> 来实现的。这些事件是以 <strong>异步</strong> 和 <strong>非阻塞</strong> 的方式发送和接收的。</p><p><strong>事件驱动</strong> 的系统依靠 <strong>推模式</strong> 而不是 <strong>拉模式</strong> 或 <strong>投票表决</strong>，即 <strong>生产者</strong> 是在有消息时才推送数据给 <strong>消费者</strong>，而不是通过一种浪费资源方式：让 <strong>消费者</strong> 不断地 <strong>轮询</strong> 或 <strong>等待数据</strong>。</p><h4 id="2-实时响应"><a href="#2-实时响应" class="headerlink" title="2. 实时响应"></a>2. 实时响应</h4><p>程序发起执行以后，应该 <strong>快速</strong> 返回存储 <strong>结果的上下文</strong>，把具体执行交给 <strong>后台线程</strong>。待处理完成以后，异步地将 <strong>真实返回值</strong> 封装在此 <strong>上下文</strong> 中，而不是 <strong>阻塞</strong> 程序的执行。实时响应是通过 <strong>异步</strong> 编程实现的，例如：发起调用后，快速返回类似 <code>java8</code> 中 <code>CompletableFuture</code> 对象。</p><h4 id="3-弹性机制"><a href="#3-弹性机制" class="headerlink" title="3. 弹性机制"></a>3. 弹性机制</h4><p>事件驱动的 <strong>松散耦合</strong> 提供了组件在失败下，可以抓获 <strong>完全隔离</strong> 的上下文场景，作为 <strong>消息封装</strong>，发送到下游组件。在具体编程时可以 <strong>检查错误</strong> ，比如：是否接收到，接收的命令是否可执行等，并决定如何应对。</p><h2 id="Reactor简介"><a href="#Reactor简介" class="headerlink" title="Reactor简介"></a>Reactor简介</h2><p><code>Reactor</code> 框架是 <code>Pivotal</code> 基于 <code>Reactive Programming</code> 思想实现的。它符合 <code>Reactive Streams</code> 规范 (<code>Reactive Streams</code> 是由 <code>Netflix</code>、<code>TypeSafe</code>、<code>Pivotal</code> 等公司发起的) 的一项技术。其名字有 <strong>反应堆</strong> 之意，反映了其背后的强大的 <strong>性能</strong>。</p><h3 id="1-Reactive-Programming"><a href="#1-Reactive-Programming" class="headerlink" title="1. Reactive Programming"></a>1. Reactive Programming</h3><p><code>Reactive Programming</code>，中文称 <strong>反应式编程</strong>。<code>Reactive Programming</code> 是一种 <strong>非阻塞</strong>、<strong>事件驱动数据流</strong> 的开发方案，使用 <strong>函数式编程</strong> 的概念来操作数据流，系统中某部分的数据变动后会自动更新其他部分，而且成本极低。</p><blockquote><p>其最早是由微软提出并引入到 .NET 平台中，随后 ES6 也引入了类似的技术。在 Java 平台上，较早采用反应式编程技术的是 Netflix 公司开源的 RxJava 框架。Hystrix 就是以 RxJava 为基础开发的。</p></blockquote><p>反应式编程其实并不神秘，通过与我们熟悉的 <strong>迭代器模式</strong> 对比，便可了解其基本思想：</p><table><thead><tr><th style="text-align:left">事件</th><th style="text-align:left">Iterable (pull)</th><th style="text-align:left">Observable (push)</th></tr></thead><tbody><tr><td style="text-align:left">获取数据</td><td style="text-align:left">T next()</td><td style="text-align:left">onNext(T)</td></tr><tr><td style="text-align:left">发现异常</td><td style="text-align:left">throws Exception</td><td style="text-align:left">onError(Exception)</td></tr><tr><td style="text-align:left">处理完成</td><td style="text-align:left">hasNext()</td><td style="text-align:left">onCompleted()</td></tr></tbody></table><p>上面表格的中的 <code>Observable</code> 那一列便代表 <strong>反应式编程</strong> 的 <code>API</code> 的使用方式。它其实是 <strong>观察者模式</strong> 的一种延伸。</p><p>如果将 <strong>迭代器模式</strong> 看作是 <strong>拉模式</strong>，那 <strong>观察者模式</strong> 便是 <strong>推模式</strong>。</p><ol><li><p><strong>被订阅者</strong> <code>(Publisher)</code> 主动推送数据给 <strong>订阅者</strong> <code>(Subscriber)</code>，触发 <code>onNext()</code> 方法。异常和完成时触发另外两个方法。</p></li><li><p><strong>被订阅者</strong> <code>(Publisher)</code> 发生异常，则触发 <strong>订阅者</strong> <code>(Subscriber)</code> 的 <code>onError()</code> 方法进行异常捕获处理。</p></li><li><p><strong>被订阅者</strong> <code>(Publisher)</code> 每次推送都会触发一次 <code>onNext()</code> 方法。所有的推送完成且无异常时，<code>onCompleted()</code> 方法将 <strong>在最后</strong> 触发一次。</p></li></ol><p> 如果 <code>Publisher</code> 发布消息太快了，超过了 <code>Subscriber</code> 的处理速度，那怎么办？这就是 <code>Backpressure</code> 的由来。<code>Reactive Programming</code> 框架需要提供 <strong>背压机制</strong>，使得 <code>Subscriber</code> 能够控制 <strong>消费消息</strong> 的速度。</p><h3 id="2-Reactive-Streams"><a href="#2-Reactive-Streams" class="headerlink" title="2. Reactive Streams"></a>2. Reactive Streams</h3><p>在 <code>Java</code> 平台上，<code>Netflix</code>（开发了 <code>RxJava</code>）、<code>TypeSafe</code>（开发了 <code>Scala</code>、<code>Akka</code>）、<code>Pivatol</code>（开发了 <code>Spring</code>、<code>Reactor</code>）共同制定了一个被称为 <code>Reactive Streams</code> 项目（规范），用于制定反应式编程相关的规范以及接口。</p><p><code>Reactive Streams</code> 由以下几个组件组成：</p><ul><li><strong>发布者</strong>：发布元素到订阅者</li><li><strong>订阅者</strong>：消费元素</li><li><strong>订阅</strong>：在发布者中，订阅被创建时，将与订阅者共享</li><li><strong>处理器</strong>：发布者与订阅者之间处理数据</li></ul><p>其主要的接口有这三个：</p><ul><li>Publisher</li><li>Subscriber</li><li>Subcription</li></ul><p>其中，<code>Subcriber</code> 中便包含了上面表格提到的 <code>onNext</code>、<code>onError</code>、<code>onCompleted</code> 这三个方法。对于 <code>Reactive Streams</code>，只需要理解其思想就可以，包括基本思想以及 <code>Backpressure</code> 等思想即可。</p><h3 id="3-Reactor的主要模块"><a href="#3-Reactor的主要模块" class="headerlink" title="3. Reactor的主要模块"></a>3. Reactor的主要模块</h3><p><code>Reactor</code> 框架主要有两个主要的模块：</p><ul><li>reactor-core</li><li>reactor-ipc</li></ul><p>前者主要负责 <code>Reactive Programming</code> 相关的 <strong>核心</strong> <code>API</code> 的实现，后者负责 <strong>高性能网络通信</strong> 的实现，目前是基于 <code>Netty</code> 实现的。</p><h3 id="4-Reactor的核心类"><a href="#4-Reactor的核心类" class="headerlink" title="4. Reactor的核心类"></a>4. Reactor的核心类</h3><p>在 <code>Reactor</code> 中，经常使用的类并不是很多，主要有以下两个：</p><ul><li><strong>Mono</strong></li></ul><p><code>Mono</code> 实现了 <code>org.reactivestreams.Publisher</code> 接口，代表 <code>0</code> 到 <code>1</code> 个元素的 <strong>发布者</strong>。</p><ul><li><strong>Flux</strong></li></ul><p><code>Flux</code> 同样实现了 <code>org.reactivestreams.Publisher</code> 接口，代表 <code>0</code> 到 <code>N</code> 个元素的发表者。</p><ul><li><strong>Scheduler</strong></li></ul><p>代表背后驱动反应式流的调度器，通常由各种线程池实现。</p><h3 id="5-WebFlux"><a href="#5-WebFlux" class="headerlink" title="5. WebFlux"></a>5. WebFlux</h3><p><code>Spring 5</code> 引入的一个基于 <code>Netty</code> 而不是 <code>Servlet</code> 的高性能的 <code>Web</code> 框架 - <code>Spring WebFlux</code> ，但是使用方式并没有同传统的基于 <code>Servlet</code> 的 <code>Spring MVC</code> 有什么大的不同。</p><p><code>WebFlux</code> 中 <code>MVC</code> 接口的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/webflux"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebFluxTestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/mono"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Foobar&gt; <span class="title">foobar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> Foobar());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最大的变化就是返回值从 <code>Foobar</code> 所表示的一个对象变为 <code>Mono&lt;Foobar&gt;</code> 或 <code>Flux&lt;Foobar&gt;</code>。</p><h3 id="6-Reactive-Streams、Reactor和WebFlux"><a href="#6-Reactive-Streams、Reactor和WebFlux" class="headerlink" title="6. Reactive Streams、Reactor和WebFlux"></a>6. Reactive Streams、Reactor和WebFlux</h3><p>上面介绍了 <strong>反应式编程</strong> 的一些概念。可能读者看到这里有些乱，梳理一下三者的关系：</p><ol><li><code>Reactive Streams</code> 是一套反应式编程 <strong>标准</strong> 和 <strong>规范</strong>；</li><li><code>Reactor</code> 是基于 <code>Reactive Streams</code> 一套 <strong>反应式编程框架</strong>；</li><li><code>WebFlux</code> 以 <code>Reactor</code> 为基础，实现 <code>Web</code> 领域的 <strong>反应式编程框架</strong>。</li></ol><p>其实，对于业务开发人员来说，当编写反应式代码时，通常只会接触到 <code>Publisher</code> 这个接口，对应到 <code>Reactor</code> 便是 <code>Mono</code> 和 <code>Flux</code>。</p><p>对于 <code>Subscriber</code> 和 <code>Subcription</code> 这两个接口，<code>Reactor</code> 也有相应的实现。这些都是 <code>Spring WebFlux</code> 和 <code>Spring Data Reactive</code> 这样的框架用到的。如果 <strong>不开发中间件</strong>，开发人员是不会接触到的。</p><h2 id="Reactor入门"><a href="#Reactor入门" class="headerlink" title="Reactor入门"></a>Reactor入门</h2><p>接下来介绍一下 <code>Reactor</code> 中 <code>Mono</code> 和 <code>Flux</code> 这两个类中的主要方法的使用。</p><p>如同 <code>Java 8</code> 所引入的 <code>Stream</code> 一样，<code>Reactor</code> 的使用方式基本上也是分三步：</p><ul><li>开始阶段的创建</li><li>中间阶段的处理</li><li>最终阶段的消费</li></ul><p>只不过创建和消费可能是通过像 <code>Spring 5</code> 这样框架完成的（比如通过 <code>WebFlux</code> 中的 <code>WebClient</code> 调用  <code>HTTP</code> 接口，返回值便是一个 <code>Mono</code>）。但我们还是需要基本了解这些阶段的开发方式。</p><h3 id="1-创建-Mono-和-Flux（开始阶段）"><a href="#1-创建-Mono-和-Flux（开始阶段）" class="headerlink" title="1. 创建 Mono 和 Flux（开始阶段）"></a>1. 创建 Mono 和 Flux（开始阶段）</h3><p>使用 <code>Reactor</code> 编程的开始必然是先创建出 <code>Mono</code> 或 <code>Flux</code>。有些时候不需要我们自己创建，而是实现例如 <code>WebFlux</code> 中的 <code>WebClient</code> 或 <code>Spring Data Reactive</code> 得到一个 <code>Mono</code> 或 <code>Flux</code>。</p><ul><li>使用 WebFlux WebClient 调用 HTTP 接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">WebClient webClient = WebClient.create(<span class="string">"http://localhost:8080"</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;User&gt; <span class="title">findById</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> webClient</span><br><span class="line">            .get()</span><br><span class="line">            .uri(<span class="string">"/users/"</span> + userId)</span><br><span class="line">            .accept(MediaType.APPLICATION_JSON)</span><br><span class="line">            .exchange()</span><br><span class="line">            .flatMap(cr -&gt; cr.bodyToMono(User.class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 ReactiveMongoRepository 查询 User</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">ReactiveMongoRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Mono&lt;User&gt; <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但有些时候，我们也需要主动地创建一个 <code>Mono</code> 或  <code>Flux</code>。</p><h4 id="普通的创建方式"><a href="#普通的创建方式" class="headerlink" title="普通的创建方式"></a>普通的创建方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mono&lt;String&gt; helloWorld = Mono.just(<span class="string">"Hello World"</span>);</span><br><span class="line">Flux&lt;String&gt; fewWords = Flux.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>);</span><br><span class="line">Flux&lt;String&gt; manyWords = Flux.fromIterable(words);</span><br></pre></td></tr></table></figure><p>这样的创建方式在什么时候用呢？一般是用在经过一系列 <strong>非IO型</strong> 操作之后，得到了一个对象。接下来要基于这个对象运用 <code>Reactor</code> 进行 <strong>高性能</strong> 的 <code>IO</code> 操作时，可以用这种方式将之前得到的对象转换为 <code>Mono</code> 或 <code>Flux</code>。</p><h4 id="文艺的创建方式"><a href="#文艺的创建方式" class="headerlink" title="文艺的创建方式"></a>文艺的创建方式</h4><p>上面是通过一个 <strong>同步调用</strong> 得到的结果创建出 <code>Mono</code> 或 <code>Flux</code>，但有时需要从一个 <strong>非</strong> <code>Reactive</code> 的 <strong>异步调用</strong> 的结果创建出 <code>Mono</code> 或 <code>Flux</code>。</p><p>如果这个 <strong>异步方法</strong> 返回一个 <code>CompletableFuture</code>，那可以基于这个  <code>CompletableFuture</code> 创建一个 <code>Mono</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mono.fromFuture(completableFuture);</span><br></pre></td></tr></table></figure><p>如果这个 <strong>异步调用</strong> 不会返回   <code>CompletableFuture</code>，是有自己的 <strong>回调方法</strong>，那怎么创建 <code>Mono</code> 呢？可以使用 <code>static &lt;T&gt; Mono&lt;T&gt; create(Consumer&lt;MonoSink&lt;T&gt;&gt; callback)</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Mono.create(sink -&gt; &#123;</span><br><span class="line">    ListenableFuture&lt;ResponseEntity&lt;String&gt;&gt; entity = asyncRestTemplate.getForEntity(url, String.class);</span><br><span class="line">    entity.addCallback(<span class="keyword">new</span> ListenableFutureCallback&lt;ResponseEntity&lt;String&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(ResponseEntity&lt;String&gt; result)</span> </span>&#123;</span><br><span class="line">            sink.success(result.getBody());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable ex)</span> </span>&#123;</span><br><span class="line">            sink.error(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在使用 <code>WebFlux</code> 之后，<code>AsyncRestTemplate</code> 已经不推荐使用，这里只是做演示。</p><h3 id="2-处理-Mono-和-Flux（中间阶段）"><a href="#2-处理-Mono-和-Flux（中间阶段）" class="headerlink" title="2. 处理 Mono 和 Flux（中间阶段）"></a>2. 处理 Mono 和 Flux（中间阶段）</h3><p>中间阶段的 <code>Mono</code> 和 <code>Flux</code> 的方法主要有 <code>filter</code>、<code>map</code>、<code>flatMap</code>、<code>then</code>、<code>zip</code>、<code>reduce</code> 等。这些方法使用方法和 <code>Stream</code> 中的方法类似。</p><p>下面举几个 <code>Reactor</code> 开发实际项目的问题，帮大家理解这些方法的使用场景：</p><h4 id="问题一-map、flatMap-和-then-在什么时候使用"><a href="#问题一-map、flatMap-和-then-在什么时候使用" class="headerlink" title="问题一: map、flatMap 和 then 在什么时候使用"></a>问题一: map、flatMap 和 then 在什么时候使用</h4><p>本段内容将涉及到如下类和方法：</p><ul><li><strong>方法</strong>：<code>Mono.map()</code></li><li><strong>方法</strong>：<code>Mono.flatMap()</code></li><li><strong>方法</strong>：<code>Mono.then()</code></li><li><strong>类</strong>：<code>Function</code></li></ul><p>在 <code>Mono</code> 和 <code>Flux</code> <strong>中间环节</strong>的处理过程中，有三个有些类似的方法：<code>map()</code>、<code>flatMap()</code> 和 <code>then()</code>。这三个方法的使用频率很高。</p><ul><li><strong>传统的命令式编程</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object result1 = doStep1(params);</span><br><span class="line">Object result2 = doStep2(result1);</span><br><span class="line">Object result3 = doStep3(result2);</span><br></pre></td></tr></table></figure><ul><li><strong>对应的反应式编程</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mono.just(params)</span><br><span class="line">    .flatMap(v -&gt; doStep1(v))</span><br><span class="line">    .flatMap(v -&gt; doStep2(v))</span><br><span class="line">    .flatMap(v -&gt; doStep3(v));</span><br></pre></td></tr></table></figure><p>从上面两段代码的对比就可以看出来 <code>flatMap()</code> 方法在其中起到的作用，<code>map()</code> 和 <code>then()</code> 方法也有类似的作用。但这些方法之间的区别是什么呢？我们先来看看这三个方法的签名（以 <code>Mono</code> 为例）：</p><ul><li>flatMap(Function&lt;? super T, ? extends Mono&lt;? extends R&gt;&gt; transformer)</li><li>map(Function&lt;? super T, ? extends R&gt; mapper)</li><li>then(Mono<v> other)</v></li></ul><h5 id="then"><a href="#then" class="headerlink" title="then()"></a>then()</h5><p><code>then()</code> 看上去是下一步的意思，但它只表示执行顺序的下一步，不表示下一步依赖于上一步。<code>then()</code> 方法的参数只是一个 <code>Mono</code>，无从接受上一步的执行结果。而 <code>flatMap()</code> 和 <code>map()</code> 的参数都是一个 <code>Function</code>，入参是上一步的执行结果。</p><h5 id="flatMap-和-map"><a href="#flatMap-和-map" class="headerlink" title="flatMap() 和 map()"></a>flatMap() 和 map()</h5><p><code>flatMap()</code> 和 <code>map()</code> 的区别在于，<code>flatMap()</code> 中的入参 <code>Function</code> 的返回值要求是一个 <code>Mono</code> 对象，而 <code>map</code> 的入参 <code>Function</code> 只要求返回一个 <strong>普通对象</strong>。在业务处理中常需要调用 <code>WebClient</code> 或 <code>ReactiveXxxRepository</code> 中的方法，这些方法的 <strong>返回值</strong> 都是 <code>Mono</code>（或 <code>Flux</code>）。所以要将这些调用串联为一个整体 <strong>链式调用</strong>，就必须使用 <code>flatMap()</code>，而不是 <code>map()</code>。</p><h4 id="问题二：如何实现并发执行"><a href="#问题二：如何实现并发执行" class="headerlink" title="问题二：如何实现并发执行"></a>问题二：如何实现并发执行</h4><p>本段内容将涉及到如下类和方法：</p><ul><li><strong>方法</strong>：<code>Mono.zip()</code></li><li><strong>类</strong>：<code>Tuple2</code></li><li><strong>类</strong>：<code>BiFunction</code></li></ul><p><strong>并发执行</strong> 是常见的一个需求。<code>Reactive Programming</code> 虽然是一种 <strong>异步编程</strong> 方式，但是 <strong>异步</strong> 不代表就是 <strong>并发并行</strong> 的。</p><p>在 <strong>传统的命令式编程</strong> 中，<strong>并发执行</strong> 是通过 <strong>线程池</strong> 加 <code>Future</code> 的方式实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;Result1&gt; result1Future = threadPoolExecutor.submit(() -&gt; doStep1(params));</span><br><span class="line">Future&lt;Result2&gt; result2Future = threadPoolExecutor.submit(() -&gt; doStep2(params));</span><br><span class="line"><span class="comment">// Retrive result</span></span><br><span class="line">Result1 result1 = result1Future.get();</span><br><span class="line">Result2 result2 = result2Future.get();</span><br><span class="line"><span class="comment">// Do merge;</span></span><br><span class="line"><span class="keyword">return</span> mergeResult;</span><br></pre></td></tr></table></figure><p>上面的代码虽然实现了 <strong>异步调用</strong>，但 <code>Future.get()</code> 方法是 <strong>阻塞</strong> 的。在使用 <code>Reactor</code> 开发有 <strong>并发</strong> 执行场景的 <strong>反应式代码</strong> 时，不能用上面的方式。</p><p>这时应该使用 <code>Mono</code> 和 <code>Flux</code> 中的 <code>zip()</code> 方法，以 <code>Mono</code> 为例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Mono&lt;CustomType1&gt; item1Mono = ...;</span><br><span class="line">Mono&lt;CustomType2&gt; item2Mono = ...;</span><br><span class="line">Mono.zip(items -&gt; &#123;</span><br><span class="line">    CustomType1 item1 = CustomType1.class.cast(items[<span class="number">0</span>]);</span><br><span class="line">    CustomType2 item2 = CustomType2.class.cast(items[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// Do merge</span></span><br><span class="line">    <span class="keyword">return</span> mergeResult;</span><br><span class="line">&#125;, item1Mono, item2Mono);</span><br></pre></td></tr></table></figure><p>上述代码中，产生 <code>item1Mono</code> 和 <code>item2Mono</code> 的过程是 <strong>并行</strong> 的。比如，调用一个 <code>HTTP</code> 接口的同时，执行一个 <strong>数据库查询</strong> 操作。这样就可以加快程序的执行。</p><p>但上述代码存在一个问题，就是 <code>zip()</code> 方法需要做 <strong>强制类型转换</strong>。而强制类型转换是 <strong>不安全</strong>的。好在 <code>zip()</code> 方法存在 <strong>多种重载</strong> 形式。除了最基本的形式以外，还有多种 <strong>类型安全</strong> 的形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T1, T2&gt; Mono&lt;Tuple2&lt;T1, T2&gt;&gt; zip(Mono&lt;? extends T1&gt; p1, Mono&lt;? extends T2&gt; p2);</span><br><span class="line"><span class="keyword">static</span> &lt;T1, T2, O&gt; <span class="function">Mono&lt;O&gt; <span class="title">zip</span><span class="params">(Mono&lt;? extends T1&gt; p1, Mono&lt;? extends T2&gt; p2, BiFunction&lt;? <span class="keyword">super</span> T1, ? <span class="keyword">super</span> T2, ? extends O&gt; combinator)</span></span>; </span><br><span class="line"><span class="keyword">static</span> &lt;T1, T2, T3&gt; Mono&lt;Tuple3&lt;T1, T2, T3&gt;&gt; zip(Mono&lt;? extends T1&gt; p1, Mono&lt;? extends T2&gt; p2, Mono&lt;? extends T3&gt; p3);</span><br></pre></td></tr></table></figure><p>对于不超过 <code>7</code> 个元素的合并操作，都有 <strong>类型安全</strong> 的 <code>zip()</code> 方法可选。以两个元素的合并为例，介绍一下使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mono.zip(item1Mono, item2Mono).map(tuple -&gt; &#123;</span><br><span class="line">    CustomType1 item1 = tuple.getT1();</span><br><span class="line">    CustomType2 item2 = tuple.getT2();</span><br><span class="line">    <span class="comment">// Do merge</span></span><br><span class="line">    <span class="keyword">return</span> mergeResult;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述代码中，<code>map()</code> 方法的参数是一个 <code>Tuple2</code>，表示一个 <strong>二元数组</strong>，相应的还有 <code>Tuple3</code>、<code>Tuple4</code> 等。</p><p>对于两个元素的并发执行，也可以通过 <code>zip(Mono&lt;? extends T1&gt; p1, Mono&lt;? extends T2&gt; p2, BiFunction&lt;? super T1, ? super T2, ? extends O&gt; combinator)</code> 方法直接将结果合并。方法是传递 <code>BiFunction</code> 实现 <strong>合并算法</strong>。</p><h4 id="问题三：集合循环之后的汇聚"><a href="#问题三：集合循环之后的汇聚" class="headerlink" title="问题三：集合循环之后的汇聚"></a>问题三：集合循环之后的汇聚</h4><p>本段内容将涉及到如下类和方法：</p><ul><li><strong>方法</strong>：<code>Flux.fromIterable()</code></li><li><strong>方法</strong>：<code>Flux.reduce()</code></li><li><strong>类</strong>：<code>BiFunction</code></li></ul><p>另外一个稍微复杂的场景，对一个对象中的一个类型为集合类的（<code>List</code> 、<code>Set</code>）进行处理之后，再对原本的对象进行处理。使用 <strong>迭代器模式</strong> 的代码很容易编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;SubData&gt; subDataList = data.getSubDataList();</span><br><span class="line"><span class="keyword">for</span> (SubData item : subDataList) &#123;</span><br><span class="line">    <span class="comment">// Do something on data and item</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Do something on data</span></span><br></pre></td></tr></table></figure><p>当我们要用 <code>Reactive</code> 风格的代码实现上述逻辑时，就不是那么简单了。这里会用到 <code>Flux</code> 的 <code>reduce()</code> 方法。<code>reduce()</code> 方法的签名如下：</p><ul><li><code>&lt;A&gt; Mono&lt;A&gt; reduce(A initial, BiFunction&lt;A, ? super T, A&gt; accumulator);</code></li></ul><p>可以看出，<code>reduce()</code> 方法的功能是将一个 <code>Flux</code> <strong>聚合</strong> 成一个 <code>Mono</code>。</p><ul><li><p><strong>第一个参数</strong>: 返回值 <code>Mono</code> 中元素的 <strong>初始值</strong>。</p></li><li><p><strong>第二个参数</strong>: 是一个 <code>BiFunction</code>，用来实现 <strong>聚合操作</strong> 的逻辑。对于泛型参数 <code>&lt;A, ? super T, A&gt;</code> 中：</p><ul><li>第一个 <code>A</code>: 表示每次 <strong>聚合操作</strong> 之后的 <strong>结果的类型</strong>，它作为 <code>BiFunction.apply()</code> 方法的 <strong>第一个入参</strong>；</li><li>第二个 <code>? super T</code>: 表示集合中的每个元素的类型，它作为 <code>BiFunction.apply()</code> 方法的 <strong>第二个入参</strong>；</li><li>第三个 <code>A</code>: 表示聚合操作的 <strong>结果</strong>，它作为 <code>BiFunction.apply()</code> 方法的 <strong>返回值</strong>。</li></ul></li></ul><p>接下来看一下示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Data initData = ...;</span><br><span class="line">List&lt;SubData&gt; list = ...;</span><br><span class="line">Flux.fromIterable(list)</span><br><span class="line">    .reduce(initData, (data, itemInList) -&gt; &#123;</span><br><span class="line">        <span class="comment">// Do something on data and itemInList</span></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>上面的示例代码中，<code>initData</code> 和 <code>data</code> 的类型相同。执行完上述代码之后，<code>reduce()</code> 方法会返回  <code>Mono&lt;Data&gt;</code>。</p><h3 id="3-消费-Mono-和-Flux（结束阶段）"><a href="#3-消费-Mono-和-Flux（结束阶段）" class="headerlink" title="3. 消费 Mono 和 Flux（结束阶段）"></a>3. 消费 Mono 和 Flux（结束阶段）</h3><p>直接消费的 <code>Mono</code> 或 <code>Flux</code> 的方式就是调用 <code>subscribe()</code> 方法。如果在 <code>WebFlux</code> 接口中开发，直接返回 <code>Mono</code> 或 Flux 即可。<code>WebFlux</code> 框架会完成最后的 <code>Response</code> 输出工作。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文介绍了反应式编程的一些概念和 <code>Spring Reactor</code> 框架的基本用法，还介绍了如何用 <code>Reactor</code> 解决一些稍微复杂一点的问题。<code>Reactor</code> 在 <code>Spring 5</code> 中有大量的应用，后面会给大家分享一些 <code>Spring Reactor</code> 实战系列的博客。</p><hr><p>欢迎关注技术公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;为了应对 &lt;strong&gt;高并发环境下&lt;/strong&gt; 的服务端编程，微软提出了一个实现 &lt;strong&gt;异步编程&lt;/strong&gt; 的方案 -  &lt;code&gt;Reactive Programming&lt;/code&gt;，中文名称 &lt;strong&gt;反应式编程&lt;/strong&gt;。随后，其它技术也迅速地跟上了脚步，像 &lt;code&gt;ES6&lt;/code&gt; 通过 &lt;code&gt;Promise&lt;/code&gt; 引入了类似的异步编程方式。&lt;code&gt;Java&lt;/code&gt; 社区也没有落后很多，&lt;code&gt;Netflix&lt;/code&gt; 和 &lt;code&gt;TypeSafe&lt;/code&gt; 公司提供了 &lt;code&gt;RxJava&lt;/code&gt; 和 &lt;code&gt;Akka Stream&lt;/code&gt; 技术，让 &lt;code&gt;Java&lt;/code&gt; 平台也有了能够实现反应式编程的框架。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Reactive编程系列" scheme="https://ostenant.coding.me/categories/Spring-Reactive%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Reactive Streams" scheme="https://ostenant.coding.me/tags/Reactive-Streams/"/>
    
      <category term="Spring WebFlux" scheme="https://ostenant.coding.me/tags/Spring-WebFlux/"/>
    
      <category term="Reactor" scheme="https://ostenant.coding.me/tags/Reactor/"/>
    
  </entry>
  
  <entry>
    <title>Android异步框架RxJava 1.x系列(三) - 线程调度器Scheduler</title>
    <link href="https://ostenant.coding.me/2018/05/23/Android%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6RxJava%201.x%E7%B3%BB%E5%88%97(%E4%B8%89)%20-%20%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%08Scheduler/"/>
    <id>https://ostenant.coding.me/2018/05/23/Android异步框架RxJava 1.x系列(三) - 线程调度器Scheduler/</id>
    <published>2018-05-23T12:22:00.000Z</published>
    <updated>2018-05-23T15:41:32.662Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>RxJava</code> 事件的发出和消费都在同一个线程，基于同步的观察者模式。观察者模式的核心是后台处理，前台回调的异步机制。要实现异步，需要引入 <code>RxJava</code> 的另一个概念 - 线程调度器 <code>Scheduler</code>。</p><a id="more"></a><p><img src="http://ols3fdyll.bkt.clouddn.com/RXjava_logo.jpeg" alt=""></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>在不指定线程的情况下，<code>RxJava</code> 遵循的是线程不变的原则。即在哪个线程调用 <code>subscribe()</code> 方法，就在哪个线程生产事件；在哪个线程生产事件，就在哪个线程消费事件。如果需要切换线程，就需要用到线程调度器 <code>Scheduler</code>。</p><h3 id="1-几种Scheduler介绍"><a href="#1-几种Scheduler介绍" class="headerlink" title="1. 几种Scheduler介绍"></a>1. 几种Scheduler介绍</h3><p>在 <code>RxJava</code> 中，<code>Scheduler</code> - 调度器，相当于线程控制器，<code>RxJava</code> 通过它来指定每一段代码应该运行在什么样的线程。<code>RxJava</code> 已经内置了几个 <code>Scheduler</code> ，它们已经适合大多数的使用场景：</p><ul><li><strong>Schedulers.immediate()</strong></li></ul><p>直接在当前线程运行，相当于不指定线程。这是默认的 <code>Scheduler</code>。</p><ul><li><strong>Schedulers.newThread()</strong></li></ul><p>总是启用新线程，并在新线程执行操作。</p><ul><li><strong>Schedulers.io()</strong></li></ul><p><code>I/O</code> 操作（读写文件、读写数据库、网络信息交互等）所使用的 <code>Scheduler</code>。行为模式和 <code>newThread()</code> 差不多，区别在于 <code>io()</code> 内部采用的是一个无数量上限的线程池，可以重用空闲的线程。因此多数情况下 <code>io()</code> 比 <code>newThread()</code> 更有效率。</p><blockquote><p>注意：不要把计算任务放在 <code>io()</code> 中，可以避免创建不必要的线程。</p></blockquote><ul><li><strong>Schedulers.computation()</strong> </li></ul><p>计算任务所使用的 <code>Scheduler</code>。这个计算指的是 <code>CPU</code> 密集型计算，即不会被 <code>I/O</code> 等操作限制性能的操作，例如图形的计算。这个 <code>Scheduler</code> 使用的固定的线程池，大小为 <code>CPU</code> 核数。</p><blockquote><p>注意：不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</p></blockquote><ul><li><strong>AndroidSchedulers.mainThread()</strong></li></ul><p><code>Android</code> 还有一个专用的 <code>AndroidSchedulers.mainThread()</code>，它指定的操作将在 <code>Android</code> 主线程运行。</p><h3 id="2-Scheduler的线程切换"><a href="#2-Scheduler的线程切换" class="headerlink" title="2. Scheduler的线程切换"></a>2. Scheduler的线程切换</h3><h4 id="2-1-单次线程切换"><a href="#2-1-单次线程切换" class="headerlink" title="2.1. 单次线程切换"></a>2.1. 单次线程切换</h4><p>有了这几个 <code>Scheduler</code>，就可以使用 <code>subscribeOn()</code> 和 <code>observeOn()</code> 两个方法来对线程进行控制了。 </p><ul><li><p><code>subscribeOn()</code>: 指定 <code>subscribe()</code> 所发生的线程，即 <code>Observable.OnSubscribe</code> 被激活时所处的线程，或者叫做<strong>事件产生</strong>的线程。 </p></li><li><p><code>observeOn()</code>: 指定 <code>Subscriber</code> 所运行在的线程，或者叫做<strong>事件消费</strong>的线程。</p></li></ul><p>直接看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    .subscribeOn(Schedulers.io()) <span class="comment">// 指定 subscribe() 发生在 IO 线程</span></span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 指定 Subscriber 的回调发生在主线程</span></span><br><span class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer number)</span> </span>&#123;</span><br><span class="line">            Log.d(tag, <span class="string">"number:"</span> + number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>上面这段代码中，由于 <code>subscribeOn(Schedulers.io())</code> 的指定，被创建的事件的内容 <code>1</code>、<code>2</code>、<code>3</code>、<code>4</code> 将会在 <code>IO</code> <strong>线程</strong>发出；由于 <code>observeOn(AndroidScheculers.mainThread())</code> 的指定，因此 <code>subscriber</code> 数字的打印将发生在<strong>主线程</strong>。</p><p>事实上，这种使用方式非常常见，它适用于多数的 『<strong>后台线程取数据，主线程显示</strong>』的程序策略。</p><p>以下是一个完整的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> drawableRes = ...;</span><br><span class="line">ImageView imageView = ...;</span><br><span class="line">Observable.create(<span class="keyword">new</span> OnSubscribe&lt;Drawable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Drawable&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        Drawable drawable = getTheme().getDrawable(drawableRes));</span><br><span class="line">        subscriber.onNext(drawable);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 指定事件发出，即图片读取发生在 IO 线程</span></span><br><span class="line">.subscribeOn(Schedulers.io())</span><br><span class="line"><span class="comment">// 指定事件消费 - 回调，即页面图片渲染发生在主线程</span></span><br><span class="line">.observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">.subscribe(<span class="keyword">new</span> Observer&lt;Drawable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Drawable drawable)</span> </span>&#123;</span><br><span class="line">        imageView.setImageDrawable(drawable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(activity, <span class="string">"Error!"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样的好处是，加载图片的过程发生在 <code>IO</code> <strong>线程</strong>，而设置图片则发生在了<strong>主线程</strong>。这就意味着，即使加载图片耗费了几十甚至几百毫秒的时间，也不会造成界面上的丝毫卡顿。</p><h4 id="2-2-多次线程切换"><a href="#2-2-多次线程切换" class="headerlink" title="2.2. 多次线程切换"></a>2.2. 多次线程切换</h4><p>上面介绍到可以利用 <code>subscribeOn()</code> 结合 <code>observeOn()</code> 来实现线程控制，让事件的产生和消费发生在不同的线程。在了解了 <code>map()</code> 和 <code>flatMap()</code> 等变换方法后，一个问题就产生了 - 能不能多切换几次线程？</p><p>因为 <code>observeOn()</code> 指定的是 <code>Subscriber</code> 的线程，而这个 <code>Subscriber</code> 并不是 <code>subscribe()</code> 参数中的 <code>Subscriber</code> ，而是 <code>observeOn()</code> 执行时，当前 <code>Observable</code> 所对应的 <code>Subscriber</code>，即它的直接下级 <code>Subscriber</code>。</p><blockquote><p>也就是说，observeOn() 指定的是它之后的操作所在的线程。因此如果有多次切换线程的需求，只要在每个想要切换线程的位置调用一次 observeOn() 即可。</p></blockquote><p>直接查看示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) </span><br><span class="line">    <span class="comment">// 事件发出的 IO 线程，由 subscribeOn() 指定</span></span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    <span class="comment">// 新线程，由 observeOn() 指定</span></span><br><span class="line">    .observeOn(Schedulers.newThread())</span><br><span class="line">    .map(mapOperator) </span><br><span class="line">    <span class="comment">// IO 线程，由 observeOn() 指定</span></span><br><span class="line">    .observeOn(Schedulers.io())</span><br><span class="line">    .map(mapOperator2) </span><br><span class="line">    <span class="comment">// Android 主线程，由 observeOn() 指定</span></span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread)</span><br><span class="line">    .subscribe(subscriber);</span><br></pre></td></tr></table></figure><p>上面的代码，通过 <code>observeOn()</code> 的多次调用，程序实现了线程的多次切换。不过，不同于 <code>observeOn()</code>的是，<code>subscribeOn()</code> 的位置放在哪里都可以，但它是只能调用一次的。</p><h2 id="3-Scheduler的实现原理"><a href="#3-Scheduler的实现原理" class="headerlink" title="3. Scheduler的实现原理"></a>3. Scheduler的实现原理</h2><p>其实，<code>subscribeOn()</code> 和 <code>observeOn()</code> 的内部实现，也是用的 <code>lift()</code> (见上文)，具体看图（不同颜色的箭头表示不同的线程）：</p><ul><li><strong>subscribeOn()的原理图</strong></li></ul><p><img src="http://ols3fdyll.bkt.clouddn.com/RxJava1_200.jpg" alt=""></p><p>从图中可以看出，<code>subscribeOn()</code> 进行了线程切换的工作（图中的 <code>schedule...</code> 的位置）。</p><p><code>subscribeOn()</code> 的线程切换发生在 <code>OnSubscribe</code> 中，即在它<strong>通知上一级</strong> <code>OnSubscribe</code> 时，这时事件还没有开始发送，因此 <code>subscribeOn()</code> 的线程控制只能在<strong>事件发出的开端</strong>造成影响，即只允许一次线程切换。</p><ul><li><strong>observeOn()的原理图</strong></li></ul><p><img src="http://ols3fdyll.bkt.clouddn.com/RxJava1_210.jpg" alt=""></p><p>从图中可以看出，和 <code>observeOn()</code> 进行了线程切换的工作（图中的 <code>schedule...</code> 的位置）。</p><p><code>observeOn()</code> 的线程切换则发生在它内建的 <code>Subscriber</code> 中，即发生在它即将给<strong>下一级</strong> <code>Subscriber</code> 发送事件时，因此 <code>observeOn()</code> 控制的是它<strong>后面</strong>的线程，允许多次线程切换。</p><ul><li><strong>混合切换原理图</strong></li></ul><p>最后用一张图来解释当多个 <code>subscribeOn()</code> 和 <code>observeOn()</code> 混合使用时，线程调度是怎么发生的：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/RxJava1_211.jpg" alt=""></p><p>图中共有 <code>5</code> 处对事件的操作，由图中可以看出: </p><ol><li><p>① 和 ② 两处受第一个 <code>subscribeOn()</code> 影响，运行在<strong>红色线程</strong>；</p></li><li><p>③ 和 ④ 处受第一个 <code>observeOn()</code> 的影响，运行在<strong>绿色线程</strong>；</p></li><li><p>⑤ 处受第二个 <code>onserveOn()</code> 影响，运行在<strong>紫色线程</strong>；</p></li><li><p>而第二个 <code>subscribeOn()</code> ，由于在<strong>通知过程</strong>中线程就被第一个 <code>subscribeOn()</code> 截断，因此对整个流程并没有任何影响。</p></li></ol><blockquote><p>注意：当使用了多个 subscribeOn() 的时候，只有第一个 subscribeOn() 起作用。</p></blockquote><h2 id="4-延伸拓展"><a href="#4-延伸拓展" class="headerlink" title="4. 延伸拓展"></a>4. 延伸拓展</h2><p>虽然超过一个的 <code>subscribeOn()</code> 对事件处理的流程没有影响，但在<strong>流程之前</strong>却是有用的。在前面的文章介绍 <code>Subscriber</code> 的时候，提到过 <code>Subscriber</code> 的 <code>onStart()</code> 可以用作流程开始前的<strong>初始化处理</strong>。</p><blockquote><p>由于 onStart() 在 subscribe() 发生时就被调用了，因此不能指定线程，而是只能执行在 subscribe() 被调用时的线程。这就导致如果 onStart() 中含有对线程有要求的代码（例如：在界面上显示一个 ProgressBar，这必须在主线程执行），将会有线程非法的风险，因为无法预测 subscribe() 会在什么线程执行。</p></blockquote><p>与 <code>Subscriber.onStart()</code> 相对应的，有一个方法 <code>Observable.doOnSubscribe()</code>。它和 <code>Subscriber.onStart()</code> 同样是在 <code>subscribe()</code> <strong>调用后</strong>而且<strong>在事件发送前</strong>执行，但区别在于它可以指定线程。默认情况下，<code>doOnSubscribe()</code> 执行在 <code>subscribe()</code> 发生的线程；而如果在 <code>doOnSubscribe()</code> 之后有 <code>subscribeOn()</code> 的话，它将执行在离它最近的 <code>subscribeOn()</code> 所指定的线程。</p><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(onSubscribe)</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .doOnSubscribe(<span class="keyword">new</span> Action0() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 需要在主线程执行</span></span><br><span class="line">            progressBar.setVisibility(View.VISIBLE); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribeOn(AndroidSchedulers.mainThread()) </span><br><span class="line">    <span class="comment">// 指定主线程</span></span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(subscriber);</span><br></pre></td></tr></table></figure><p>上面的代码，在 <code>doOnSubscribe()</code> 的后面跟一个 <code>subscribeOn()</code> ，就能指定特定工作的线程了！</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><code>RxJava</code> 的提供的各种事件及事件转换模型，以及基于转换的线程调度器，结合观察者模式，使得 <code>RxJava</code> 在异步编程体验、灵活性和运行效率上领先于其他的开源框架！</p><hr><p>欢迎关注技术公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;RxJava&lt;/code&gt; 事件的发出和消费都在同一个线程，基于同步的观察者模式。观察者模式的核心是后台处理，前台回调的异步机制。要实现异步，需要引入 &lt;code&gt;RxJava&lt;/code&gt; 的另一个概念 - 线程调度器 &lt;code&gt;Scheduler&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="RxJava异步框架系列" scheme="https://ostenant.coding.me/categories/RxJava%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Android" scheme="https://ostenant.coding.me/tags/Android/"/>
    
      <category term="RxJava" scheme="https://ostenant.coding.me/tags/RxJava/"/>
    
      <category term="异步" scheme="https://ostenant.coding.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Android异步框架RxJava 1.x系列(二) - 事件及事件序列转换原理</title>
    <link href="https://ostenant.coding.me/2018/05/21/Android%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6RxJava%201.x%E7%B3%BB%E5%88%97(%E4%BA%8C)%20-%20%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BA%8B%E4%BB%B6%E5%BA%8F%E5%88%97%E8%BD%AC%E6%8D%A2%E5%8E%9F%E7%90%86/"/>
    <id>https://ostenant.coding.me/2018/05/21/Android异步框架RxJava 1.x系列(二) - 事件及事件序列转换原理/</id>
    <published>2018-05-21T11:14:00.000Z</published>
    <updated>2018-05-21T15:30:10.905Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在介绍 <code>RxJava 1.x</code> 线程调度器之前，首先引入一个重要的概念 - 事件序列转换。<code>RxJava</code> 提供了对事件序列进行转换的支持，这是它的核心功能之一。</p><a id="more"></a><p><img src="http://ols3fdyll.bkt.clouddn.com/RXjava_logo.jpeg" alt=""></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-事件序列转换定义"><a href="#1-事件序列转换定义" class="headerlink" title="1. 事件序列转换定义"></a>1. 事件序列转换定义</h2><p>所谓转换，就是将事件序列中的对象或整个序列进行加工处理，转换成不同的事件或事件序列，有点类似 <code>Java 1.8</code> 中的流处理。</p><h2 id="2-事件序列转换API"><a href="#2-事件序列转换API" class="headerlink" title="2. 事件序列转换API"></a>2. 事件序列转换API</h2><p>首先看一个 <code>map()</code> 的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"images/logo.png"</span>) <span class="comment">// 输入类型 String</span></span><br><span class="line">    .map(<span class="keyword">new</span> Func1&lt;String, Bitmap&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(String filePath)</span> </span>&#123; <span class="comment">// 参数类型 String</span></span><br><span class="line">            <span class="keyword">return</span> getBitmapFromPath(filePath); <span class="comment">// 返回类型 Bitmap</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123; <span class="comment">// 参数类型 Bitmap</span></span><br><span class="line">            showBitmap(bitmap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>这里出现了一个叫 <code>Func1</code> 的类。它和 <code>Action1</code> 非常相似，也是 <code>RxJava</code> 的一个接口，用于包装含有<strong>一个参数</strong>的方法。 <code>Func1</code> 和 <code>Action</code> 的区别在于: <code>Func1</code> 包装的是<strong>有返回值</strong>的方法。另外，和 <code>ActionX</code> 一样，<code>FuncX</code> 也有多个，用于不同参数个数的方法。同理，<code>FuncX</code> 和 <code>ActionX</code> 的区别在 <code>FuncX</code> 包装的是有返回值的方法。</p><blockquote><p>可以看到，map() 方法将参数中的 String 对象转换成一个 Bitmap 对象后返回，而在经过 map() 方法后，事件的参数类型也由 String 转为了 Bitmap。</p></blockquote><p>这种直接转换对象并返回的，是最常见的也最容易理解的变换。不过 <code>RxJava</code> 的转换远不止这样，它不仅可以针对<strong>事件对象</strong>，还可以针对整个<strong>事件队列</strong>，这使得 <code>RxJava</code> 变得非常灵活。</p><p>下面给出几个示例：</p><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p><strong>事件对象</strong>的直接变换，具体功能上面已经介绍过。它是 <code>RxJava</code> 最常用的变换。 <code>map()</code> 的示意图如下：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Rxjava1_010.jpg" alt=""></p><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap()"></a>flatMap()</h3><p>这是一个很有用但非常难理解的变换。首先假设这么一种需求：假设有一个数据结构『学生』，现在需要打印出一组学生的名字。实现方式很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Student[] students = ...;</span><br><span class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Observable.from(students)</span><br><span class="line">    .map(<span class="keyword">new</span> Func1&lt;Student, String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> student.getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(subscriber);</span><br></pre></td></tr></table></figure><p>如果要打印出每个学生所需要修的所有课程的名称呢？需求的区别在于，每个学生只有一个名字，但却有多个课程，首先可以这样实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Student[] students = ...;</span><br><span class="line">Subscriber&lt;Student&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        List&lt;Course&gt; courses = student.getCourses();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; courses.size(); i++) &#123;</span><br><span class="line">            Course course = courses.get(i);</span><br><span class="line">            Log.d(tag, course.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Observable.from(students)</span><br><span class="line">    .subscribe(subscriber);</span><br></pre></td></tr></table></figure><p>如果我不想在 <code>Subscriber</code> 中使用 <code>for</code> 循环，而是希望 <code>Subscriber</code> 中直接传入单个的 <code>Course</code> 对象呢（这对于代码复用很重要）？用 <code>map()</code> 显然是不行的，因为 <code>map()</code> 是<strong>一对一</strong>的转化，而现在需要<strong>一对多</strong>的转化。问题出现了：怎样把一个 <code>Student</code> 转化成多个 <code>Course</code> ？</p><p>这个时候，<code>flatMap()</code> 就派上了用场：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Student[] students = ...;</span><br><span class="line">Subscriber&lt;Course&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Course&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Course course)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, course.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Observable.from(students)</span><br><span class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;Student, Observable&lt;Course&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;Course&gt; <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.from(student.getCourses());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(subscriber);</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出，<code>flatMap()</code> 和 <code>map()</code> 有一个相同点：它也是把传入的参数转化之后返回另一个对象。</p><p><code>flatMap()</code> 和 <code>map()</code> 不同的是，<code>flatMap()</code> 返回的是个 <code>Observable</code> 对象，并且这个 <code>Observable</code> 对象并不是被直接发送到 <code>Subscriber</code> 的回调方法中。</p><p><code>flatMap()</code> 示意图如下：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Rxjava1_011.jpg" alt=""></p><p><code>flatMap()</code> 的原理是这样的：</p><ol><li>使用传入的事件对象创建一个 <code>Observable</code> 对象；</li><li>并不立即发送这个 <code>Observable</code>, 而是将它激活，然后开始发送事件；</li><li>将每一个创建出来的 <code>Observable</code> 发送的事件，都被汇入同一个 <code>Observable</code>。</li></ol><p>而这个 <code>Observable</code> 负责将这些事件统一交给 <code>Subscriber</code> 的回调方法。这三个步骤，把事件拆成了<strong>两级</strong>，通过一组新创建的 <code>Observable</code> 将初始的对象『铺平』之后通过统一路径分发了下去。而这个『铺平』就是 <code>flatMap()</code> 所谓的 <code>flat</code>。</p><h2 id="3-事件序列转换原理"><a href="#3-事件序列转换原理" class="headerlink" title="3. 事件序列转换原理"></a>3. 事件序列转换原理</h2><p>这些转换虽然功能各有不同，但实质上都是针对<strong>事件序列的处理和再发送</strong>。而在 <code>RxJava</code> 的内部，它们是基于同一个基础的转换方法：<code>lift(Operator)</code>。</p><h3 id="lift"><a href="#lift" class="headerlink" title="lift()"></a>lift()</h3><p>首先看一下 <code>lift()</code> 的内部实现（核心代码）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R&gt; <span class="function">Observable&lt;R&gt; <span class="title">lift</span><span class="params">(Operator&lt;? extends R, ? <span class="keyword">super</span> T&gt; operator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> OnSubscribe&lt;R&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber subscriber)</span> </span>&#123;</span><br><span class="line">            Subscriber newSubscriber = operator.call(subscriber);</span><br><span class="line">            newSubscriber.onStart();</span><br><span class="line">            onSubscribe.call(newSubscriber);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码实现的功能，简单来说就是创建了一个新的 <code>Observable</code> 并返回。如果看过上篇博客会发现有些蹊跷。重温一下 <code>Observable.subscribe(Subscriber)</code> 的实现(核心代码)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Subscription <span class="title">subscribe</span><span class="params">(Subscriber subscriber)</span> </span>&#123;</span><br><span class="line">    subscriber.onStart();</span><br><span class="line">    onSubscribe.call(subscriber);</span><br><span class="line">    <span class="keyword">return</span> subscriber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比一下以上两段代码的方法体(忽略返回值)，会发现一行突兀的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Subscriber newSubscriber = operator.call(subscriber);</span><br></pre></td></tr></table></figure><p>解释一下 <code>lift()</code> 方法完成的操作：</p><ol><li><p>利用 <code>Observable.create()</code> 方法创建一个新的 <code>Observable</code> 对象，加上之前的原始 <code>Observable</code>，已经有两个 <code>Observable</code>。</p></li><li><p>创建 <code>Observable</code> 的同时创建一个新的 <code>OnSubscribe</code> 用于发出事件。</p></li><li><p>通过 <code>lift()</code> 传入的 <code>Operator</code> 函数的 <code>call()</code> 方法构造一个新的 <code>Subscriber</code> 对象，并将新 <code>Subscriber</code> 和原始 <code>Subscriber</code> 进行关联。</p></li><li><p>利用这个新 <code>Subscriber</code> 向原始 <code>Observable</code> 进行订阅，实现事件序列的转换。</p></li></ol><blockquote><p>这种实现基于代理模式，通过事件拦截和处理实现事件序列的变换。</p></blockquote><p>在 <code>Observable</code> 执行了 <code>lift(Operator)</code> 方法之后，会返回一个新的 <code>Observable</code>，这个新的 <code>Observable</code> 会像一个代理一样，负责接收原始的 <code>Observable</code> 发出的事件，并在处理后发送给 <code>Subscriber</code>。</p><p>整个过程的思维导图如下：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Rxjava1_013.jpg" alt=""></p><p>或者可以看动图：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Rxjava1_014.gif" alt=""></p><p>两次和多次的 <code>lift()</code> 同理，如下图：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Rxjava1_015.jpg" alt=""></p><p>举一个具体的 <code>Operator</code> 的实现。下面是一个将事件的 <code>Integer</code> 对象转换成 <code>String</code> 的例子，仅供参考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">observable.lift(<span class="keyword">new</span> Observable.Operator&lt;String, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Subscriber&lt;? <span class="keyword">super</span> Integer&gt; call(<span class="keyword">final</span> Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber) &#123;</span><br><span class="line">        <span class="comment">// 将事件序列中的 Integer 对象转换为 String 对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                subscriber.onNext(<span class="string">""</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                subscriber.onCompleted();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                subscriber.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>学习 lift() 的原理只是为了更好地理解 RxJava ，从而可以更好地使用它。然而RxJava 不建议开发者自定义 Operator 来直接使用 lift()，而是尽量使用已有的 lift() 包装方法（如 map() flatMap() 等）进行组合。</p></blockquote><h3 id="compose"><a href="#compose" class="headerlink" title="compose()"></a>compose()</h3><p>除了 <code>lift()</code> 之外，<code>Observable</code> 还有一个转方法叫做 <code>compose()</code>。它和 <code>lift()</code> 的区别在于，<code>lift()</code> 是针对<strong>事件项</strong>和<strong>事件序列</strong>的，而 <code>compose()</code> 是针对 <code>Observable</code> 自身进行转换。</p><p>举个例子，假设在程序中有多个 <code>Observable</code> 都需要应用一组相同的 <code>lift()</code> 进行转换，通常会这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">observable1.lift1()</span><br><span class="line">    .lift2()</span><br><span class="line">    .lift3()</span><br><span class="line">    .lift4()</span><br><span class="line">    .subscribe(subscriber1);</span><br><span class="line"></span><br><span class="line">observable2.lift1()</span><br><span class="line">    .lift2()</span><br><span class="line">    .lift3()</span><br><span class="line">    .lift4()</span><br><span class="line">    .subscribe(subscriber2);</span><br><span class="line"></span><br><span class="line">observable3.lift1()</span><br><span class="line">    .lift2()</span><br><span class="line">    .lift3()</span><br><span class="line">    .lift4()</span><br><span class="line">    .subscribe(subscriber3);</span><br><span class="line"></span><br><span class="line">observable4.lift1()</span><br><span class="line">    .lift2()</span><br><span class="line">    .lift3()</span><br><span class="line">    .lift4()</span><br><span class="line">    .subscribe(subscriber1);</span><br></pre></td></tr></table></figure><p>可以发现有太多重复代码，代码重构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Observable <span class="title">liftAll</span><span class="params">(Observable observable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> observable.lift1()</span><br><span class="line">        .lift2()</span><br><span class="line">        .lift3()</span><br><span class="line">        .lift4();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">liftAll(observable1).subscribe(subscriber1);</span><br><span class="line">liftAll(observable2).subscribe(subscriber2);</span><br><span class="line">liftAll(observable3).subscribe(subscriber3);</span><br><span class="line">liftAll(observable4).subscribe(subscriber4);</span><br></pre></td></tr></table></figure><p>可读性、可维护性都提高了。可是 <code>Observable</code> 被一个方法包起来，这种方式对于 <code>Observale</code> 的灵活性进行了限制。怎么办？这个时候，就应该用 <code>compose()</code> 来解决了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiftAllTransformer</span> <span class="keyword">implements</span> <span class="title">Observable</span>.<span class="title">Transformer</span>&lt;<span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(Observable&lt;Integer&gt; observable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> observable.lift1()</span><br><span class="line">            .lift2()</span><br><span class="line">            .lift3()</span><br><span class="line">            .lift4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Transformer liftAll = <span class="keyword">new</span> LiftAllTransformer();</span><br><span class="line">observable1.compose(liftAll).subscribe(subscriber1);</span><br><span class="line">observable2.compose(liftAll).subscribe(subscriber2);</span><br><span class="line">observable3.compose(liftAll).subscribe(subscriber3);</span><br><span class="line">observable4.compose(liftAll).subscribe(subscriber4);</span><br></pre></td></tr></table></figure><p>如上，使用 <code>compose()</code> 方法，<code>Observable</code> 可以利用传入的 <code>Transformer</code> 对象的 <code>call</code> 方法直接对自身进行处理，而不是被包在方法的里面。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文主要介绍了 <code>RxJava</code> 事件及事件序列转换原理，其中 <code>lift()</code> 方法的使用方法和实现原理是重点、难点。后续将会介绍的 <code>RxJava</code> 线程调度器底层也是基于它实现的。</p><hr><p>欢迎关注技术公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在介绍 &lt;code&gt;RxJava 1.x&lt;/code&gt; 线程调度器之前，首先引入一个重要的概念 - 事件序列转换。&lt;code&gt;RxJava&lt;/code&gt; 提供了对事件序列进行转换的支持，这是它的核心功能之一。&lt;/p&gt;
    
    </summary>
    
      <category term="RxJava异步框架系列" scheme="https://ostenant.coding.me/categories/RxJava%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Android" scheme="https://ostenant.coding.me/tags/Android/"/>
    
      <category term="RxJava" scheme="https://ostenant.coding.me/tags/RxJava/"/>
    
      <category term="异步" scheme="https://ostenant.coding.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Android异步框架RxJava 1.x系列(一) - 观察者模式及实现</title>
    <link href="https://ostenant.coding.me/2018/05/20/Android%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6RxJava%201.x%E7%B3%BB%E5%88%97(%E4%B8%80)%20-%20%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <id>https://ostenant.coding.me/2018/05/20/Android异步框架RxJava 1.x系列(一) - 观察者模式及实现/</id>
    <published>2018-05-20T10:14:00.000Z</published>
    <updated>2018-05-21T15:28:22.014Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>RxJava</code> 是一款基于 <code>Java VM</code> 实现的响应式编程扩展库 - 基于观察者模式的异步和事件处理框架。<code>RxJava</code> 官方目前同时维护了两个版本，分别是 <code>1.x</code> 和 <code>2.x</code>，区别是它们使用不同的 <code>group id</code> 和 <code>namespaces</code>。</p><a id="more"></a><p> <img src="http://ols3fdyll.bkt.clouddn.com/RXjava_logo.jpeg" alt=""></p><table><thead><tr><th>版本</th><th style="text-align:left">group id</th><th style="text-align:left">namespaces</th></tr></thead><tbody><tr><td>v1.x</td><td style="text-align:left">io.reactivex</td><td style="text-align:left">io.reactivex</td></tr><tr><td>v2.x</td><td style="text-align:left">io.reactivex.rxjava2</td><td style="text-align:left">rx</td></tr></tbody></table><p>本系列的文章将针对 <code>RxJava 1.x</code> 进行介绍，先给出 <code>Github</code> 的地址：</p><ul><li>RxJava：<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">https://github.com/ReactiveX/RxJava</a></li><li>RxAndroid：<a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="noopener">https://github.com/ReactiveX/RxAndroid</a></li></ul><p>通过 Gradle 引入相关依赖：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxjava:1.0.14'</span> </span><br><span class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxandroid:1.0.1'</span></span><br></pre></td></tr></table></figure><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-RxJava的定义"><a href="#1-RxJava的定义" class="headerlink" title="1. RxJava的定义"></a>1. RxJava的定义</h2><p>一个精准的解释如下：<code>RxJava</code> 是一个运行于 <code>Java VM</code> ，由可观测序列组成的，异步、基于事件的函数库。</p><h2 id="2-RxJava的优点"><a href="#2-RxJava的优点" class="headerlink" title="2. RxJava的优点"></a>2. RxJava的优点</h2><p>换句话说，『同样是做异步，为什么人们用它，而不用现成的 <code>AsyncTask</code> / <code>Handler</code> / <code>XXX</code> / … ？』</p><p>一个词：<strong>简洁</strong>。</p><p>异步操作很关键的一点是程序的简洁性，因为在调度过程比较复杂的情况下，异步代码经常会既难写也难被读懂。 <code>Android</code> 创造的 <code>AsyncTask 和Handler</code>，其实都是为了让异步代码更加简洁。RxJava 的优势也是简洁，但它的简洁的与众不同之处在于，随着程序逻辑变得越来越复杂，它依然能够保持简洁。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/rxjava1_001.jpg" alt=""></p><p>在 <code>Android</code> 开发中，假设有这样一个需求：界面上有一个自定义的视图 <code>imageCollectorView</code> ，它的作用是显示多张图片，并能使用 addImage(Bitmap) 方法来任意增加显示的图片。现在需要程序将一个给出的目录数组 <code>File[] folders</code> 中每个目录下的 <code>png</code> 图片都加载出来并显示在 <code>imageCollectorView</code> 中。</p><blockquote><p>注意: 由于读取图片的过程较为耗时，需要放在后台执行，而图片的显示则必须在 UI 线程执行。</p></blockquote><p>常用的实现方式有多种，这里给出其中一种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">for</span> (File folder : folders) &#123;</span><br><span class="line">            File[] files = folder.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file.getName().endsWith(<span class="string">".png"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">final</span> Bitmap bitmap = getBitmapFromFile(file);</span><br><span class="line">                    getActivity().runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            imageCollectorView.addImage(bitmap);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure><p>而如果使用 <code>RxJava</code>，实现方式是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Observable.from(folders)</span><br><span class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;File, Observable&lt;File&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;File&gt; <span class="title">call</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.from(file.listFiles());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .filter(<span class="keyword">new</span> Func1&lt;File, Boolean&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> file.getName().endsWith(<span class="string">".png"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .map(<span class="keyword">new</span> Func1&lt;File, Bitmap&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getBitmapFromFile(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">            imageCollectorView.addImage(bitmap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>可以发现，使用 RxJava 方式代码量明显大大增加，所谓简洁从何而来？</p><p>这里说的简洁是指的<strong>逻辑</strong>上的。观察一下你会发现，<code>RxJava</code> 的这个实现，是一条从上到下的链式调用，没有任何嵌套，这在逻辑的简洁性上是具有优势的。当需求变得复杂时，这种优势将更加明显（试想如果还要求只选取前 10 张图片，常规方式要怎么办？如果有更多这样那样的要求呢？再试想，在这一大堆需求实现完两个月之后需要改功能，当你翻回这里看到自己当初写下的那一片迷之缩进，你能保证自己将迅速看懂，而不是对着代码重新捋一遍思路？）。</p><p>另外，如果你的 <code>IDE</code> 是 <code>Android Studio</code>，其实每次打开某个 <code>Java</code> 文件的时候，你会看到被自动 <code>Lambda</code> 化的预览，这将让你更加清晰地看到程序逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observable.from(folders)</span><br><span class="line">    .flatMap((Func1) (folder) -&gt; &#123; Observable.from(file.listFiles()) &#125;)</span><br><span class="line">    .filter((Func1) (file) -&gt; &#123; file.getName().endsWith(<span class="string">".png"</span>) &#125;)</span><br><span class="line">    .map((Func1) (file) -&gt; &#123; getBitmapFromFile(file) &#125;)</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe((Action1) (bitmap) -&gt; &#123; imageCollectorView.addImage(bitmap) &#125;);</span><br></pre></td></tr></table></figure><p>所以，<code>RxJava</code> 有啥优点？就好在简洁，优点就是把复杂逻辑，通过函数式编程模型穿成一条线。</p><h2 id="3-观察者模式的扩展"><a href="#3-观察者模式的扩展" class="headerlink" title="3. 观察者模式的扩展"></a>3. 观察者模式的扩展</h2><p><code>RxJava</code> 的异步实现，是通过一种扩展的观察者模式来实现的。</p><h3 id="3-1-通用的观察者模式"><a href="#3-1-通用的观察者模式" class="headerlink" title="3.1. 通用的观察者模式"></a>3.1. 通用的观察者模式</h3><p>观察者模式面向的需求是：<code>A</code> 对象（观察者）对 <code>B</code> 对象（被观察者）的某种变化高度敏感，需要在 <code>B</code> 变化的一瞬间做出反应。</p><p>举个例子，新闻里喜闻乐见的警察抓小偷，警察需要在小偷伸手作案的时候实施抓捕。在这个例子里，警察是观察者，小偷是被观察者，警察需要时刻盯着小偷的一举一动，才能保证不会漏过任何瞬间。</p><p>程序的观察者模式略有不同，观察者不需要时刻盯着被观察者（例如 <code>A</code> 不需要每过 <code>2ms</code> 就检查一次 <code>B</code> 的状态），而是采用<strong>注册</strong>( <code>Register</code> )或者称为<strong>订阅</strong>(<code>Subscribe</code>)的方式，告诉被观察者：<strong>我需要你的某种状态，你要在它变化的时候通知我</strong>。 </p><blockquote><p>采取这样被动的观察方式，既省去了反复检索状态的资源消耗，也能够得到最高的反馈速度。</p></blockquote><p><code>Android</code> 开发中一个典型的例子是点击监听器 <code>OnClickListener</code> 。对设置 <code>OnClickListener</code> 来说，<code>View</code> 是<strong>被观察者</strong>，<code>OnClickListener</code> 是<strong>观察者</strong>，二者通过 <code>setOnClickListener()</code> 方法达成<strong>订阅关系</strong>。订阅之后用户点击按钮的瞬间，<code>Android Framework</code> 就会将点击事件发送给<strong>已注册</strong>的 <strong>OnClickListener</strong> 。</p><p><code>OnClickListener</code> 的观察者模式大致如下图：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Rxjava1_002.jpg" alt=""></p><p>如图所示，通过 <code>setOnClickListener()</code> 方法，<code>Button</code> 持有 <code>OnClickListener</code> 的引用（这一过程没有在图上画出）。当用户点击时，<code>Button</code> 自动调用 <code>OnClickListener</code> 的 <code>onClick()</code> 方法。</p><p>按照观察者模式抽象出来的各个概念：</p><ul><li>Button: 被观察者</li><li>OnClickListener: 观察者</li><li>setOnClickListener(): 订阅</li><li>onClick(): 事件处理</li></ul><p>就由专用的观察者模式转变成了通用的观察者模式，如下图：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Rxjava1_003.jpg" alt=""></p><h3 id="3-2-RxJava的观察者模式"><a href="#3-2-RxJava的观察者模式" class="headerlink" title="3.2. RxJava的观察者模式"></a>3.2. RxJava的观察者模式</h3><p><code>RxJava</code> 有四个基本概念：</p><ul><li>Observable: 可观察者，即被观察者</li><li>Observer: 观察者</li><li>Subscribe: 订阅</li><li>Event: 事件处理</li></ul><p><code>Observable</code> 和 <code>Observer</code> 通过 <code>subscribe()</code> 方法实现订阅关系，使得<code>Observable</code> 可以在需要的时候发出事件来通知 <code>Observer</code>。</p><p>与传统观察者模式不同，<code>RxJava</code> 的事件回调方法除了普通事件 <code>onNext()</code> （相当于 <code>onClick()</code>) 之外，还定义了两个特殊的事件：<code>onCompleted()</code> 和 <code>onError()</code>。</p><ul><li><strong>onCompleted(): 事件队列完结</strong></li></ul><p><code>RxJava</code> 不仅把每个事件单独处理，还会把它们看做一个队列。<code>RxJava</code>规定，当不会再有新的 <code>onNext()</code> 发出时，需要触发 <code>onCompleted()</code> 方法作为事件完成标志。</p><ul><li><strong>onError(): 事件队列异常</strong></li></ul><p>在事件处理过程中出异常时，<code>onError()</code> 会被触发，同时队列自动终止，不允许再有事件发出。</p><blockquote><p>在一个正确运行的事件序列中, onCompleted() 和 onError() 有且只有一个被调用，并且是事件序列中的最后一个执行。</p></blockquote><p><code>RxJava</code> 的观察者模式大致如下图：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Rxjava1_004.jpg" alt=""></p><h2 id="4-RxJava的基本使用"><a href="#4-RxJava的基本使用" class="headerlink" title="4. RxJava的基本使用"></a>4. RxJava的基本使用</h2><p>基于以上的概念，<code>RxJava</code> 的基本使用有 3 个步骤：</p><h3 id="4-1-创建Obsever"><a href="#4-1-创建Obsever" class="headerlink" title="4.1. 创建Obsever"></a>4.1. 创建Obsever</h3><p><code>Observer</code> 即观察者，它决定事件触发的时候将有怎样的行为。 <code>RxJava</code> 中的 <code>Observer</code> 接口的声明方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"Item: "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"Completed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"Error: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>除了 <code>Observer</code> 接口之外，<code>RxJava</code> 还内置了一个实现了 <code>Observer</code> 的抽象类：<code>Subscriber</code>。 <code>Subscriber</code> 对 <code>Observer</code> 接口进行了一些扩展，但他们的基本使用方式是完全一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"Item: "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"Completed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"Error: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实质上，在 <code>RxJava</code> 的 <code>subscribe</code> 过程中，<code>Observer</code> 也总是会先被转换成一个 <code>Subscriber</code> 再使用。所以如果你只想使用基本功能，选择 <code>Observer</code> 和 <code>Subscriber</code> 是完全一样的。它们的区别对于使用者来说主要有两点：</p><ul><li><strong>onStart()</strong></li></ul><p>这是 <code>Subscriber</code> 增加的方法。它会在 <code>subscribe</code> 刚开始，而事件还未发送之前被调用。可以用于做一些准备工作，例如数据的清零或重置。这是一个可选方法，默认情况下它的实现为空。</p><p>需要注意的是，如果对准备工作的线程有要求（例如: 弹出一个显示进度的对话框，这必须在主线程执行），<code>onStart()</code> 就不适用了。因为它总是在 <code>subscribe</code> 所发生的<strong>线程</strong>被调用，而不能<strong>指定线程</strong>。要在指定的线程来做准备工作，可以使用 <code>doOnSubscribe()</code> 方法，具体可以在后面的章节中看到。</p><ul><li><strong>unsubscribe()</strong></li></ul><p>这是 <code>Subscriber</code> 所实现的另一个接口 <code>Subscription</code> 的方法，用于<strong>取消订阅</strong>。在这个方法被调用后，<code>Subscriber</code> 将不再接收事件。一般在这个方法调用前，可以使用 <code>isUnsubscribed()</code> 先判断一下状态。 </p><p><code>unsubscribe()</code> 这个方法很重要，因为在 <code>subscribe()</code> 之后， <code>Observable</code> 会持有 Subscriber 的引用。这个引用如果不能及时被释放，将有<strong>内存泄露</strong>的风险。</p><p>注意：在不再使用的时候尽快在合适的地方（例如: <code>onPause()</code> 和 <code>onStop()</code> 等方法中）调用 <code>unsubscribe()</code> 来解除<strong>引用关系</strong>，以避免内存泄露的发生。</p><h3 id="4-2-创建Obsevable"><a href="#4-2-创建Obsevable" class="headerlink" title="4.2. 创建Obsevable"></a>4.2. 创建Obsevable</h3><h4 id="4-2-1-Obsevable-create"><a href="#4-2-1-Obsevable-create" class="headerlink" title="4.2.1. Obsevable.create()"></a>4.2.1. Obsevable.create()</h4><p><code>Observable</code> 即被观察者，它决定什么时候触发事件以及触发怎样的事件。 <code>RxJava</code> 使用 <code>create()</code> 方法来创建一个 <code>Observable</code> ，并为它定义事件触发规则。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Observable observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="string">"Hello"</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">"Hi"</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">"Aloha"</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到，这里传入了一个 <code>OnSubscribe</code> 对象作为参数。<code>OnSubscribe</code> 会被存储在返回的 <code>Observable</code> 对象中。</p><p>它的作用相当于一个计划表，当 <code>Observable</code> 被订阅的时候，<code>OnSubscribe</code> 的 <code>call()</code> 方法会自动被调用，<strong>事件序列</strong>就会依照设定依次触发（对于上面的代码，就是观察者<code>Subscriber</code> 将会被调用三次 <code>onNext()</code> 和一次 <code>onCompleted()</code>）。</p><p>这样，由<strong>被观察者</strong>调用了<strong>观察者</strong>的回调方法，就实现了由被观察者向观察者的<strong>事件传递</strong>，即观察者模式。</p><h4 id="4-2-2-Obsevable-just-T…"><a href="#4-2-2-Obsevable-just-T…" class="headerlink" title="4.2.2. Obsevable.just(T…)"></a>4.2.2. Obsevable.just(T…)</h4><p><code>create()</code> 方法是 <code>RxJava</code> 最基本的创建<strong>事件序列</strong>的方法。基于这个方法，<code>RxJava</code> 还提供了一些方法用于快捷创建事件队列，例如 <code>just()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Observable observable = Observable.just(<span class="string">"Hello"</span>, <span class="string">"Hi"</span>, <span class="string">"Aloha"</span>);</span><br><span class="line"><span class="comment">// 将会依次调用方法序列：onNext("Hello") -&gt; onNext("Hi") -&gt; onCompleted()</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-Obsevable-from-T-和from-Iterable-lt-extends-T-gt"><a href="#4-2-3-Obsevable-from-T-和from-Iterable-lt-extends-T-gt" class="headerlink" title="4.2.3. Obsevable.from(T[])和from(Iterable&lt;? extends T&gt;)"></a>4.2.3. Obsevable.from(T[])和from(Iterable&lt;? extends T&gt;)</h4><p>将传入的数组或 <code>Iterable</code> 拆分成具体对象后，依次发送给观察者，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] words = &#123;<span class="string">"Hello"</span>, <span class="string">"Hi"</span>, <span class="string">"Aloha"</span>&#125;;</span><br><span class="line">Observable observable = Observable.from(words);</span><br><span class="line"><span class="comment">// 将会依次调用方法序列：onNext("Hello") -&gt; onNext("Hi") -&gt; onCompleted()</span></span><br></pre></td></tr></table></figure><h3 id="4-3-Subscribe关联"><a href="#4-3-Subscribe关联" class="headerlink" title="4.3. Subscribe关联"></a>4.3. Subscribe关联</h3><p>创建了 <code>Observable</code> 和 <code>Observer</code> 之后，再用 <code>subscribe()</code> 方法将它们关联起来，整条链子就可以工作了。代码很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribe(observer);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">observable.subscribe(subscriber);</span><br></pre></td></tr></table></figure><p>可能会注意到，subscribe() 这个方法有点怪：它看起来是『observable 订阅了 observer / subscriber』，而不是『observer / subscriber 订阅了 observable』。这看起来就像『杂志订阅了读者』一样颠倒了对象关系。</p><p>这让人读起来有点别扭，不过如果把 API 设计成 『observer.subscribe(observable) / subscriber.subscribe(observable)』，虽然更加符合思维逻辑，但对流式 API 的设计就造成影响了，比较起来明显是得不偿失的。</p><p><code>Observable.subscribe(Subscriber)</code> 的内部实现是这样的(核心代码): </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Subscription <span class="title">subscribe</span><span class="params">(Subscriber subscriber)</span> </span>&#123;</span><br><span class="line">    subscriber.onStart();</span><br><span class="line">    onSubscribe.call(subscriber);</span><br><span class="line">    <span class="keyword">return</span> subscriber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>subscriber()</code> 做了3件事：</p><p>(a). 调用Subscriber.onStart()</p><blockquote><p>这个方法在前面已经介绍过，是一个可选的准备方法。</p></blockquote><p>(b). 调用Observable中的OnSubscribe.call(Subscriber)</p><blockquote><p>事件发送的逻辑开始运行。从这也可以看出，在RxJava中，Observable并不是在创建的时候就立即开始发送事件，而是在它被订阅的时候，即当subscribe()方法执行的时候。</p></blockquote><p>(c). 返回Subscription</p><blockquote><p>将传入的Subscriber作为Subscription返回。这是为了方便后面的unsubscribe()。</p></blockquote><p>整个过程中对象间的关系如下图：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Rxjava1_005.jpg" alt=""></p><p>或者可以看动图：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Rxjava1_006.gif" alt=""></p><p>除了 <code>subscribe(Observer)</code> 和 <code>subscribe(Subscriber)</code> ，<code>subscribe()</code> 还支持不完整定义的回调，<code>RxJava</code> 会自动根据定义创建出 <code>Subscriber</code>。形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="comment">// onNext()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Action1&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">    <span class="comment">// onError()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Error handling</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Action0 onCompletedAction = <span class="keyword">new</span> Action0() &#123;</span><br><span class="line">    <span class="comment">// onCompleted()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"completed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 来定义 onNext()</span></span><br><span class="line">observable.subscribe(onNextAction);</span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()</span></span><br><span class="line">observable.subscribe(onNextAction, onErrorAction);</span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()</span></span><br><span class="line">observable.subscribe(onNextAction, onErrorAction, onCompletedAction);</span><br></pre></td></tr></table></figure><p>简单解释一下这段代码中出现的 <code>Action1</code> 和 <code>Action0</code>。 </p><ul><li><strong>Action0</strong></li></ul><p><code>Action0</code> 是 <code>RxJava</code> 的一个接口，它只有一个方法 <code>call()</code>，这个方法是<strong>无参无返回值的</strong>。由于 <code>onCompleted()</code> 方法也是<strong>无参无返回值的</strong>，因此 <code>Action0</code> 可以被当成一个<strong>包装对象</strong>，将 <code>onCompleted()</code> 的内容打包起来将自己作为一个参数传入 <code>subscribe()</code> 以实现不完整定义的回调。</p><ul><li><strong>Action1</strong></li></ul><p><code>Action1</code> 也是一个接口，它同样只有一个方法 <code>call(T param)</code>，这个方法也无返回值，但有一个参数。与 <code>Action0</code> 同理，由于 <code>onNext(T obj)</code> 和 <code>onError(Throwable error)</code> 也是<strong>单参数无返回值的</strong>，因此 <code>Action1</code> 可以将 <code>onNext(obj)</code> 和 <code>onError(error)</code> 打包起来传入 <code>subscribe()</code> 以实现不完整定义的回调。</p><blockquote><p>事实上，虽然 <code>Action0</code> 和 <code>Action1</code> 在 <code>API</code> 中使用最广泛，但 <code>RxJava</code> 提供了多个 <code>ActionX</code> 形式的接口 (例如: <code>Action2</code>, <code>Action3</code>)，它们可以被用以包装不同的无返回值的方法。</p></blockquote><h3 id="4-4-场景示例"><a href="#4-4-场景示例" class="headerlink" title="4.4. 场景示例"></a>4.4. 场景示例</h3><h4 id="4-4-1-打印字符串数组"><a href="#4-4-1-打印字符串数组" class="headerlink" title="4.4.1. 打印字符串数组"></a>4.4.1. 打印字符串数组</h4><p>将字符串数组 names 中的所有字符串依次打印出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String[] names = ...;</span><br><span class="line">Observable.from(names)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            Log.d(tag, name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="4-4-2-由ID取得图片显示"><a href="#4-4-2-由ID取得图片显示" class="headerlink" title="4.4.2. 由ID取得图片显示"></a>4.4.2. 由ID取得图片显示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> drawableRes = ...;</span><br><span class="line">ImageView imageView = ...;</span><br><span class="line"></span><br><span class="line">Observable.create(<span class="keyword">new</span> OnSubscribe&lt;Drawable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Drawable&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        Drawable drawable = getTheme().getDrawable(drawableRes));</span><br><span class="line">        subscriber.onNext(drawable);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> Observer&lt;Drawable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Drawable drawable)</span> </span>&#123;</span><br><span class="line">        imageView.setImageDrawable(drawable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(activity, <span class="string">"Error!"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>正如上面两个例子这样，创建出 <code>Observable</code> 和 <code>Subscriber</code>，再用 <code>subscribe()</code> 将它们串起来，一次 <code>RxJava</code> 的基本使用就完成了，非常简单！</p><p>然而。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Rxjava1_007.jpg" alt=""></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在 <code>RxJava</code> 的默认规则中，事件的发出和消费都是在<strong>同一个线程</strong>的。也就是说，如果只用上面的方法，实现出来的只是一个<strong>同步的观察者模式</strong>。观察者模式本身的目的就是『后台处理，前台回调』的<strong>异步机制</strong>，因此异步对于 <code>RxJava</code> 是至关重要的。而要实现异步，则需要用到 <code>RxJava</code> 的另一个核心的概念 <code>Scheduler</code>，后续将给出详细介绍。</p><hr><p>欢迎关注技术公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;RxJava&lt;/code&gt; 是一款基于 &lt;code&gt;Java VM&lt;/code&gt; 实现的响应式编程扩展库 - 基于观察者模式的异步和事件处理框架。&lt;code&gt;RxJava&lt;/code&gt; 官方目前同时维护了两个版本，分别是 &lt;code&gt;1.x&lt;/code&gt; 和 &lt;code&gt;2.x&lt;/code&gt;，区别是它们使用不同的 &lt;code&gt;group id&lt;/code&gt; 和 &lt;code&gt;namespaces&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="RxJava异步框架系列" scheme="https://ostenant.coding.me/categories/RxJava%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Android" scheme="https://ostenant.coding.me/tags/Android/"/>
    
      <category term="RxJava" scheme="https://ostenant.coding.me/tags/RxJava/"/>
    
      <category term="异步" scheme="https://ostenant.coding.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>分布式唯一ID的几种生成方案</title>
    <link href="https://ostenant.coding.me/2018/05/14/%E5%88%86%E5%B8%83%E5%BC%8F%E5%94%AF%E4%B8%80ID%E7%9A%84%E5%87%A0%E7%A7%8D%E7%94%9F%E6%88%90%E6%96%B9%E6%A1%88/"/>
    <id>https://ostenant.coding.me/2018/05/14/分布式唯一ID的几种生成方案/</id>
    <published>2018-05-13T23:46:00.000Z</published>
    <updated>2018-05-14T06:04:56.491Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在互联网的业务系统中，涉及到各种各样的ID，如在支付系统中就会有支付ID、退款ID等。那一般生成ID都有哪些解决方案呢？特别是在复杂的分布式系统业务场景中，我们应该采用哪种适合自己的解决方案是十分重要的。下面我们一一来列举一下，不一定全部适合，这些解决方案仅供你参考，或许对你有用。</p><a id="more"></a><p><img src="http://ols3fdyll.bkt.clouddn.com/640.webp" alt=""></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="分布式ID的特性"><a href="#分布式ID的特性" class="headerlink" title="分布式ID的特性"></a>分布式ID的特性</h2><ul><li>唯一性：确保生成的ID是全网唯一的。</li><li>有序递增性：确保生成的ID是对于某个用户或者业务是按一定的数字有序递增的。</li><li>高可用性：确保任何时候都能正确的生成ID。</li><li>带时间：ID里面包含时间，一眼扫过去就知道哪天的交易。</li></ul><h2 id="分布式ID的生成方案"><a href="#分布式ID的生成方案" class="headerlink" title="分布式ID的生成方案"></a>分布式ID的生成方案</h2><h3 id="1-UUID"><a href="#1-UUID" class="headerlink" title="1. UUID"></a>1. UUID</h3><p>算法的核心思想是结合机器的网卡、当地时间、一个随记数来生成UUID。</p><ul><li>优点：本地生成，生成简单，性能好，没有高可用风险</li><li>缺点：长度过长，存储冗余，且无序不可读，查询效率低</li></ul><h3 id="2-数据库自增ID"><a href="#2-数据库自增ID" class="headerlink" title="2. 数据库自增ID"></a>2. 数据库自增ID</h3><p>使用数据库的id自增策略，如 MySQL 的 auto_increment。并且可以使用两台数据库分别设置不同步长，生成不重复ID的策略来实现高可用。</p><ul><li>优点：数据库生成的ID绝对有序，高可用实现方式简单</li><li>缺点：需要独立部署数据库实例，成本高，有性能瓶颈</li></ul><h3 id="3-批量生成ID"><a href="#3-批量生成ID" class="headerlink" title="3. 批量生成ID"></a>3. 批量生成ID</h3><p>一次按需批量生成多个ID，每次生成都需要访问数据库，将数据库修改为最大的ID值，并在内存中记录当前值及最大值。</p><ul><li>优点：避免了每次生成ID都要访问数据库并带来压力，提高性能</li><li>缺点：属于本地生成策略，存在单点故障，服务重启造成ID不连续</li></ul><h3 id="4-Redis生成ID"><a href="#4-Redis生成ID" class="headerlink" title="4. Redis生成ID"></a>4. Redis生成ID</h3><p>Redis的所有命令操作都是单线程的，本身提供像 incr 和 increby 这样的自增原子命令，所以能保证生成的 ID 肯定是唯一有序的。</p><ul><li><p>优点：不依赖于数据库，灵活方便，且性能优于数据库；数字ID天然排序，对分页或者需要排序的结果很有帮助。</p></li><li><p>缺点：如果系统中没有Redis，还需要引入新的组件，增加系统复杂度；需要编码和配置的工作量比较大。</p></li></ul><p>考虑到单节点的性能瓶颈，可以使用 Redis 集群来获取更高的吞吐量。假如一个集群中有5台 Redis。可以初始化每台 Redis 的值分别是1, 2, 3, 4, 5，然后步长都是 5。各个 Redis 生成的 ID 为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A：1, 6, 11, 16, 21</span><br><span class="line">B：2, 7, 12, 17, 22</span><br><span class="line">C：3, 8, 13, 18, 23</span><br><span class="line">D：4, 9, 14, 19, 24</span><br><span class="line">E：5, 10, 15, 20, 25</span><br></pre></td></tr></table></figure><p>随便负载到哪个机确定好，未来很难做修改。步长和初始值一定需要事先确定。使用 Redis 集群也可以方式单点故障的问题。</p><p>另外，比较适合使用 Redis 来生成每天从0开始的流水号。比如订单号 = 日期 + 当日自增长号。可以每天在 Redis 中生成一个 Key ，使用 INCR 进行累加。</p><h3 id="5-Twitter的snowflake算法"><a href="#5-Twitter的snowflake算法" class="headerlink" title="5. Twitter的snowflake算法"></a>5. Twitter的snowflake算法</h3><p>Twitter 利用 zookeeper 实现了一个全局ID生成的服务 Snowflake：<a href="https://github.com/twitter/snowflake" target="_blank" rel="noopener">https://github.com/twitter/snowflake</a></p><p><img src="http://ols3fdyll.bkt.clouddn.com/5954965-eb19f67333187500.jpg" alt=""></p><p>如上图的所示，Twitter 的 Snowflake 算法由下面几部分组成：</p><ul><li><strong>1位符号位：</strong></li></ul><p>由于 long 类型在 java 中带符号的，最高位为符号位，正数为 0，负数为 1，且实际系统中所使用的ID一般都是正数，所以最高位为 0。</p><ul><li><strong>41位时间戳（毫秒级）：</strong></li></ul><p>需要注意的是此处的 41 位时间戳并非存储当前时间的时间戳，而是存储时间戳的差值（当前时间戳 - 起始时间戳），这里的起始时间戳一般是ID生成器开始使用的时间戳，由程序来指定，所以41位毫秒时间戳最多可以使用 <code>(1 &lt;&lt; 41) / (1000x60x60x24x365) = 69年</code>。</p><ul><li><strong>10位数据机器位：</strong> </li></ul><p>包括5位数据标识位和5位机器标识位，这10位决定了分布式系统中最多可以部署 <code>1 &lt;&lt; 10 = 1024</code> s个节点。超过这个数量，生成的ID就有可能会冲突。</p><ul><li><strong>12位毫秒内的序列：</strong></li></ul><p>这 12 位计数支持每个节点每毫秒（同一台机器，同一时刻）最多生成 <code>1 &lt;&lt; 12 = 4096个ID</code> </p><p>加起来刚好64位，为一个Long型。</p><ul><li>优点：高性能，低延迟，按时间有序，一般不会造成ID碰撞</li><li>缺点：需要独立的开发和部署，依赖于机器的时钟</li></ul><h4 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdWorker</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 起始时间戳 2017-04-01</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> epoch = <span class="number">1491004800000L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器ID所占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据标识ID所占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> dataCenterIdBits = <span class="number">5L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的最大机器ID,结果是31</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxWorkerId = ~(-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的最大数据标识ID,结果是31</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxDataCenterId = ~(-<span class="number">1</span> &lt;&lt; dataCenterIdBits);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 毫秒内序列在id中所占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器ID向左移12位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据标识ID向左移17(12+5)位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> dataCenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间戳向左移22(12+5+5)位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timestampShift = sequenceBits + workerIdBits + dataCenterIdBits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceMask = ~(-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据标识ID（0～31）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> dataCenterId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器ID（0～31）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 毫秒内序列（0～4095）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上次生成ID的时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdWorker</span><span class="params">(<span class="keyword">long</span> dataCenterId, <span class="keyword">long</span> workerId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataCenterId &gt; maxDataCenterId || dataCenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"dataCenterId can't be greater than %d or less than 0"</span>, maxDataCenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"worker Id can't be greater than %d or less than 0"</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.dataCenterId = dataCenterId;</span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> snowflakeId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="comment">//如果当前时间小于上一次ID生成的时间戳,说明系统时钟回退过,这个时候应当抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(<span class="string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp == lastTimestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                timestamp = nextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//时间戳改变，毫秒内序列重置</span></span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line">        <span class="comment">//移位并通过按位或运算拼到一起组成64位的ID</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - epoch) &lt;&lt; timestampShift) |</span><br><span class="line">                (dataCenterId &lt;&lt; dataCenterIdShift) |</span><br><span class="line">                (workerId &lt;&lt; workerIdShift) |</span><br><span class="line">                sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间(毫秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">nextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = lastTimestamp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-百度UidGenerator"><a href="#6-百度UidGenerator" class="headerlink" title="6. 百度UidGenerator"></a>6. 百度UidGenerator</h3><p>UidGenerator是百度开源的分布式ID生成器，基于于snowflake算法的实现，看起来感觉还行。不过，国内开源的项目维护性真是担忧。</p><p>具体可以参考官网说明：<a href="https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md" target="_blank" rel="noopener">https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md</a></p><h3 id="7-美团Leaf"><a href="#7-美团Leaf" class="headerlink" title="7. 美团Leaf"></a>7. 美团Leaf</h3><p>Leaf 是美团开源的分布式ID生成器，能保证全局唯一性、趋势递增、单调递增、信息安全，里面也提到了几种分布式方案的对比，但也需要依赖关系数据库、Zookeeper等中间件。</p><p>具体可以参考官网说明：<a href="https://tech.meituan.com/MT_Leaf.html" target="_blank" rel="noopener">https://tech.meituan.com/MT_Leaf.html</a></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这篇文章和大家分享了全局id生成服务的几种常用方案，同时对比了各自的优缺点和适用场景。在实际工作中，大家可以结合自身业务和系统架构体系进行合理选型。</p><p>欢迎扫码关注公众号：零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在互联网的业务系统中，涉及到各种各样的ID，如在支付系统中就会有支付ID、退款ID等。那一般生成ID都有哪些解决方案呢？特别是在复杂的分布式系统业务场景中，我们应该采用哪种适合自己的解决方案是十分重要的。下面我们一一来列举一下，不一定全部适合，这些解决方案仅供你参考，或许对你有用。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系列" scheme="https://ostenant.coding.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Unique ID" scheme="https://ostenant.coding.me/tags/Unique-ID/"/>
    
  </entry>
  
  <entry>
    <title>蚂蚁金服SOFA-Boot整合SOFA-RPC(下篇)</title>
    <link href="https://ostenant.coding.me/2018/05/12/%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8DSOFA-Boot%E6%95%B4%E5%90%88SOFA-RPC(%E4%B8%8B%E7%AF%87)/"/>
    <id>https://ostenant.coding.me/2018/05/12/蚂蚁金服SOFA-Boot整合SOFA-RPC(下篇)/</id>
    <published>2018-05-12T12:12:00.000Z</published>
    <updated>2018-05-12T15:18:18.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上文介绍了SOFA-RPC 的几种调用方式，包括单向调用、同步调用、Future调用、回调，引入了泛化调用和过滤器。本文将对 SOFA-RPC 的高级功能，包括参数配置、自定义线程池、预热权重和自动故障剔除等。</p><a id="more"></a><p><img src="http://ols3fdyll.bkt.clouddn.com/SOFA.JPG" alt=""></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-参数配置"><a href="#1-参数配置" class="headerlink" title="1. 参数配置"></a>1. 参数配置</h2><p><code>SOFABoot RPC Starter</code> 提供了方便的参数设置方式。这些参数目前可以分为两个部分。一部分是如端口，注册中心地址等配置，这类配置在 <code>application.properties</code> 中。另一部分是如超时时间等配置，这类配置在 <code>XML</code> 中。</p><h3 id="XML-配置"><a href="#XML-配置" class="headerlink" title="XML 配置"></a>XML 配置</h3><ul><li><strong>调用超时时间</strong></li></ul><p>如下是设置超时时间的方式，单位为 ms ，如果调用超过了这个时间则会抛出异常。服务端和客户端都可以设置，以客户端的超时时间设置优先。默认客户端为 3000 ，目前对 bolt，rest，dubbo 生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">timeout</span>=<span class="string">"5000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>获取地址等待时间</strong></li></ul><p>如下是设置获取地址等待时间，单位为ms。在启动时如果服务引用方等待超过了这个时间则不会再等待地址，会继续启动。客户端设置，默认为-1，表示会一直等待到地址为止。目前对 bolt，rest 生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">address-wait-time</span>=<span class="string">"30000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>建立连接超时时间</strong></li></ul><p>如下是设置建立连接超时时间，单位为 ms 。在建立连接时如果耗时超过了这个时间则会抛出异常。客户端设，默认为 5000。目前对 bolt，rest 生效。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">connect.timeout</span>=<span class="string">"30000"</span></span></span><br><span class="line">&lt;/sofa:binding.bolt&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>权重</strong></li></ul><p>如下是设置权重。客户端在发起调用时，如果采用的算法是随机调用，则会根据该权重来进行随机。服务端设置，默认为 100。目前对 bolt 生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">weight</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>lazy 连接</strong></li></ul><p>默认情况下客户端在注册中心推送地址到客户端时，就立即建立好连接，这个过程通常是在第一次调用之前进行的。如果设置服务引用的属性 lazy 为 true，客户端在第一次调用时才和所要调用的远程地址建立连接。默认为 false。</p><p>如下设置 lazy 连接方式，将 lazy 属性设为 true。目前支持 bolt 和 dubbo 协议。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sofa:reference</span> <span class="attr">id</span>=<span class="string">"lazyServiceReferenceBolt"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.lazy.LazyService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">lazy</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>check 属性</strong></li></ul><p>默认情况下客户端在启动时，服务引用不要求存在可用的地址和连接。如果设置服务引用的属性 check 为 true，客户端在启动时，服务引用会检查是否存在对应的地址和连接，如果不存在会抛出异常。默认为 false。</p><p>如下设置 check 连接方式，将 check 属性设为 true。目前支持 bolt 和 dubbo 协议。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sofa:reference</span> <span class="attr">id</span>=<span class="string">"checkServiceReferenceBolt"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.check.CheckService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">check</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>重试次数</strong></li></ul><p>重试次数，即在第一次调用失败后重试的最大次数，如果重试成功则不再继续重试。默认为 0。如下设置调用次数，利用 retries 属性指定重试次数。目前支持 bolt 和 dubbo 协议。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sofa:reference</span> <span class="attr">id</span>=<span class="string">"retriesServiceReferenceBolt"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.retries.RetriesService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">retries</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>负载均衡</strong></li></ul><p>如下选择负载均衡的方式，利用 loadBalancer 属性指定调用时候使用的负载均衡策略，默认为 random。</p><p>目前支持 random，localPref，roundRobin，consistentHash，weightRoundRobin 五种负载均衡策略，具体可见 SOFARPC 负载均衡相关介绍。目前支持bolt协议。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sofa:reference</span> <span class="attr">id</span>=<span class="string">"loadBalancerServiceReference"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.loadBalancer.LoadBalancerService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">loadBalancer</span>=<span class="string">"random"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>方法级别配置</strong></li></ul><p>如下，sofa:method 元素是方法级别的配置。方法级别的配置优先级比服务级别的更高。name 属性指定了方法的名字。支持调用超时时间，调用方式，回调类的设置。方法级别的配置与服务级别的配置所生效的协议一样。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:method</span> <span class="attr">name</span>=<span class="string">"sayMethod"</span> <span class="attr">timeout</span>=<span class="string">"3000"</span> <span class="attr">type</span>=<span class="string">"sync"</span> <span class="attr">callback-ref</span>=<span class="string">"xxx"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Properties-配置"><a href="#Properties-配置" class="headerlink" title="Properties 配置"></a>Properties 配置</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">spring.application.name</td><td style="text-align:left">应用名</td><td style="text-align:left"></td><td></td></tr><tr><td style="text-align:left">logging.path</td><td style="text-align:left">日志路径</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">logging.level.com.alipay.sofa.rpc.boot</td><td style="text-align:left">sofa-rpc-boot-start的日志级别(starter自身的日志)</td><td style="text-align:left">info</td></tr><tr><td style="text-align:left">logging.level.com.alipay.sofa.rpc</td><td style="text-align:left">sofa-rpc的日志级别(sofa-rpc核心日志基本在这里)</td><td style="text-align:left">info</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.bolt.port</td><td style="text-align:left">bolt 端口</td><td style="text-align:left">22000</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.bolt.io.thread.count</td><td style="text-align:left">bolt 的 io 线程数</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.bolt.executor.thread.count</td><td style="text-align:left">bolt 的业务线程最大值</td><td style="text-align:left">200</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.bolt.accepts.count</td><td style="text-align:left">bolt 能够支持的最大长连接数</td><td style="text-align:left">100000</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.rest.hostname</td><td style="text-align:left">rest 的 hostname</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.rest.port</td><td style="text-align:left">rest 端口</td><td style="text-align:left">8341</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.rest.io.thread.count</td><td style="text-align:left">rest 的 io 线程数</td><td style="text-align:left">cpu 核数 * 2</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.rest.executor.thread.count</td><td style="text-align:left">rest 的业务线程数</td><td style="text-align:left">200</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.rest.max.request.size</td><td style="text-align:left">rest 的最大 byte 请求长度</td><td style="text-align:left">1024 <em> 1024 </em> 10</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.rest.telnet</td><td style="text-align:left">rest 是否支持 telnet</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.rest.daemon</td><td style="text-align:left">rest 是否支持 daemon</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.dubbo.port</td><td style="text-align:left">dubbo 的端口</td><td style="text-align:left">20880</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.dubbo.io.thread.count</td><td style="text-align:left">dubbo 的 io 线程数</td><td style="text-align:left">cpu 核数 + 1</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.dubbo.executor.thread.count</td><td style="text-align:left">dubbo 的业务线程数</td><td style="text-align:left">100</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.dubbo.accepts.count</td><td style="text-align:left">dubbo能够支持的最大长连接数</td><td style="text-align:left">0，表示不限制</td></tr></tbody></table><h2 id="2-自定义线程池"><a href="#2-自定义线程池" class="headerlink" title="2. 自定义线程池"></a>2. 自定义线程池</h2><p>SOFA-RPC 支持自定义业务线程池。可以为指定服务设置一个独立的业务线程池，和 SOFA-RPC 自身的业务线程池是隔离的，多个服务可以共用一个独立的线程池。目前支持 bolt 协议。</p><p>在 SOFA-Boot 环境中可以为一个服务设置一个自定义线程池，配置如下：</p><ul><li><strong>声明自定义线程池</strong></li></ul><p>如下声明一个自定义线程池，<code>class</code> 必须为 <code>com.alipay.sofa.rpc.server.UserThreadPool</code>，这是 <code>SOFA-RPC</code> 提供的类，<code>init-method=&quot;init&quot;</code> 也必须声明以进行初始化。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerThreadPool"</span> <span class="attr">class</span>=<span class="string">"com.alipay.sofa.rpc.server.UserThreadPool"</span> <span class="attr">init-method</span>=<span class="string">"init"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"corePoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maximumPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queueSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"threadPoolName"</span> <span class="attr">value</span>=<span class="string">"customerThreadPool_name"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>为服务设置自定义线程池</strong></li></ul><p>如下通过 <code>sofa:global-attrs</code> 元素的 <code>thread-pool-ref</code> 属性为该服务设置自定义线程池。<code>customerThreadPool</code> 是上面自定义线程池的 <code>bean id</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"threadPoolServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.ostenant.sofa.rpc.example.threadpool.ThreadPoolServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sofa:service</span> <span class="attr">ref</span>=<span class="string">"threadPoolServiceImpl"</span> <span class="attr">interface</span>=<span class="string">"com.alipay.sofa.rpc.samples.threadpool.ThreadPoolService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">thread-pool-ref</span>=<span class="string">"customerThreadPool"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:service</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-预热权重"><a href="#3-预热权重" class="headerlink" title="3. 预热权重"></a>3. 预热权重</h3><p>SOFA-RPC 提供了预热权重功能让客户端机器能够根据服务端的相应权重进行流量的分发。目前支持 bolt 协议。</p><p>SOFA-Boot 中提供了一系列参数属性，对指定服务进行预热配置。客户端机器能够自动解析这些参数，并按权重进行流量分发。</p><ul><li>warm-up-time: 服务的预热时间</li><li>warm-up-weight: 服务设置预热期间权重</li><li>weight: 服务设置预热完后的权重</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sofa:reference</span> <span class="attr">id</span>=<span class="string">"sampleRestFacadeReferenceBolt"</span> <span class="attr">interface</span>=<span class="string">"com.alipay.sofa.endpoint.facade.SampleFacade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">warm-up-time</span>=<span class="string">"10000"</span> <span class="attr">warm-up-weight</span>=<span class="string">"10"</span> <span class="attr">weight</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述配置中，该服务的预热期为10s，在预热期内权重为10，预热期结束后的正常权重为100。</p><p>如果该服务一共发布到A，B两个机器上。A机器正处于预热期内，使用上述配置；B已经完成预热，正常权重为200。那么客户端在调用的时候，此时流量分发的比重为10：200；A机器预热结束后，流量分发比重为100：200。</p><h2 id="4-自动故障剔除"><a href="#4-自动故障剔除" class="headerlink" title="4. 自动故障剔除"></a>4. 自动故障剔除</h2><p>自动故障剔除会自动监控 RPC 调用的情况，对故障节点进行权重降级，并在节点恢复健康时进行权重恢复。目前支持 bolt 协议。</p><p>在 SOFA-Boot 中，只需要将自动故障剔除的参数配置到 <code>application.properties</code> 即可。只配置自己关心的参数，其余参数会取默认值。需要注意的是，<code>rpc.aft.regulation.effective</code> 是该功能的全局开关，如果关闭则该功能不会运行，其他参数也都不生效。</p><ul><li><strong>自动故障剔除的配置参数意义</strong></li></ul><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">com.alipay.sofa.rpc.aft.time.window</td><td style="text-align:left">时间窗口大小：对统计信息计算的周期。</td><td style="text-align:left">10s</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.aft.least.window.count</td><td style="text-align:left">时间窗口内最少调用数：只有在时间窗口内达到了该最低值的数据才会被加入到计算和调控中。</td><td style="text-align:left">10次</td><td></td><td></td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.aft.least.window.exception.rate.multiple</td><td style="text-align:left">时间窗口内异常率与服务平均异常率的降级比值：在对统计信息进行计算的时候，会计算出该服务所有有效调用ip的平均异常率，如果某个ip的异常率大于等于了这个最低比值，则会被降级。</td><td style="text-align:left">6倍</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.aft.weight.degrade.rate</td><td style="text-align:left">降级比率：地址在进行权重降级时的降级比率。</td><td style="text-align:left">1/20</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.aft.weight.recover.rate</td><td style="text-align:left">恢复比率：地址在进行权重恢复时的恢复比率。</td><td style="text-align:left">2倍</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.aft.degrade.effective</td><td style="text-align:left">降级开关：如果应用打开了这个开关，则会对符合降级的地址进行降级，否则只会进行日志打印。</td><td style="text-align:left">false(关闭)</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.aft.degrade.least.weight</td><td style="text-align:left">降级最小权重：地址权重被降级后的值如果小于这个最小权重，则会以该最小权重作为降级后的值。</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.aft.degrade.max.ip.count</td><td style="text-align:left">降级的最大ip数：同一个服务被降级的ip数不能超过该值。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">com.alipay.sofa.rpc.aft.regulation.effective</td><td style="text-align:left">全局开关：如果应用打开了这个开关，则会开启整个单点故障自动剔除摘除功能，否则完全不进入该功能的逻辑。</td><td style="text-align:left">false(关闭)</td></tr></tbody></table><ul><li><strong>配置示例</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">com.alipay.sofa.rpc.aft.time.window=20</span><br><span class="line">com.alipay.sofa.rpc.aft.least.window.count=30</span><br><span class="line">com.alipay.sofa.rpc.aft.least.window.exception.rate.multiple=6</span><br><span class="line">com.alipay.sofa.rpc.aft.weight.degrade.rate=0.5</span><br><span class="line">com.alipay.sofa.rpc.aft.weight.recover.rate=1.2</span><br><span class="line">com.alipay.sofa.rpc.aft.degrade.effective=ture</span><br><span class="line">com.alipay.sofa.rpc.aft.degrade.least.weight=1</span><br><span class="line">com.alipay.sofa.rpc.aft.degrade.max.ip.count=2</span><br><span class="line">com.alipay.sofa.rpc.aft.regulation.effective=true</span><br></pre></td></tr></table></figure><p>上述配置中，默认打开了自动故障剔除功能和降级开关。当节点出现故障时会被进行权重降级，在恢复时会被进行权重恢复。</p><p>每隔 20s 进行一次节点健康状态的度量，20s 内调用次数超过 30 次的节点才被作为计算数据。</p><p>如果单个节点的异常率超过了所有节点的平均异常率的 6 倍，则对该节点进行权重降级，降级的比率为 0.5。权重最小降级到 1。如果单个节点的异常率低于了平均异常率的 6 倍，则对该节点进行权重恢复，恢复的比率为1.2。单个服务最多降级 2 个 IP。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文介绍了 <code>SOFA-RPC</code> 的高级功能，包括参数配置，自定义线程池，服务预热和自动降级与权重恢复等用法。对于 <code>SOFA-RPC</code> 提供的基本功能，以及整合 <code>SOFA-Boot</code> 的配置和用法就介绍完了。对此有了初步的认识后，有利于后续深入实现原理和剖析源码。</p><hr><p>欢迎扫码关注我的个人技术公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上文介绍了SOFA-RPC 的几种调用方式，包括单向调用、同步调用、Future调用、回调，引入了泛化调用和过滤器。本文将对 SOFA-RPC 的高级功能，包括参数配置、自定义线程池、预热权重和自动故障剔除等。&lt;/p&gt;
    
    </summary>
    
      <category term="RPC通信框架系列" scheme="https://ostenant.coding.me/categories/RPC%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="RPC" scheme="https://ostenant.coding.me/tags/RPC/"/>
    
      <category term="SOFA-Boot" scheme="https://ostenant.coding.me/tags/SOFA-Boot/"/>
    
      <category term="SOFA_RPC" scheme="https://ostenant.coding.me/tags/SOFA-RPC/"/>
    
  </entry>
  
  <entry>
    <title>蚂蚁金服SOFA-Boot整合SOFA-RPC(中篇)</title>
    <link href="https://ostenant.coding.me/2018/05/09/%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8DSOFA-Boot%E6%95%B4%E5%90%88SOFA-RPC(%E4%B8%AD%E7%AF%87)/"/>
    <id>https://ostenant.coding.me/2018/05/09/蚂蚁金服SOFA-Boot整合SOFA-RPC(中篇)/</id>
    <published>2018-05-09T07:08:00.000Z</published>
    <updated>2018-05-10T07:36:51.543Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上篇文章简单地介绍了 SOFA-Boot 的功能特性，对 Readiness 健康检查的配置举例说明。重点介绍了如何在 SOFA-Boot 中引入 SOFA-RPC 中间件，给出了基于 bolt、rest 和 dubbo 等不同协议通道的服务发布与消费的全流程。</p><a id="more"></a><p><img src="http://ols3fdyll.bkt.clouddn.com/SOFA.JPG" alt=""></p><p>本文将进一步介绍 SOFA-RPC 中间件提供的丰富而强大的功能，包括单向调用、同步调用、Future调用、回调，泛化调用，过滤器配置等。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-调用方式"><a href="#1-调用方式" class="headerlink" title="1. 调用方式"></a>1. 调用方式</h2><p>SOFA-RPC 提供单向调用、同步调用、异步调用和回调四种调用机制。为了区分四者的不同之处，这里给出 SOFA 官方提供的原理图。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/sofa-bolt-invoke-way.png" alt=""></p><p>下面给出详细阐述和配置说明：</p><h3 id="1-1-单向方式"><a href="#1-1-单向方式" class="headerlink" title="1.1. 单向方式"></a>1.1. 单向方式</h3><p>当前线程发起调用后，不关心调用结果，不做超时控制，只要请求已经发出，就完成本次调用。目前支持 bolt 协议。</p><h4 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h4><p>使用单向方式需要在<strong>服务引用</strong>的时候通过 <code>sofa:global-attrs</code> 元素的 <code>type</code> 属性声明调用方式为 <code>oneway</code> ，这样使用该服务引用发起调用时就是使用的单向方式了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sofa:reference</span> <span class="attr">id</span>=<span class="string">"helloOneWayServiceReference"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.invoke.HelloOneWayService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">type</span>=<span class="string">"oneway"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>单向调用不保证成功，而且发起方无法知道调用结果。因此通常用于可以重试，或者定时通知类的场景，调用过程是有可能因为网络问题，机器故障等原因，导致请求失败。业务场景需要能接受这样的异常场景，才可以使用。</p><h3 id="1-2-同步方式"><a href="#1-2-同步方式" class="headerlink" title="1.2. 同步方式"></a>1.2. 同步方式</h3><p>当前线程发起调用后，需要在指定的超时时间内，等到响应结果，才能完成本次调用。如果超时时间内没有得到结果，那么会抛出超时异常。</p><h4 id="配置说明-1"><a href="#配置说明-1" class="headerlink" title="配置说明"></a>配置说明</h4><p><strong>服务接口与实现类</strong></p><p>SOFA-RPC 缺省采用的就是同步调用，可以省略 <code>sofa:global-attrs</code> 配置项。</p><p><strong>服务端发布配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloSyncServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.ostenant.sofa.rpc.example.invoke.HelloSyncServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sofa:service</span> <span class="attr">ref</span>=<span class="string">"helloSyncServiceImpl"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.invoke.HelloSyncService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:service</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>客户端引用配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sofa:reference</span> <span class="attr">id</span>=<span class="string">"helloSyncServiceReference"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.invoke.HelloSyncService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>服务端启动入口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(SyncServerApplication.class);</span><br><span class="line">ApplicationContext applicationContext = springApplication.run(args);</span><br></pre></td></tr></table></figure><p><strong>客户端启动入口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(SyncClientApplication.class);</span><br><span class="line">ApplicationContext applicationContext = springApplication.run(args);</span><br></pre></td></tr></table></figure><p><strong>客户端调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HelloSyncService helloSyncServiceReference = (HelloSyncService) applicationContext.getBean(<span class="string">"helloSyncServiceReference"</span>);</span><br><span class="line">System.out.println(helloSyncServiceReference.saySync(<span class="string">"sync"</span>));</span><br></pre></td></tr></table></figure><h4 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h4><p>同步调用是最常用的方式。注意要根据对端的处理能力，合理设置超时时间。</p><h3 id="1-3-Future方式"><a href="#1-3-Future方式" class="headerlink" title="1.3. Future方式"></a>1.3. Future方式</h3><p>Future 方式下，客户端发起调用后不会等待服务端的结果，继续执行后面的业务逻辑。服务端返回的结果会被 SOFA-RPC 缓存，当客户端需要结果的时候，需要主动获取。目前支持 bolt 协议。</p><h4 id="配置说明-2"><a href="#配置说明-2" class="headerlink" title="配置说明"></a>配置说明</h4><p><strong>服务接口和实现类</strong></p><p>HelloFutureService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloFutureService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayFuture</span><span class="params">(String future)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloFutureServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFutureServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloFutureService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayFuture</span><span class="params">(String future)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务端发布配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloFutureServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.ostenant.sofa.rpc.example.invoke.HelloFutureServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sofa:service</span> <span class="attr">ref</span>=<span class="string">"helloFutureServiceImpl"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.invoke.HelloFutureService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:service</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>客户端引用配置</strong></p><p>使用 Future 方式需要在服务引用的时候通过 <code>sofa:global-attrs</code> 元素的 <code>type</code> 属性声明调用方式为 <code>future</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sofa:reference</span> <span class="attr">id</span>=<span class="string">"helloFutureServiceReference"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.invoke.HelloFutureService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">type</span>=<span class="string">"future"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样使用该服务引用发起调用时就是使用的 <code>Future</code> 方式了。</p><p><strong>服务端启动入口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(FutureServerApplication.class);</span><br><span class="line">ApplicationContext applicationContext = springApplication.run(args);</span><br></pre></td></tr></table></figure><p><strong>客户端启动入口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(FutureClientApplication.class);</span><br><span class="line">ApplicationContext applicationContext = springApplication.run(args);</span><br></pre></td></tr></table></figure><p>客户端获取返回结果有两种方式：</p><ul><li>其一，通过 <code>SofaResponseFuture</code> 直接获取结果。第一个参数是获取结果的超时时间，第二个参数表示是否清除线程上下文中的结果。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HelloFutureService helloFutureServiceReference = (HelloFutureService) applicationContext</span><br><span class="line">    .getBean(<span class="string">"helloFutureServiceReference"</span>);</span><br><span class="line">helloFutureServiceReference.sayFuture(<span class="string">"future"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    String result = (String)SofaResponseFuture.getResponse(<span class="number">1000</span>, <span class="keyword">true</span>);</span><br><span class="line">    System.out.println(<span class="string">"Future result: "</span> + result)</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其二，获取原生 Future。该种方式会获取 JDK 原生的 Future ，参数表示是否清除线程上下文中的结果。获取结果的方式就是 JDK Future 的获取方式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HelloFutureService helloFutureServiceReference = (HelloFutureService) applicationContext</span><br><span class="line">    .getBean(<span class="string">"helloFutureServiceReference"</span>);</span><br><span class="line">helloFutureServiceReference.sayFuture(<span class="string">"future"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Future future = SofaResponseFuture.getFuture(<span class="keyword">true</span>);</span><br><span class="line">    String result = (String)future.get(<span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    System.out.println(<span class="string">"Future result: "</span> + result)</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h4><p>Future 方式适用于非阻塞编程模式。对于客户端程序处理后，不需要立即获取返回结果，可以先完成后续程序代码执行，在后续业务中，主动从当前线程上下文获取调用返回结果。减少了网络 IO 等待造成的代码运行阻塞和延迟。</p><h3 id="1-4-回调方式"><a href="#1-4-回调方式" class="headerlink" title="1.4. 回调方式"></a>1.4. 回调方式</h3><p>当前线程发起调用，则本次调用马上结束，可以马上执行下一次调用。发起调用时需要注册一个回调，该回调需要分配一个异步线程池。待响应返回后，会在回调的异步线程池，来执行回调逻辑。</p><h4 id="配置说明-3"><a href="#配置说明-3" class="headerlink" title="配置说明"></a>配置说明</h4><p><strong>服务接口和实现类</strong></p><p>HelloCallbackService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloCallbackService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayCallback</span><span class="params">(String callback)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloCallbackServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCallbackServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloCallbackService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayCallback</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>业务回调类</strong></p><p>客户端回调类需要实现 <code>com.alipay.sofa.rpc.core.invoke.SofaResponseCallback</code> 接口。</p><p>CallbackImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackImpl</span> <span class="keyword">implements</span> <span class="title">SofaResponseCallback</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAppResponse</span><span class="params">(Object appResponse, String methodName, RequestBase request)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"callback client process:"</span> + appResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAppException</span><span class="params">(Throwable throwable, String methodName, RequestBase request)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSofaException</span><span class="params">(SofaRpcException sofaException, String methodName, RequestBase request)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SofaResponseCallback 接口提供了 3 个方法：</p><ul><li>onAppResponse: 程序正常运行，则进入该回调方法。</li><li>onAppException: 服务端程序抛出异常，则进入该回调方法。</li><li>onSofaException: 框架内部出现错误，则进入该回调方法。</li></ul><p><strong>服务端发布配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloCallbackServiceImpl"</span> <span class="attr">class</span>=<span class="string">"helloFutureServiceReference"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.invoke.HelloCallbackServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sofa:service</span> <span class="attr">ref</span>=<span class="string">"helloCallbackServiceImpl"</span> <span class="attr">interface</span>=<span class="string">"helloFutureServiceReference"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.invoke.HelloCallbackService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:service</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>客户端引用配置</strong></p><p>在服务引用的时候通过 <code>sofa:global-attrs</code> 元素的 <code>type</code> 属性声明调用方式为 <code>callback</code> ，再通过 <code>callback-ref</code> 声明回调的实现类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"callbackImpl"</span> <span class="attr">class</span>=<span class="string">"com.ostenant.sofa.rpc.example.invoke.CallbackImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sofa:reference</span> <span class="attr">id</span>=<span class="string">"helloCallbackServiceReference"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.invoke.HelloCallbackService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">type</span>=<span class="string">"callback"</span> <span class="attr">callback-ref</span>=<span class="string">"callbackImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样使用该服务引用发起调用时，就是使用的回调方式了。在结果返回时，由 SOFA-RPC 自动调用该回调类的相应方法。</p><p><strong>服务端启动入口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(CallbackServerApplication.class);</span><br><span class="line">ApplicationContext applicationContext = springApplication.run(args);</span><br></pre></td></tr></table></figure><p><strong>客户端启动入口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(CallbackClientApplication.class);</span><br><span class="line">ApplicationContext applicationContext = springApplication.run(args);</span><br></pre></td></tr></table></figure><p><strong>客户端发起调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HelloCallbackService helloCallbackServiceReference = (HelloCallbackService) applicationContext</span><br><span class="line">            .getBean(<span class="string">"helloCallbackServiceReference"</span>);</span><br><span class="line">helloCallbackServiceReference.sayCallback(<span class="string">"callback"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sayCallback() 的返回值不应该直接获取。在客户端注册的回调类中，返回值会以参数的形式传入正确的方法，以回调的形式完成后续逻辑处理。</p><h4 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h4><p>Callback 方式适用于异步非阻塞编程模式。客户端程序所在线程发起调用后，继续执行后续操作，不需要主动去获取返回值。服务端程序处理完成，将返回值传回一个异步线程池，由子线程通过回调函数进行返回值处理。很大情况的减少了网络 IO 阻塞，解决了单线程的瓶颈，实现了异步编程。</p><h2 id="2-泛化调用"><a href="#2-泛化调用" class="headerlink" title="2. 泛化调用"></a>2. 泛化调用</h2><p>泛化调用方式能够在客户端不依赖服务端的接口情况下发起调用，目前支持 bolt 协议。由于不知道服务端的接口，因此需要通过字符串的方式将服务端的接口，调用的方法，参数及结果类进行描述。</p><h4 id="配置说明-4"><a href="#配置说明-4" class="headerlink" title="配置说明"></a>配置说明</h4><p><strong>泛化参数类</strong></p><p>SampleGenericParamModel.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleGenericParamModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>泛化返回类</strong></p><p>SampleGenericResultModel.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleGenericResultModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务接口和实现类</strong></p><p>SampleGenericService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SampleGenericService</span> </span>&#123;</span><br><span class="line">    <span class="function">SampleGenericResultModel <span class="title">sayGeneric</span><span class="params">(SampleGenericParamModel sampleGenericParamModel)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>SampleGenericParamModel：作为 sayGeneric() 的输入参数类型，有一个 <code>name</code> 成员变量，作为真正的方法入参。</p></li><li><p>SampleGenericResultModel：作为 sayGeneric() 的返回结果类型，声明了 <code>name</code> 和 <code>value</code> 两个成员变量，作为真实的返回值。 </p></li></ul><p>SampleGenericServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleGenericServiceImpl</span> <span class="keyword">implements</span> <span class="title">SampleGenericService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SampleGenericResultModel <span class="title">sayGeneric</span><span class="params">(SampleGenericParamModel sampleGenericParamModel)</span> </span>&#123;</span><br><span class="line">        String name = sampleGenericParamModel.getName();</span><br><span class="line">        SampleGenericResultModel resultModel = <span class="keyword">new</span> SampleGenericResultModel();</span><br><span class="line">        resultModel.setName(name);</span><br><span class="line">        resultModel.setValue(<span class="string">"sample generic value"</span>);</span><br><span class="line">        <span class="keyword">return</span> resultModel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务端发布配置</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"sampleGenericServiceImpl"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.ostenant.sofa.rpc.example.generic.SampleGenericServiceImpl"</span>/&gt;</span><br><span class="line">&lt;sofa:service ref=<span class="string">"sampleGenericServiceImpl"</span> <span class="class"><span class="keyword">interface</span></span>=<span class="string">"com.ostenant.sofa.rpc.example.generic.SampleGenericService"</span>&gt;</span><br><span class="line">    &lt;sofa:binding.bolt/&gt;</span><br><span class="line">&lt;/sofa:service&gt;</span><br></pre></td></tr></table></figure><p><strong>客户端引用配置</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;sofa:reference id=<span class="string">"sampleGenericServiceReference"</span> <span class="class"><span class="keyword">interface</span></span>=<span class="string">"com.alipay.sofa.rpc.api.GenericService"</span>&gt;</span><br><span class="line">    &lt;sofa:binding.bolt&gt;</span><br><span class="line">        &lt;sofa:global-attrs generic-<span class="class"><span class="keyword">interface</span></span>=<span class="string">"com.ostenant.sofa.rpc.example.generic.SampleGenericService"</span>/&gt;</span><br><span class="line">    &lt;/sofa:binding.bolt&gt;</span><br><span class="line">&lt;/sofa:reference&gt;</span><br></pre></td></tr></table></figure><p>在泛化调用过程中，客户端配置有两点需要注意：</p><ul><li><code>sofa:reference</code> 指向的服务接口需要声明为 SOFA-RPC 提供的泛化接口 <code>com.alipay.sofa.rpc.api.GenericService</code>。</li><li><code>sofa:global-attrs</code> 需要声明属性 <code>generic-interface</code>，value 为真实的服务接口名称。</li></ul><p><strong>服务端启动入口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(SampleGenericServerApplication.class);</span><br><span class="line">ApplicationContext applicationContext = springApplication.run(args);</span><br></pre></td></tr></table></figure><p><strong>客户端启动入口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(SampleGenericClientApplication.class);</span><br><span class="line">ApplicationContext applicationContext = springApplication.run(args);</span><br></pre></td></tr></table></figure><p><strong>客户端发起调用</strong></p><ul><li>获取服务的泛化引用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GenericService sampleGenericServiceReference = (GenericService) applicationContext</span><br><span class="line">    .getBean(<span class="string">"sampleGenericServiceReference"</span>);</span><br></pre></td></tr></table></figure><ul><li>准备方法参数 </li></ul><p>由于客户端没有调用服务的参数类，因此通过 <code>com.alipay.hessian.generic.model.GenericObjectGenericObject</code> 进行描述。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备方法参数</span></span><br><span class="line">GenericObject genericParam = <span class="keyword">new</span> GenericObject(</span><br><span class="line">    <span class="string">"com.ostenant.sofa.rpc.example.generic.SampleGenericParamModel"</span>);</span><br><span class="line">genericParam.putField(<span class="string">"name"</span>, <span class="string">"Harrison"</span>);</span><br></pre></td></tr></table></figure><p><code>GenericObject</code> 持有一个 <code>Map&lt;String, Object&gt;</code> 类型的变量，你能够通过 <code>GenericObject</code> 提供的 <code>putField()</code> 方法，将参数类的属性和值放到这个 <code>Map</code> 中，以此来描述参数类。</p><ul><li>发起泛化调用</li></ul><p>通过 <code>GenericService</code> 的 <code>$genericInvoke(arg1, agr2, arg3)</code> 方法可以发起服务的泛化调用，各个参数含义如下：</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">含义</th><th style="text-align:left">参数可选</th></tr></thead><tbody><tr><td style="text-align:left">arg1</td><td style="text-align:left">目标方法名称</td><td style="text-align:left">必填</td></tr><tr><td style="text-align:left">arg2</td><td style="text-align:left">参数类型的数组，要求严格遵循先后次序</td><td style="text-align:left">必填</td></tr><tr><td style="text-align:left">arg3</td><td style="text-align:left">参数值的数组，要求与参数类型数组保持一致</td><td style="text-align:left">必填</td></tr><tr><td style="text-align:left">arg4</td><td style="text-align:left">返回值的Class类型</td><td style="text-align:left">可选</td></tr></tbody></table><p>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GenericObject genericResult = (GenericObject) sampleGenericServiceReference.$genericInvoke(</span><br><span class="line">    <span class="comment">// 目标方法名称</span></span><br><span class="line">    <span class="string">"sayGeneric"</span>,</span><br><span class="line">    <span class="comment">// 参数类型名称</span></span><br><span class="line">    <span class="keyword">new</span> String[] &#123; <span class="string">"com.ostenant.sofa.rpc.example.generic.SampleGenericParamModel"</span> &#125;,</span><br><span class="line">    <span class="comment">// 参数的值</span></span><br><span class="line">    <span class="keyword">new</span> Object[] &#123; genericParam &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证返回结果</span></span><br><span class="line">System.out.println(<span class="string">"Type: "</span> + genericResult.getType());</span><br><span class="line">System.out.println(<span class="string">"Name: "</span> + genericResult.getField(<span class="string">"name"</span>));</span><br><span class="line">System.out.println(<span class="string">"Value: "</span> + genericResult.getField(<span class="string">"value"</span>));</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SampleGenericResultModel sampleGenericResult = sampleGenericServiceReference.$genericInvoke(</span><br><span class="line">    <span class="comment">// 目标方法名称</span></span><br><span class="line">    <span class="string">"sayGeneric"</span>,</span><br><span class="line">    <span class="comment">// 参数类型名称</span></span><br><span class="line">    <span class="keyword">new</span> String[] &#123; <span class="string">"com.ostenant.sofa.rpc.example.generic.SampleGenericParamModel"</span> &#125;,</span><br><span class="line">    <span class="comment">// 参数的值</span></span><br><span class="line">    <span class="keyword">new</span> Object[] &#123; genericParam &#125;,</span><br><span class="line">    <span class="comment">// 返回值的Class类型</span></span><br><span class="line">    SampleGenericResultModel.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证返回结果</span></span><br><span class="line">System.out.println(<span class="string">"Type: "</span> + sampleGenericResult.getClass().getName());</span><br><span class="line">System.out.println(<span class="string">"Name: "</span> + sampleGenericResult.getName());</span><br><span class="line">System.out.println(<span class="string">"Value: "</span> + sampleGenericResult.getValue());</span><br></pre></td></tr></table></figure><p><strong>查看控制台输出</strong></p><p>两种方式输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type: com.ostenant.sofa.rpc.example.generic.SampleGenericResultModel</span><br><span class="line">Name: Harrison</span><br><span class="line">Value: sample generic value</span><br></pre></td></tr></table></figure><h2 id="3-过滤器配置"><a href="#3-过滤器配置" class="headerlink" title="3. 过滤器配置"></a>3. 过滤器配置</h2><p>SOFA-RPC 通过过滤器 Filter 来实现对请求和响应的拦截处理。用户可以自定义 Filter 实现拦截扩展，目前支持 bolt 协议。开发人员通过继承 <code>com.alipay.sofa.rpc.filter.Filter</code> 实现过滤器的自定义。</p><h4 id="配置说明-5"><a href="#配置说明-5" class="headerlink" title="配置说明"></a>配置说明</h4><p><strong>服务接口与实现类</strong></p><p>FilterService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FilterService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayFilter</span><span class="params">(String filter)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FilterServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterServiceImpl</span> <span class="keyword">implements</span> <span class="title">FilterService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayFilter</span><span class="params">(String filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filters;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务端过滤器</strong></p><p>在 Filter 实现类中，<code>invoke()</code> 方法实现具体的拦截逻辑，通过 <code>FilterInvoker.invoke(SofaRequest)</code> 触发服务的调用，在该方法前后可以实现具体的拦截处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleServerFilter</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SofaResponse <span class="title">invoke</span><span class="params">(FilterInvoker invoker, SofaRequest request)</span> <span class="keyword">throws</span> SofaRpcException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SampleFilter before server process"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.invoke(request);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"SampleFilter after server process"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务端发布配置</strong></p><p>服务端需要配置服务实现类、过滤器，然后在 <code>sofa:service</code> 的 <code>sofa:global-attrs</code> 标签配置 <code>filter</code> 属性，实现两者的绑定。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sampleFilter"</span> <span class="attr">class</span>=<span class="string">"com.ostenant.sofa.rpc.example.filter.SampleServerFilter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"filterService"</span> <span class="attr">class</span>=<span class="string">"com.ostenant.sofa.rpc.example.filter.FilterServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sofa:service</span> <span class="attr">ref</span>=<span class="string">"filterService"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.filter.FilterService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">filter</span>=<span class="string">"sampleFilter"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:service</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>客户端过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleClientFilter</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SofaResponse <span class="title">invoke</span><span class="params">(FilterInvoker invoker, SofaRequest request)</span> <span class="keyword">throws</span> SofaRpcException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SampleFilter before client invoke"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.invoke(request);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"SampleFilter after client invoke"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端引用配置</strong></p><p>同样的，客户端过滤器需要在 <code>sofa:reference</code> 的 <code>sofa:global-attrs</code> 标签中配置 <code>filter</code> 属性，实现客户端引用类的调用拦截。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sampleFilter"</span> <span class="attr">class</span>=<span class="string">"com.alipay.sofa.rpc.samples.filter.SampleClientFilter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sofa:reference</span> <span class="attr">id</span>=<span class="string">"filterServiceReference"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.filter.FilterService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:global-attrs</span> <span class="attr">filter</span>=<span class="string">"sampleFilter"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sofa:binding.bolt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sofa:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>服务端启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(FilterServerApplication.class);</span><br><span class="line">ApplicationContext applicationContext = springApplication.run(args);</span><br></pre></td></tr></table></figure><p><strong>客户端启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(FilterClientApplication.class);</span><br><span class="line">ApplicationContext applicationContext = springApplication.run(args);</span><br></pre></td></tr></table></figure><p><strong>客户端调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FilterService filterServiceReference = (FilterService) applicationContext.getBean(<span class="string">"filterServiceReference"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// sleep 5s, 便于观察过滤器效果</span></span><br><span class="line">    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String result = filterServiceReference.sayFilter(<span class="string">"filter"</span>);</span><br><span class="line">System.out.println(<span class="string">"Invoke result: "</span> + result);</span><br></pre></td></tr></table></figure><p><strong>查看拦截输出</strong></p><ul><li>服务端打印输出</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SampleFilter before server process</span><br><span class="line">SampleFilter after server process</span><br></pre></td></tr></table></figure><ul><li>客户端打印输出</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SampleFilter before client invoke</span><br><span class="line">SampleFilter after client invoke</span><br><span class="line">Invoke result: filter</span><br></pre></td></tr></table></figure><p>过滤器配置生效，总结过滤器拦截先后次序如下：</p><ol><li>客户端发起调用 -&gt; 客户端前置拦截 -&gt; 服务端前置拦截          </li><li>服务端方法执行</li><li>服务端后置拦截 -&gt; 客户端后置拦截 -&gt; 客户端接收返回值</li></ol><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文介绍了 SOFA-RPC 的集中调用方式，包括单向调用、同步调用、Future调用、回调，引入了 SOFA-RPC 独有的泛化调用机制，同时对过滤器的配置进行了简单介绍。</p><hr><p>欢迎扫码关注我的个人技术公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上篇文章简单地介绍了 SOFA-Boot 的功能特性，对 Readiness 健康检查的配置举例说明。重点介绍了如何在 SOFA-Boot 中引入 SOFA-RPC 中间件，给出了基于 bolt、rest 和 dubbo 等不同协议通道的服务发布与消费的全流程。&lt;/p&gt;
    
    </summary>
    
      <category term="RPC通信框架系列" scheme="https://ostenant.coding.me/categories/RPC%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="RPC" scheme="https://ostenant.coding.me/tags/RPC/"/>
    
      <category term="SOFA-Boot" scheme="https://ostenant.coding.me/tags/SOFA-Boot/"/>
    
      <category term="SOFA_RPC" scheme="https://ostenant.coding.me/tags/SOFA-RPC/"/>
    
  </entry>
  
  <entry>
    <title>蚂蚁金服SOFA-Boot整合SOFA-RPC(上篇)</title>
    <link href="https://ostenant.coding.me/2018/05/08/%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8DSOFA-Boot%E6%95%B4%E5%90%88SOFA-RPC(%E4%B8%8A%E7%AF%87)/"/>
    <id>https://ostenant.coding.me/2018/05/08/蚂蚁金服SOFA-Boot整合SOFA-RPC(上篇)/</id>
    <published>2018-05-08T13:23:00.000Z</published>
    <updated>2018-05-09T06:28:50.824Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上文介绍了 SOFARPC 的简单使用。在生产环境中，通常会将 SOFARPC 整合到 SpringBoot 中。蚂蚁金服提供了 SOFABoot 框架，SOFABoot 是蚂蚁金服开源的基于 Spring Boot 的研发框架，它在 Spring Boot 的基础上，提供了诸如 Readiness Check，类隔离，日志空间隔离等等能力。</p><a id="more"></a><p><img src="http://ols3fdyll.bkt.clouddn.com/SOFA.JPG" alt=""></p><p>在增强了 Spring Boot 的同时，SOFABoot 提供了让用户可以在 Spring Boot 中非常方便地使用 SOFA 中间件的能力。当前 SOFABoot 的 2.3.1 版本是基于 Spring Boot 1.4.2.RELEASE 来构建的。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-功能描述"><a href="#1-功能描述" class="headerlink" title="1. 功能描述"></a>1. 功能描述</h2><p>SOFABoot 在 Spring Boot 的基础上，提供了以下能力：</p><h4 id="1-1-扩展-Spring-Boot-的健康检查"><a href="#1-1-扩展-Spring-Boot-的健康检查" class="headerlink" title="1.1. 扩展 Spring Boot 的健康检查"></a>1.1. 扩展 Spring Boot 的健康检查</h4><p>在 Spring Boot 健康检查能力的基础上，提供了 Readiness Check 的能力，保证应用实例安全上线。</p><h4 id="1-2-日志空间隔离能力"><a href="#1-2-日志空间隔离能力" class="headerlink" title="1.2. 日志空间隔离能力"></a>1.2. 日志空间隔离能力</h4><p>中间件框架自动发现应用的日志实现依赖并独立打印日志，避免中间件和应用日志实现绑定，通过 sofa-common-tools 实现。</p><h4 id="1-3-提供类隔离的能力"><a href="#1-3-提供类隔离的能力" class="headerlink" title="1.3. 提供类隔离的能力"></a>1.3. 提供类隔离的能力</h4><p>基于 SOFAArk 框架提供类隔离能力，方便使用者解决各种类冲突问题。</p><h4 id="1-4-中间件的集成管理"><a href="#1-4-中间件的集成管理" class="headerlink" title="1.4. 中间件的集成管理"></a>1.4. 中间件的集成管理</h4><p>统一管控、提供中间件统一易用的编程接口、每一个 SOFA 中间件都是独立可插拔的组件。</p><h4 id="1-5-完全兼容-Spring-Boot"><a href="#1-5-完全兼容-Spring-Boot" class="headerlink" title="1.5. 完全兼容 Spring Boot"></a>1.5. 完全兼容 Spring Boot</h4><p>SOFABoot 基于 Spring Boot 的基础上进行构建，并且完全兼容 Spring Boot。</p><h2 id="2-快速开始"><a href="#2-快速开始" class="headerlink" title="2. 快速开始"></a>2. 快速开始</h2><h3 id="2-1-环境准备"><a href="#2-1-环境准备" class="headerlink" title="2.1. 环境准备"></a>2.1. 环境准备</h3><p>要使用 SOFABoot，需要先准备好基础环境，SOFABoot 依赖以下环境：</p><ul><li>JDK7 或 JDK8</li><li>需要采用 Apache Maven 3.2.5 或者以上的版本来编译</li></ul><h3 id="2-2-创建工程"><a href="#2-2-创建工程" class="headerlink" title="2.2. 创建工程"></a>2.2. 创建工程</h3><p>SOFABoot 是直接构建在 Spring Boot 之上，因此可以使用 Spring Boot 的工程生成工具来生成。添加一个 Web 的依赖，以便最后在浏览器中查看效果。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/sofa-boot-examples.png" alt=""></p><h3 id="2-3-引入-SOFABoot"><a href="#2-3-引入-SOFABoot" class="headerlink" title="2.3. 引入 SOFABoot"></a>2.3. 引入 SOFABoot</h3><p>在创建好一个 Spring Boot 的工程之后，接下来就需要引入 SOFABoot 的依赖。首先，需要将上文中生成的 Spring Boot 工程的 zip 包解压后，修改 maven 项目的配置文件 pom.xml。</p><p>替换 spring-boot-starter-parent 为相应版本的 sofaboot-dependencies，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>替换为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sofaboot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-SOFABoot-健康检查"><a href="#2-4-SOFABoot-健康检查" class="headerlink" title="2.4. SOFABoot 健康检查"></a>2.4. SOFABoot 健康检查</h3><h4 id="引入相关依赖"><a href="#引入相关依赖" class="headerlink" title="引入相关依赖"></a>引入相关依赖</h4><p>添加 SOFABoot 健康检查扩展能力的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>healthcheck-sofa-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后，在工程的 application.properties 文件下添加一个 SOFABoot 必须要使用的参数。</p><ul><li>spring.application.name：用于标示当前应用的名称</li><li>logging path：用于指定日志的输出目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Application Name</span><br><span class="line">spring.application.name=SOFABoot Example</span><br><span class="line"># logging path</span><br><span class="line">logging.path=./logs</span><br></pre></td></tr></table></figure><p>运行 main() 方法，项目启动以后，控制台的日志输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2018-05-09 09:56:48.305  INFO 15097 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)</span><br><span class="line">2018-05-09 09:56:48.309  INFO 15097 --- [           main] c.o.s.r.e.SofaBootExampleApplication     : Started SofaBootExampleApplication <span class="keyword">in</span> 2.551 seconds (JVM running <span class="keyword">for</span> 3.046)</span><br><span class="line">2018-05-09 09:57:46.005  INFO 15097 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet <span class="string">'dispatcherServlet'</span></span><br><span class="line">2018-05-09 09:57:46.005  INFO 15097 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet <span class="string">'dispatcherServlet'</span>: initialization started</span><br><span class="line">2018-05-09 09:57:46.021  INFO 15097 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet <span class="string">'dispatcherServlet'</span>: initialization completed <span class="keyword">in</span> 16 ms</span><br></pre></td></tr></table></figure><h4 id="查看健康状态"><a href="#查看健康状态" class="headerlink" title="查看健康状态"></a>查看健康状态</h4><ul><li>在浏览器中输入 <a href="http://localhost:8080/sofaboot/versions" target="_blank" rel="noopener">http://localhost:8080/sofaboot/versions</a> 来查看当前 SOFABoot 中使用 Maven 插件生成的版本信息汇总，结果类似如下：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"GroupId"</span>: <span class="string">"com.alipay.sofa"</span>,</span><br><span class="line">    <span class="attr">"Doc-Url"</span>: <span class="string">"https://github.com/alipay/sofa-boot"</span>,</span><br><span class="line">    <span class="attr">"ArtifactId"</span>: <span class="string">"infra-sofa-boot-starter"</span>,</span><br><span class="line">    <span class="attr">"Bulit-Time"</span>: <span class="string">"2018-04-18T22:19:09+0800"</span>,</span><br><span class="line">    <span class="attr">"Commit-Time"</span>: <span class="string">"2018-04-18T22:07:52+0800"</span>,</span><br><span class="line">    <span class="attr">"Commit-Id"</span>: <span class="string">"466f0e039b250ff7b201dc693eec7fa07eb21ad7"</span>,</span><br><span class="line">    <span class="attr">"Version"</span>: <span class="string">"2.3.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>在浏览器中输入 <a href="http://localhost:8080/health/readiness" target="_blank" rel="noopener">http://localhost:8080/health/readiness</a> 查看应用 Readiness Check 的状况，类似如下：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">  <span class="attr">"sofaBootComponentHealthCheckInfo"</span>: &#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"UP"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"springContextHealthCheckInfo"</span>: &#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"UP"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"DiskSpaceHealthIndicator"</span>: &#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">250790436864</span>,</span><br><span class="line">    <span class="attr">"free"</span>: <span class="number">208612020224</span>,</span><br><span class="line">    <span class="attr">"threshold"</span>: <span class="number">10485760</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>status: &quot;UP&quot;</code> 表示应用 <code>Readiness Check</code> 的就绪状态是健康的。</p><ul><li>在浏览器中输入 <a href="http://localhost:8080/health" target="_blank" rel="noopener">http://localhost:8080/health</a> 来查看应用的运行时健康状态（可能会随着时间发生变化,Spring Boot原生自带功能）。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">  <span class="attr">"sofaBootComponentHealthCheckInfo"</span>: &#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">    <span class="attr">"Middleware"</span>: &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"springContextHealthCheckInfo"</span>: &#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"UP"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"diskSpace"</span>: &#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">250790436864</span>,</span><br><span class="line">    <span class="attr">"free"</span>: <span class="number">208612528128</span>,</span><br><span class="line">    <span class="attr">"threshold"</span>: <span class="number">10485760</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><p>在上面的 application.properties 里面，我们配置的日志打印目录是 ./logs 即当前应用的根目录（我们可以根据自己的实践需要配置），在当前工程的根目录下可以看到类似如下结构的日志文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./logs</span><br><span class="line">├── health-check</span><br><span class="line">│   ├── sofaboot-common-default.log</span><br><span class="line">│   └── sofaboot-common-error.log</span><br><span class="line">├── infra</span><br><span class="line">│   ├── common-default.log</span><br><span class="line">│   └── common-error.log</span><br><span class="line">└── spring.log</span><br></pre></td></tr></table></figure><p>如果应用启动失败或者健康检查返回失败，可以通过相应的日志文件找到错误的原因，有些需要关注 common-error.log 日志。</p><h3 id="2-5-SOFA-RPC-环境准备"><a href="#2-5-SOFA-RPC-环境准备" class="headerlink" title="2.5. SOFA-RPC 环境准备"></a>2.5. SOFA-RPC 环境准备</h3><h4 id="引入相关依赖-1"><a href="#引入相关依赖-1" class="headerlink" title="引入相关依赖"></a>引入相关依赖</h4><p>SOFABoot 使用一系列后缀为 -sofa-boot-starter 来标示一个中间件服务，如果想要使用某个中间件，直接添加对应的依赖即可。进一步引入 SOFA-RPC 的 starter 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpc-sofa-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>选择 Zookeeper 作为服务注册列表，在 pom.xml 文件中引入相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意将 zkclient 重复的依赖排除在外，以免引起冲突。</p><h4 id="配置-zookeeper-集群"><a href="#配置-zookeeper-集群" class="headerlink" title="配置 zookeeper 集群"></a>配置 zookeeper 集群</h4><p>在 application.properties 中进一步配置 zookeeper 的地址信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># zookeeper address list</span><br><span class="line">com.alipay.sofa.rpc.registry.address=zookeeper://127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183?file=/home/admin/registry</span><br></pre></td></tr></table></figure><p>为了方便起见，本地使用 docker 环境对 zookeeper 集群进行容器编排。多个 zookeeper 节点通过逗号分隔，file 参数指定当 zookeeper 不可用时，可以利用本地缓存文件进行服务发现。</p><p>编写 docker-compose.yml 文件如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  zoo1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">zookeeper:latest</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">zoo1</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">2181</span><span class="string">:2181</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      ZOO_SERVERS:</span> <span class="string">server.1=0.0.0.0:2888:3888</span> <span class="string">server.2=zoo2:2888:3888</span> <span class="string">server.3=zoo3:2888:3888</span></span><br><span class="line"><span class="attr">  zoo2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">zookeeper:latest</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">zoo2</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">2182</span><span class="string">:2181</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      ZOO_MY_ID:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">      ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888</span> <span class="string">server.2=0.0.0.0:2888:3888</span> <span class="string">server.3=zoo3:2888:3888</span></span><br><span class="line"><span class="attr">  zoo3:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">zookeeper:latest</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">zoo3</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">2183</span><span class="string">:2181</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      ZOO_MY_ID:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">      ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888</span> <span class="string">server.2=zoo2:2888:3888</span> <span class="string">server.3=0.0.0.0:2888:3888</span></span><br></pre></td></tr></table></figure><p>进入 docker-compose.yml 所在文件目录， 运行 <code>docker-compose up -d</code> 启动3台 zookeeper 容器。启动完成后，运行 <code>docker-compose ps</code> 查看进程状态如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose ps</span><br><span class="line">      Name                    Command               State                     Ports                   </span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line">zookeeper_zoo1_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2181-&gt;2181/tcp, 2888/tcp, 3888/tcp</span><br><span class="line">zookeeper_zoo2_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2182-&gt;2181/tcp, 2888/tcp, 3888/tcp</span><br><span class="line">zookeeper_zoo3_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2183-&gt;2181/tcp, 2888/tcp, 3888/tcp</span><br></pre></td></tr></table></figure><p>zookeeper 容器集群启动完成，如果想要查看集群 leader，可以运行 <code>docker exec -it [container-id] /bin/bash</code> 进入容器运行 <code>zkServer.sh status</code> 逐一查看。这里加以不累述！</p><h4 id="XSD管理"><a href="#XSD管理" class="headerlink" title="XSD管理"></a>XSD管理</h4><p>在要使用的 XML 配置文件中将头部 xsd 文件的声明设置为如下，这样就能够使用 SOFABoot 定义的 XML 元素进行开发。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:sofa</span>=<span class="string">"http://sofastack.io/schema/sofaboot"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://sofastack.io/schema/sofaboot   http://sofastack.io/schema/sofaboot.xsd"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-SOFA-Boot-整合-SOFA-RPC"><a href="#2-6-SOFA-Boot-整合-SOFA-RPC" class="headerlink" title="2.6. SOFA-Boot 整合 SOFA-RPC"></a>2.6. SOFA-Boot 整合 SOFA-RPC</h3><h4 id="编写服务接口和实现类"><a href="#编写服务接口和实现类" class="headerlink" title="编写服务接口和实现类"></a>编写服务接口和实现类</h4><p>HelloSyncService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloSyncService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">saySync</span><span class="params">(String string)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloSyncServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSyncServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloSyncService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saySync</span><span class="params">(String sync)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写服务提供方配置文件"><a href="#编写服务提供方配置文件" class="headerlink" title="编写服务提供方配置文件"></a>编写服务提供方配置文件</h4><p>simple-server-example.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:sofa</span>=<span class="string">"http://sofastack.io/schema/sofaboot"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://sofastack.io/schema/sofaboot http://sofastack.io/schema/sofaboot.xsd"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloSyncServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.ostenant.sofa.rpc.example.simple.HelloSyncServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 以多种通信协议发布服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:service</span> <span class="attr">ref</span>=<span class="string">"helloSyncServiceImpl"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.simple.HelloSyncService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:binding.rest</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:binding.dubbo</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sofa:service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 <code>sofa:service</code> 元素将该服务发布，其中 <code>ref</code> 属性表示发布的服务实例，interface 属性表示该服务的接口。</p><ul><li>sofa:binding.bolt: 服务通过 bolt 协协议通道发布，底层基于 Netty 实现。</li><li>sofa:binding.rest: 服务通过 http 协议发布。</li><li>sofa:binding.dubbo: 服务基于 dubbo 的协议通道发布。</li></ul><h4 id="编写服务提供方启动程序"><a href="#编写服务提供方启动程序" class="headerlink" title="编写服务提供方启动程序"></a>编写服务提供方启动程序</h4><p>SimpleServerApplication.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(&#123; <span class="string">"classpath:simple-server-example.xml"</span> &#125;)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(SimpleServerApplication.class);</span><br><span class="line">        ApplicationContext applicationContext = springApplication.run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写服务消费方配置文件"><a href="#编写服务消费方配置文件" class="headerlink" title="编写服务消费方配置文件"></a>编写服务消费方配置文件</h4><p>simple-client-example.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:sofa</span>=<span class="string">"http://sofastack.io/schema/sofaboot"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://sofastack.io/schema/sofaboot http://sofastack.io/schema/sofaboot.xsd"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- bolt引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:reference</span> <span class="attr">id</span>=<span class="string">"boltHelloSyncServiceReference"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.simple.HelloSyncService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:binding.bolt</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sofa:reference</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- rest引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:reference</span> <span class="attr">id</span>=<span class="string">"restHelloSyncServiceReference"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.simple.HelloSyncService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:binding.rest</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sofa:reference</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- dubbo引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sofa:reference</span> <span class="attr">id</span>=<span class="string">"dubboHelloSyncServiceReference"</span> <span class="attr">interface</span>=<span class="string">"com.ostenant.sofa.rpc.example.simple.HelloSyncService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sofa:binding.dubbo</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sofa:reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写服务提供方启动程序-1"><a href="#编写服务提供方启动程序-1" class="headerlink" title="编写服务提供方启动程序"></a>编写服务提供方启动程序</h4><p>SimpleClientApplication.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(&#123; <span class="string">"classpath:simple-client-example.xml"</span> &#125;)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"server.port"</span>, <span class="string">"8081"</span>);</span><br><span class="line">        SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(SimpleClientApplication.class);</span><br><span class="line">        ApplicationContext applicationContext = springApplication.run(args);</span><br><span class="line"></span><br><span class="line">        HelloSyncService boltHelloSyncService = (HelloSyncService) applicationContext.getBean(<span class="string">"boltHelloSyncServiceReference"</span>);</span><br><span class="line">        HelloSyncService restHelloSyncService = (HelloSyncService) applicationContext.getBean(<span class="string">"restHelloSyncServiceReference"</span>);</span><br><span class="line">        HelloSyncService dubboHelloSyncService = (HelloSyncService) applicationContext.getBean(<span class="string">"dubboHelloSyncServiceReference"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Bolt result:"</span> + boltHelloSyncService.saySync(<span class="string">"bolt"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Rest result:"</span> + restHelloSyncService.saySync(<span class="string">"rest"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Dubbo result:"</span> + dubboHelloSyncService.saySync(<span class="string">"dubbo"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分别启动服务端和客户端"><a href="#分别启动服务端和客户端" class="headerlink" title="分别启动服务端和客户端"></a>分别启动服务端和客户端</h4><p>客户端控制台输出日志如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bolt result: bolt</span><br><span class="line">Rest result: rest</span><br><span class="line">Dubbo result: dubbo</span><br></pre></td></tr></table></figure><p>对于同一个服务，在服务发布方配置时，可在以 <code>sofa:service</code> 中通过 <code>sofa:binding.xxx</code> 提供多种协议通道配置；在服务消费方配置时，可以在 <code>sofa:reference</code> 中通过 <code>sofa:binding.xxx</code> 提供对不同通道服务的引用。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文引入了 SOFA-Boot 框架，对 SOFA-Boot 的将康检查功能和日志管理的使用进行了简单说明，然后在 SOFA-Boot 环境中引入了 SOFA-RPC 框架，并提供了一个完整的服务发布和注册的示例程序。</p><p>关于 SOFA-RPC 更丰富、强大的功能介绍，下篇敬请期待！</p><hr><p>欢迎扫码关注我的个人技术公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上文介绍了 SOFARPC 的简单使用。在生产环境中，通常会将 SOFARPC 整合到 SpringBoot 中。蚂蚁金服提供了 SOFABoot 框架，SOFABoot 是蚂蚁金服开源的基于 Spring Boot 的研发框架，它在 Spring Boot 的基础上，提供了诸如 Readiness Check，类隔离，日志空间隔离等等能力。&lt;/p&gt;
    
    </summary>
    
      <category term="RPC通信框架系列" scheme="https://ostenant.coding.me/categories/RPC%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="RPC" scheme="https://ostenant.coding.me/tags/RPC/"/>
    
      <category term="SOFA-RPC" scheme="https://ostenant.coding.me/tags/SOFA-RPC/"/>
    
      <category term="SOFA-Boot" scheme="https://ostenant.coding.me/tags/SOFA-Boot/"/>
    
  </entry>
  
  <entry>
    <title>蚂蚁金服RPC框架SOFA-RPC - 初体验</title>
    <link href="https://ostenant.coding.me/2018/04/29/%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8DRPC%E6%A1%86%E6%9E%B6SOFA-RPC%20-%20%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://ostenant.coding.me/2018/04/29/蚂蚁金服RPC框架SOFA-RPC - 初体验/</id>
    <published>2018-04-29T09:59:00.000Z</published>
    <updated>2018-05-09T06:21:43.934Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>SOFARPC 最早源于阿里内部的 HSF，是近期蚂蚁金服开源的一个高可扩展性、高性能、生产级的 Java RPC 框架。SOFA-RPC 在蚂蚁金服已经历了十多年的发展，致力于简化应用之间的 RPC 调用。为应用提供方便透明、稳定高效的点对点远程服务调用方案。</p><a id="more"></a><p><img src="http://ols3fdyll.bkt.clouddn.com/SOFA.JPG" alt=""></p><p>为了用户和开发者方便的进行功能扩展，SOFA-RPC 提供了丰富的模型抽象和可扩展接口，包括过滤器、路由、负载均衡等。同时围绕 SOFA-RPC 框架及其周边组件提供丰富的微服务治理方案。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-功能特性"><a href="#1-功能特性" class="headerlink" title="1. 功能特性"></a>1. 功能特性</h2><ul><li>透明化、高性能的远程服务调用</li><li>支持多种服务路由及负载均衡策略</li><li>支持多种注册中心的集成</li><li>支持 bolt、rest、dubbo 等多种通信协议  </li><li>支持同步、单向、回调、泛化等多种调用方式</li><li>支持集群容错、服务预热、自动故障隔离</li><li>强大的扩展功能，可以按需扩展各个功能组件</li></ul><h2 id="2-实现原理"><a href="#2-实现原理" class="headerlink" title="2. 实现原理"></a>2. 实现原理</h2><p><img src="http://ols3fdyll.bkt.clouddn.com/sofa-rpc-quckstart.png" alt=""></p><p>a. 服务发布</p><blockquote><p>当一个 SOFARPC 的应用启动的时候，如果发现当前应用需要发布 RPC 服务的话，那么 SOFARPC 会将这些服务注册到服务注册中心上。如图中 Service 指向 Registry。</p></blockquote><p>b. 服务订阅</p><blockquote><p>当引用这个服务的 SOFARPC 应用启动时，会从服务注册中心订阅到相应服务的元数据信息。服务注册中心收到订阅请求后，会将发布方的元数据列表实时推送给服务引用方。如图中 Registry 指向 Reference。</p></blockquote><p>c. 服务调用</p><blockquote><p>当服务引用方拿到地址以后，就可以从中选取地址发起调用了。如图中 Reference 指向 Service。</p></blockquote><h2 id="3-快速开始"><a href="#3-快速开始" class="headerlink" title="3. 快速开始"></a>3. 快速开始</h2><h3 id="3-1-引入sofa-rpc依赖"><a href="#3-1-引入sofa-rpc依赖" class="headerlink" title="3.1. 引入sofa-rpc依赖"></a>3.1. 引入sofa-rpc依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sofa-rpc-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-编写服务接口和服务实现类"><a href="#3-2-编写服务接口和服务实现类" class="headerlink" title="3.2. 编写服务接口和服务实现类"></a>3.2. 编写服务接口和服务实现类</h3><p>HelloService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String string)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Server receive: "</span> + string);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + string + <span class="string">" ！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-编写服务提供者启动类"><a href="#3-3-编写服务提供者启动类" class="headerlink" title="3.3. 编写服务提供者启动类"></a>3.3. 编写服务提供者启动类</h3><p>QuickStartServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickStartServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerConfig serverConfig = <span class="keyword">new</span> ServerConfig()</span><br><span class="line">                .setProtocol(<span class="string">"bolt"</span>) <span class="comment">// 设置一个协议，默认bolt</span></span><br><span class="line">                .setPort(<span class="number">9696</span>) <span class="comment">// 设置一个端口，默认12200</span></span><br><span class="line">                .setDaemon(<span class="keyword">false</span>); <span class="comment">// 非守护线程</span></span><br><span class="line"></span><br><span class="line">        ProviderConfig&lt;HelloService&gt; providerConfig = <span class="keyword">new</span> ProviderConfig&lt;HelloService&gt;()</span><br><span class="line">                .setInterfaceId(HelloService.class.getName()) <span class="comment">// 指定接口</span></span><br><span class="line">                .setRef(<span class="keyword">new</span> HelloServiceImpl()) <span class="comment">// 指定实现</span></span><br><span class="line">                .setServer(serverConfig); <span class="comment">// 指定服务端</span></span><br><span class="line"></span><br><span class="line">        providerConfig.export(); <span class="comment">// 发布服务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行服务端提供方，日志输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sofa-Middleware-Log SLF4J Warn : No <span class="built_in">log</span> util is usable, Default app logger will be used.</span><br><span class="line">SLF4J: Failed to load class <span class="string">"org.slf4j.impl.StaticLoggerBinder"</span>.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html<span class="comment">#StaticLoggerBinder for further details.</span></span><br><span class="line">Sofa-Middleware-Log SLF4J Warn : No <span class="built_in">log</span> util is usable, Default app logger will be used.</span><br></pre></td></tr></table></figure><h3 id="3-4-编写服务消费者启动类"><a href="#3-4-编写服务消费者启动类" class="headerlink" title="3.4. 编写服务消费者启动类"></a>3.4. 编写服务消费者启动类</h3><p>QuickStartClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickStartClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConsumerConfig&lt;HelloService&gt; consumerConfig = <span class="keyword">new</span> ConsumerConfig&lt;HelloService&gt;()</span><br><span class="line">                .setInterfaceId(HelloService.class.getName()) <span class="comment">// 指定接口</span></span><br><span class="line">                .setProtocol(<span class="string">"bolt"</span>) <span class="comment">// 指定协议</span></span><br><span class="line">                .setDirectUrl(<span class="string">"bolt://127.0.0.1:9696"</span>); <span class="comment">// 指定直连地址</span></span><br><span class="line"></span><br><span class="line">        HelloService helloService = consumerConfig.refer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(helloService.sayHello(<span class="string">"world"</span>));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行服务端消费方，调用服务提供方：</p><ul><li>服务提供方日志输出如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Server receive: world</span><br><span class="line">Server receive: world</span><br><span class="line">Server receive: world</span><br><span class="line">Server receive: world</span><br></pre></td></tr></table></figure><ul><li>服务消费方日志输出如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SLF4J: Failed to load class <span class="string">"org.slf4j.impl.StaticLoggerBinder"</span>.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html<span class="comment">#StaticLoggerBinder for further details.</span></span><br><span class="line">Sofa-Middleware-Log SLF4J Warn : No <span class="built_in">log</span> util is usable, Default app logger will be used.</span><br><span class="line">Sofa-Middleware-Log SLF4J Warn : No <span class="built_in">log</span> util is usable, Default app logger will be used.</span><br><span class="line">hello world ！</span><br><span class="line">hello world ！</span><br><span class="line">hello world ！</span><br><span class="line">hello world ！</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这是一个快速入门的例子！</p><p>可以发现，在使用上，SOFA-RPC 与淘宝的 Dubbo，微博的 Motan 并无太大的区别。Dubbo 作为整套服务治理而存在，而 SOFA-RPC 只是一款轻量级的 RPC 框架，基于 HSF 框架改造，提供更加完善、强大的、多样化 RPC 编程 API。</p><hr><p>欢迎扫码关注我的个人技术公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;SOFARPC 最早源于阿里内部的 HSF，是近期蚂蚁金服开源的一个高可扩展性、高性能、生产级的 Java RPC 框架。SOFA-RPC 在蚂蚁金服已经历了十多年的发展，致力于简化应用之间的 RPC 调用。为应用提供方便透明、稳定高效的点对点远程服务调用方案。&lt;/p&gt;
    
    </summary>
    
      <category term="RPC通信框架系列" scheme="https://ostenant.coding.me/categories/RPC%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="RPC" scheme="https://ostenant.coding.me/tags/RPC/"/>
    
      <category term="SOFA-RPC" scheme="https://ostenant.coding.me/tags/SOFA-RPC/"/>
    
  </entry>
  
  <entry>
    <title>分布式理论(四) - 3PC协议</title>
    <link href="https://ostenant.coding.me/2018/04/28/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA(%E5%9B%9B)%20-%203PC%E5%8D%8F%E8%AE%AE/"/>
    <id>https://ostenant.coding.me/2018/04/28/分布式理论(四) - 3PC协议/</id>
    <published>2018-04-28T13:26:00.000Z</published>
    <updated>2018-05-08T02:49:46.095Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于二阶段提交存在着诸如同步阻塞、单点问题、脑裂等缺陷。所以，研究者们在二阶段提交的基础上做了改进，提出了三阶段提交。</p><a id="more"></a><p><img src="http://ols3fdyll.bkt.clouddn.com/3PC.png" alt=""></p><p>与两阶段提交不同的是，三阶段提交有两个改动点。</p><ol><li>引入超时机制 - 同时在协调者和参与者中都引入超时机制。</li><li>在第一阶段和第二阶段中插入一个准备阶段，保证了在最后提交阶段之前各参与节点的状态是一致的。</li></ol><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-三阶段提交的定义"><a href="#1-三阶段提交的定义" class="headerlink" title="1. 三阶段提交的定义"></a>1. 三阶段提交的定义</h2><p>三阶段提交（Three-phase commit），也叫三阶段提交协议（Three-phase commit protocol），是二阶段提交（2PC）的改进版本。</p><p>所谓的三个阶段分别是：询问，然后再锁资源，最后真正提交。</p><ul><li>第一阶段：CanCommit</li><li>第二阶段：PreCommit</li><li>第三阶段：Do Commit</li></ul><h2 id="2-三阶段提交的过程"><a href="#2-三阶段提交的过程" class="headerlink" title="2. 三阶段提交的过程"></a>2. 三阶段提交的过程</h2><h3 id="2-1-阶段一：CanCommit"><a href="#2-1-阶段一：CanCommit" class="headerlink" title="2.1. 阶段一：CanCommit"></a>2.1. 阶段一：CanCommit</h3><p>3PC的CanCommit阶段其实和2PC的准备阶段很像。协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。</p><p>a. 事务询问</p><blockquote><p>协调者向参与者发送CanCommit请求。询问是否可以执行事务提交操作。然后开始等待参与者的响应。</p></blockquote><p>b. 响应反馈</p><blockquote><p>参与者接到CanCommit请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回Yes响应，并进入预备状态；否则反馈No。</p></blockquote><h3 id="2-2-阶段二：PreCommit"><a href="#2-2-阶段二：PreCommit" class="headerlink" title="2.2. 阶段二：PreCommit"></a>2.2. 阶段二：PreCommit</h3><p>协调者在得到所有参与者的响应之后，会根据结果执行2种操作：执行事务预提交，或者中断事务。</p><h4 id="2-2-1-执行事务预提交"><a href="#2-2-1-执行事务预提交" class="headerlink" title="2.2.1. 执行事务预提交"></a>2.2.1. 执行事务预提交</h4><p>a. 发送预提交请求</p><blockquote><p>协调者向所有参与者节点发出 preCommit 的请求，并进入 prepared 状态。</p></blockquote><p>b. 事务预提交</p><blockquote><p>参与者受到 preCommit 请求后，会执行事务操作，对应 2PC 准备阶段中的 “执行事务”，也会 Undo 和 Redo 信息记录到事务日志中。</p></blockquote><p>c. 各参与者响应反馈</p><blockquote><p>如果参与者成功执行了事务，就反馈 ACK 响应，同时等待指令：提交（commit） 或终止（abort）。</p></blockquote><h4 id="2-2-2-中断事务"><a href="#2-2-2-中断事务" class="headerlink" title="2.2.2. 中断事务"></a>2.2.2. 中断事务</h4><p>a. 发送中断请求</p><blockquote><p>协调者向所有参与者节点发出 abort 请求 。</p></blockquote><p>b. 中断事务</p><blockquote><p>参与者如果收到 abort 请求或者超时了，都会中断事务。</p></blockquote><h3 id="2-3-阶段三：Do-Commit"><a href="#2-3-阶段三：Do-Commit" class="headerlink" title="2.3. 阶段三：Do Commit"></a>2.3. 阶段三：Do Commit</h3><p>该阶段进行真正的事务提交，也可以分为以下两种情况。</p><h4 id="2-3-1-执行提交"><a href="#2-3-1-执行提交" class="headerlink" title="2.3.1. 执行提交"></a>2.3.1. 执行提交</h4><p>a. 发送提交请求</p><blockquote><p>协调者接收到各参与者发送的ACK响应，那么他将从预提交状态进入到提交状态。并向所有参与者发送 doCommit 请求。</p></blockquote><p>b. 事务提交</p><blockquote><p>参与者接收到 doCommit 请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源。</p></blockquote><p>c. 响应反馈</p><blockquote><p>事务提交完之后，向协调者发送 ACK 响应。</p></blockquote><p>d. 完成事务</p><blockquote><p>协调者接收到所有参与者的 ACK 响应之后，完成事务。</p></blockquote><h4 id="2-3-2-中断事务"><a href="#2-3-2-中断事务" class="headerlink" title="2.3.2. 中断事务"></a>2.3.2. 中断事务</h4><p>协调者没有接收到参与者发送的 ACK 响应（可能是接受者发送的不是ACK响应，也可能响应超时），那么就会执行中断事务。</p><p>a. 发送中断请求</p><blockquote><p>协调者向所有参与者发送 abort 请求。</p></blockquote><p>b. 事务回滚</p><blockquote><p>参与者接收到 abort 请求之后，利用其在阶段二记录的 undo 信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。</p></blockquote><p>c. 反馈结果</p><blockquote><p>参与者完成事务回滚之后，向协调者发送 ACK 消息。</p></blockquote><p>d. 中断事务</p><blockquote><p>协调者接收到参与者反馈的 ACK 消息之后，完成事务的中断。</p></blockquote><h1 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h1><h2 id="3-1-三阶段提交的优点"><a href="#3-1-三阶段提交的优点" class="headerlink" title="3.1. 三阶段提交的优点"></a>3.1. 三阶段提交的优点</h2><p>相对于二阶段提交，三阶段提交主要解决的单点故障问题，并减少了阻塞的时间。</p><p>因为一旦参与者无法及时收到来自协调者的信息之后，他会默认执行 commit。而不会一直持有事务资源并处于阻塞状态。</p><h3 id="3-2-三阶段提交的缺点"><a href="#3-2-三阶段提交的缺点" class="headerlink" title="3.2. 三阶段提交的缺点"></a>3.2. 三阶段提交的缺点</h3><p>三阶段提交也会导致数据一致性问题。由于网络原因，协调者发送的 abort 响应没有及时被参与者接收到，那么参与者在等待超时之后执行了 commit 操作。</p><p>这样就和其他接到 abort 命令并执行回滚的参与者之间存在数据不一致的情况。</p><hr><p>欢迎扫码关注公众号：零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于二阶段提交存在着诸如同步阻塞、单点问题、脑裂等缺陷。所以，研究者们在二阶段提交的基础上做了改进，提出了三阶段提交。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系列" scheme="https://ostenant.coding.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="分布式" scheme="https://ostenant.coding.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="3PC" scheme="https://ostenant.coding.me/tags/3PC/"/>
    
  </entry>
  
  <entry>
    <title>分布式理论(三) - 2PC协议</title>
    <link href="https://ostenant.coding.me/2018/04/25/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA(%E4%B8%89)%20-%202PC%E5%8D%8F%E8%AE%AE/"/>
    <id>https://ostenant.coding.me/2018/04/25/分布式理论(三) - 2PC协议/</id>
    <published>2018-04-25T14:22:00.000Z</published>
    <updated>2018-05-08T02:49:46.095Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于BASE理论需要在一致性和可用性方面做出权衡，因此涌现了很多关于一致性的算法和协议。其中比较著名的有二阶提交协议（2 Phase Commitment Protocol），三阶提交协议（3 Phase Commitment Protocol）和Paxos算法。</p><a id="more"></a><p>本文要介绍的2PC协议，分为两个阶段提交一个事务。并通过协调者和各个参与者的配合，实现分布式一致性。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/2PC.png" alt=""></p><p>两个阶段事务提交协议，由协调者和参与者共同完成。</p><table><thead><tr><th style="text-align:left">角色</th><th style="text-align:left">XA概念</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">协调者</td><td style="text-align:left">事务管理器</td><td style="text-align:left">协调各个参与者，对分布式事务进行提交或回滚</td></tr><tr><td style="text-align:left">参与者</td><td style="text-align:left">资源管理器</td><td style="text-align:left">分布式集群中的节点</td></tr></tbody></table><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-分布式事务"><a href="#1-分布式事务" class="headerlink" title="1. 分布式事务"></a>1. 分布式事务</h2><p>分布式事务是指会涉及到操作多个数据库的事务，其实就是将对同一库事务的概念扩大到了对多个库的事务。目的是为了保证分布式系统中的数据一致性。</p><p>分布式事务处理的关键是：</p><ol><li>需要记录事务在任何节点所做的所有动作；</li><li>事务进行的所有操作要么全部提交，要么全部回滚。</li></ol><h2 id="2-XA规范"><a href="#2-XA规范" class="headerlink" title="2. XA规范"></a>2. XA规范</h2><h3 id="2-1-XA规范的组成"><a href="#2-1-XA规范的组成" class="headerlink" title="2.1. XA规范的组成"></a>2.1. XA规范的组成</h3><p>XA规范是由 X/Open组织（即现在的 Open Group ）定义的分布式事务处理模型。 X/Open DTP 模型（ 1994 ）包括：</p><ul><li>应用程序（ AP ）</li><li>事务管理器（ TM ）：交易中间件等</li><li>资源管理器（ RM ）：关系型数据库等</li><li>通信资源管理器（ CRM ）：消息中间件等</li></ul><h3 id="2-2-XA规范的定义"><a href="#2-2-XA规范的定义" class="headerlink" title="2.2. XA规范的定义"></a>2.2. XA规范的定义</h3><p>XA规范定义了交易中间件与数据库之间的接口规范（即接口函数），交易中间件用它来通知数据库事务的开始、结束以及提交、回滚等。而XA接口函数由数据库厂商提供。</p><blockquote><p>二阶提交协议和三阶提交协议就是基于XA规范提出的其中，二阶段提交就是实现XA分布式事务的关键。</p></blockquote><h3 id="2-3-XA规范编程规范"><a href="#2-3-XA规范编程规范" class="headerlink" title="2.3. XA规范编程规范"></a>2.3. XA规范编程规范</h3><ol><li><p>配置TM，给TM注册RM作为数据源。其中，一个TM可以注册多个RM。</p></li><li><p>AP向TM发起一个全局事务。这时，TM会发送一个XID（全局事务ID）通知各个RM。</p></li><li><p>AP从TM获取资源管理器的代理（例如：使用JTA接口，从TM管理的上下文中，获取出这个TM所管理的RM的JDBC连接或JMS连接）。</p></li><li><p>AP通过从TM中获取的连接，间接操作RM进行业务操作。TM在每次AP操作时把XID传递给RM，RM正是通过这个XID关联来操作和事务的关系的。</p></li><li><p>AP结束全局事务时，TM会通知RM全局事务结束。开始二段提交，也就是prepare - commit的过程。</p></li></ol><p>XA规范的流程，大致如图所示：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/XA_SEQ.png" alt=""></p><h2 id="3-二阶段提交（2PC）"><a href="#3-二阶段提交（2PC）" class="headerlink" title="3. 二阶段提交（2PC）"></a>3. 二阶段提交（2PC）</h2><h3 id="3-1-二阶段提交的定义"><a href="#3-1-二阶段提交的定义" class="headerlink" title="3.1. 二阶段提交的定义"></a>3.1. 二阶段提交的定义</h3><p>二阶段提交的算法思路可以概括为：每个参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报，决定各参与者是否要提交操作还是中止操作。</p><p>所谓的两个阶段分别是：</p><ul><li>第一阶段：准备阶段（投票阶段）</li><li>第二阶段：提交阶段（执行阶段）</li></ul><h4 id="3-1-1-准备阶段"><a href="#3-1-1-准备阶段" class="headerlink" title="3.1.1. 准备阶段"></a>3.1.1. 准备阶段</h4><p>准备阶段分为三个步骤：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/2PC_1.png" alt=""></p><p>a. 事务询问</p><blockquote><p>协调者向所有的参与者询问，是否准备好了执行事务，并开始等待各参与者的响应。</p></blockquote><p>b. 执行事务</p><blockquote><p>各参与者节点执行事务操作。如果本地事务成功，将Undo和Redo信息记入事务日志中，但不提交；否则，直接返回失败，退出执行。</p></blockquote><p>c. 各参与者向协调者反馈事务询问的响应</p><blockquote><p>如果参与者成功执行了事务操作，那么就反馈给协调者 Yes响应，表示事务可以执行提交；如果参与者没有成功执行事务，就返回No给协调者，表示事务不可以执行提交。</p></blockquote><h4 id="3-1-2-提交阶段"><a href="#3-1-2-提交阶段" class="headerlink" title="3.1.2. 提交阶段"></a>3.1.2. 提交阶段</h4><p>在提交阶段中，会根据准备阶段的投票结果执行2种操作：执行事务提交，中断事务。</p><p><strong>提交事务过程如下：</strong></p><p><img src="http://ols3fdyll.bkt.clouddn.com/2PC_21.png" alt=""></p><p>a. 发送提交请求</p><blockquote><p>协调者向所有参与者发出commit请求。</p></blockquote><p>b. 事务提交</p><blockquote><p>参与者收到commit请求后，会正式执行事务提交操作，并在完成提交之后，释放整个事务执行期间占用的事务资源。</p></blockquote><p>c. 反馈事务提交结果</p><blockquote><p>参与者在完成事务提交之后，向协调者发送Ack信息。</p></blockquote><p>d. 事务提交确认</p><blockquote><p>协调者接收到所有参与者反馈的Ack信息后，完成事务。</p></blockquote><p><strong>中断事务过程如下：</strong></p><p><img src="http://ols3fdyll.bkt.clouddn.com/2PC_22.png" alt=""></p><p>a. 发送回滚请求</p><blockquote><p>协调者向所有参与者发出Rollback请求。</p></blockquote><p>b. 事务回滚</p><blockquote><p>参与者接收到Rollback请求后，会利用其在提交阶段种记录的Undo信息，来执行事务回滚操作。在完成回滚之后，释放在整个事务执行期间占用的资源。</p></blockquote><p>c. 反馈事务回滚结果</p><blockquote><p>参与者在完成事务回滚之后，想协调者发送Ack信息。</p></blockquote><p>d. 事务中断确认</p><blockquote><p>协调者接收到所有参与者反馈的Ack信息后，完成事务中断。</p></blockquote><h3 id="3-1-二阶段提交的优缺点"><a href="#3-1-二阶段提交的优缺点" class="headerlink" title="3.1. 二阶段提交的优缺点"></a>3.1. 二阶段提交的优缺点</h3><ul><li>优点：原理简单，实现方便。</li><li>缺点：同步阻塞，单点问题，数据不一致，容错性不好。</li></ul><h4 id="同步阻塞"><a href="#同步阻塞" class="headerlink" title="同步阻塞"></a>同步阻塞</h4><p>在二阶段提交的过程中，所有的节点都在等待其他节点的响应，无法进行其他操作。这种同步阻塞极大的限制了分布式系统的性能。</p><h4 id="单点问题"><a href="#单点问题" class="headerlink" title="单点问题"></a>单点问题</h4><p>协调者在整个二阶段提交过程中很重要，如果协调者在提交阶段出现问题，那么整个流程将无法运转。更重要的是，其他参与者将会处于一直锁定事务资源的状态中，而无法继续完成事务操作。</p><h4 id="数据不一致"><a href="#数据不一致" class="headerlink" title="数据不一致"></a>数据不一致</h4><p>假设当协调者向所有的参与者发送commit请求之后，发生了局部网络异常，或者是协调者在尚未发送完所有 commit请求之前自身发生了崩溃，导致最终只有部分参与者收到了commit请求。这将导致严重的数据不一致问题。</p><h4 id="容错性不好"><a href="#容错性不好" class="headerlink" title="容错性不好"></a>容错性不好</h4><p>如果在二阶段提交的提交询问阶段中，参与者出现故障，导致协调者始终无法获取到所有参与者的确认信息，这时协调者只能依靠其自身的超时机制，判断是否需要中断事务。显然，这种策略过于保守。换句话说，二阶段提交协议没有设计较为完善的容错机制，任意一个节点是失败都会导致整个事务的失败。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>对于2PC协议存在的同步阻塞、单点问题，将在下一篇文章的3PC协议中引入解决方案。</p><hr><p>欢迎扫码关注公众号：零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于BASE理论需要在一致性和可用性方面做出权衡，因此涌现了很多关于一致性的算法和协议。其中比较著名的有二阶提交协议（2 Phase Commitment Protocol），三阶提交协议（3 Phase Commitment Protocol）和Paxos算法。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系列" scheme="https://ostenant.coding.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="分布式" scheme="https://ostenant.coding.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="2PC" scheme="https://ostenant.coding.me/tags/2PC/"/>
    
  </entry>
  
  <entry>
    <title>分布式理论(二) - BASE理论</title>
    <link href="https://ostenant.coding.me/2018/04/24/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA(%E4%BA%8C)%20-%20BASE%E7%90%86%E8%AE%BA/"/>
    <id>https://ostenant.coding.me/2018/04/24/分布式理论(二) - BASE理论/</id>
    <published>2018-04-24T12:41:00.000Z</published>
    <updated>2018-05-08T02:49:46.095Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>BASE理论是由eBay架构师提出的。BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网分布式系统实践的总结，是基于CAP定律逐步演化而来。其核心思想是即使无法做到强一致性，但每个应用都可以根据自身业务特点，才用适当的方式来使系统打到最终一致性。</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-CAP的3选2伪命题"><a href="#1-CAP的3选2伪命题" class="headerlink" title="1. CAP的3选2伪命题"></a>1. CAP的3选2伪命题</h2><p>实际上，不是为了P（分区容错性），必须在C（一致性）和A（可用性）之间任选其一。分区的情况很少出现，CAP在大多时间能够同时满足C和A。</p><p>对于分区存在或者探知其影响的情况下，需要提供一种预备策略做出处理：</p><ul><li>探知分区的发生；</li><li>进入显示的分区模式，限制某些操作；</li><li>启动恢复过程，恢复数据一致性，补偿分区发生期间的错误。</li></ul><h2 id="2-BASE理论简介"><a href="#2-BASE理论简介" class="headerlink" title="2. BASE理论简介"></a>2. BASE理论简介</h2><p>BASE理论是Basically Available(基本可用)，Soft State（软状态）和Eventually Consistent（最终一致性）三个短语的缩写。</p><p>其核心思想是：</p><blockquote><p>既是无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。</p></blockquote><h2 id="3-BASE理论的内容"><a href="#3-BASE理论的内容" class="headerlink" title="3. BASE理论的内容"></a>3. BASE理论的内容</h2><ul><li>基本可用（Basically Available）</li><li>软状态（Soft State）</li><li>最终一致性（Eventually Consistent）</li></ul><p>下面展开讨论：</p><h3 id="3-1-基本可用"><a href="#3-1-基本可用" class="headerlink" title="3.1. 基本可用"></a>3.1. 基本可用</h3><p>什么是基本可用呢？假设系统，出现了不可预知的故障，但还是能用，相比较正常的系统而言：</p><ol><li><p><strong>响应时间上的损失</strong>：正常情况下的搜索引擎0.5秒即返回给用户结果，而基本可用的搜索引擎可以在2秒作用返回结果。</p></li><li><p><strong>功能上的损失</strong>：在一个电商网站上，正常情况下，用户可以顺利完成每一笔订单。但是到了大促期间，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面。</p></li></ol><h3 id="3-2-软状态"><a href="#3-2-软状态" class="headerlink" title="3.2. 软状态"></a>3.2. 软状态</h3><p>什么是软状态呢？相对于原子性而言，要求多个节点的数据副本都是一致的，这是一种“硬状态”。</p><p>软状态指的是：允许系统中的数据存在中间状态，并认为该状态不影响系统的整体可用性，即允许系统在多个不同节点的数据副本存在数据延时。</p><h3 id="3-3-最终一致性"><a href="#3-3-最终一致性" class="headerlink" title="3.3. 最终一致性"></a>3.3. 最终一致性</h3><p>上面说软状态，然后不可能一直是软状态，必须有个时间期限。在期限过后，应当保证所有副本保持数据一致性，从而达到数据的最终一致性。这个时间期限取决于网络延时、系统负载、数据复制方案设计等等因素。</p><p>而在实际工程实践中，最终一致性分为5种：</p><h4 id="3-3-1-因果一致性（Causal-consistency）"><a href="#3-3-1-因果一致性（Causal-consistency）" class="headerlink" title="3.3.1. 因果一致性（Causal consistency）"></a>3.3.1. 因果一致性（Causal consistency）</h4><p>因果一致性指的是：如果节点A在更新完某个数据后通知了节点B，那么节点B之后对该数据的访问和修改都是基于A更新后的值。于此同时，和节点A无因果关系的节点C的数据访问则没有这样的限制。</p><h4 id="3-3-2-读己之所写（Read-your-writes）"><a href="#3-3-2-读己之所写（Read-your-writes）" class="headerlink" title="3.3.2. 读己之所写（Read your writes）"></a>3.3.2. 读己之所写（Read your writes）</h4><p>读己之所写指的是：节点A更新一个数据后，它自身总是能访问到自身更新过的最新值，而不会看到旧值。其实也算一种因果一致性。</p><h4 id="3-3-3-会话一致性（Session-consistency）"><a href="#3-3-3-会话一致性（Session-consistency）" class="headerlink" title="3.3.3. 会话一致性（Session consistency）"></a>3.3.3. 会话一致性（Session consistency）</h4><p>会话一致性将对系统数据的访问过程框定在了一个会话当中：系统能保证在同一个有效的会话中实现 “读己之所写” 的一致性，也就是说，执行更新操作之后，客户端能够在同一个会话中始终读取到该数据项的最新值。</p><h4 id="3-3-4-单调读一致性（Monotonic-read-consistency）"><a href="#3-3-4-单调读一致性（Monotonic-read-consistency）" class="headerlink" title="3.3.4. 单调读一致性（Monotonic read consistency）"></a>3.3.4. 单调读一致性（Monotonic read consistency）</h4><p>单调读一致性指的是：如果一个节点从系统中读取出一个数据项的某个值后，那么系统对于该节点后续的任何数据访问都不应该返回更旧的值。</p><h4 id="3-3-5-单调写一致性（Monotonic-write-consistency）"><a href="#3-3-5-单调写一致性（Monotonic-write-consistency）" class="headerlink" title="3.3.5. 单调写一致性（Monotonic write consistency）"></a>3.3.5. 单调写一致性（Monotonic write consistency）</h4><p>单调写一致性指的是：一个系统要能够保证来自同一个节点的写操作被顺序的执行。</p><blockquote><p>在实际的实践中，这5种系统往往会结合使用，以构建一个具有最终一致性的分布式系统。</p></blockquote><p>实际上，不只是分布式系统使用最终一致性，关系型数据库在某个功能上，也是使用最终一致性的。比如备份，数据库的复制过程是需要时间的，这个复制过程中，业务读取到的值就是旧的。当然，最终还是达成了数据一致性。这也算是一个最终一致性的经典案例。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>总体来说BASE理论面向的是大型高可用、可扩展的分布式系统。与传统ACID特性相反，不同于ACID的强一致性模型，BASE提出通过牺牲强一致性来获得可用性，并允许数据段时间内的不一致，但是最终达到一致状态。同时，在实际分布式场景中，不同业务对数据的一致性要求不一样。因此在设计中，ACID和BASE理论往往又会结合使用。</p><hr><p>欢迎扫码关注公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;BASE理论是由eBay架构师提出的。BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网分布式系统实践的总结，是基于CAP定律逐步演化而来。其核心思想是即使无法做到强一致性，但每个应用都可以根据自身业务特点，才用适当的方式来使系统打到最终一致性。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系列" scheme="https://ostenant.coding.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="分布式" scheme="https://ostenant.coding.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="BASE" scheme="https://ostenant.coding.me/tags/BASE/"/>
    
  </entry>
  
  <entry>
    <title>分布式理论(一) - CAP定理</title>
    <link href="https://ostenant.coding.me/2018/04/23/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA(%E4%B8%80)%20-%20CAP%E5%AE%9A%E7%90%86/"/>
    <id>https://ostenant.coding.me/2018/04/23/分布式理论(一) - CAP定理/</id>
    <published>2018-04-23T12:33:00.000Z</published>
    <updated>2018-05-08T02:49:46.094Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性）这三个基本需求，最多只能同时满足其中的2个。</p><a id="more"></a><p><img src="http://ols3fdyll.bkt.clouddn.com/CAP.png" alt=""></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-CAP原则简介"><a href="#1-CAP原则简介" class="headerlink" title="1. CAP原则简介"></a>1. CAP原则简介</h2><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Consistency（一致性）</td><td style="text-align:left">指数据在多个副本之间能够保持一致的特性（严格的一致性）</td></tr><tr><td style="text-align:left">Availability（可用性）</td><td style="text-align:left">指系统提供的服务必须一直处于可用的状态，每次请求都能获取到非错的响应（不保证获取的数据为最新数据）</td></tr><tr><td style="text-align:left">Partition tolerance（分区容错性）</td><td style="text-align:left">分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务，除非整个网络环境都发生了故障</td></tr></tbody></table><p><strong>什么是分区？</strong></p><blockquote><p>在分布式系统中，不同的节点分布在不同的子网络中，由于一些特殊的原因，这些子节点之间出现了网络不通的状态，但他们的内部子网络是正常的。从而导致了整个系统的环境被切分成了若干个孤立的区域，这就是分区。</p></blockquote><h2 id="2-CAP原则论证"><a href="#2-CAP原则论证" class="headerlink" title="2. CAP原则论证"></a>2. CAP原则论证</h2><p>如图所示，是我们证明CAP的基本场景，网络中有两个节点N1和N2，可以简单的理解N1和N2分别是两台计算机，他们之间网络可以连通，N1中有一个应用程序A，和一个数据库V，N2也有一个应用程序B和一个数据库V。现在，A和B是分布式系统的两个部分，V是分布式系统的数据存储的两个子数据库。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/CAP_prove.png" alt=""></p><ul><li>在满足一致性的时候，N1和N2中的数据是一样的，V0=V0。</li><li>在满足可用性的时候，用户不管是请求N1或者N2，都会得到立即响应。</li><li>在满足分区容错性的情况下，N1和N2有任何一方宕机，或者网络不通的时候，都不会影响N1和N2彼此之间的正常运作。</li></ul><p>如图所示，这是分布式系统正常运转的流程，用户向N1机器请求数据更新，程序A更新数据库V0为V1。分布式系统将数据进行同步操作M，将V1同步的N2中V0，使得N2中的数据V0也更新为V1，N2中的数据再响应N2的请求。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/CAP_prove2.png" alt=""></p><p>根据CAP原则定义，系统的一致性、可用性和分区容错性细分如下：</p><ul><li>一致性：N1和N2的数据库V之间的数据是否完全一样。</li><li>可用性：N1和N2的对外部的请求能否做出正常的响应。</li><li>分区容错性：N1和N2之间的网络是否互通。</li></ul><p>这是正常运作的场景，也是理想的场景。作为一个分布式系统，它和单机系统的最大区别，就在于网络。现在假设一种极端情况，N1和N2之间的网络断开了，我们要支持这种网络异常。相当于要满足分区容错性，能不能同时满足一致性和可用性呢？还是说要对他们进行取舍？</p><p><img src="http://ols3fdyll.bkt.clouddn.com/CAP_prove3.png" alt=""></p><p>假设在N1和N2之间网络断开的时候，有用户向N1发送数据更新请求，那N1中的数据V0将被更新为V1。由于网络是断开的，所以分布式系统同步操作M，所以N2中的数据依旧是V0。这个时候，有用户向N2发送数据读取请求，由于数据还没有进行同步，应用程序没办法立即给用户返回最新的数据V1，怎么办呢？</p><p>这里有两种选择：</p><ul><li>第一：牺牲数据一致性，保证可用性。响应旧的数据V0给用户。</li><li>第二：牺牲可用性，保证数据一致性。阻塞等待，直到网络连接恢复，数据更新操作M完成之后，再给用户响应最新的数据V1。</li></ul><p>这个过程，证明了要满足分区容错性的分布式系统，只能在一致性和可用性两者中，选择其中一个。</p><h2 id="3-CAP原则权衡"><a href="#3-CAP原则权衡" class="headerlink" title="3. CAP原则权衡"></a>3. CAP原则权衡</h2><p>通过CAP理论，我们知道无法同时满足一致性、可用性和分区容错性这三个特性，那要舍弃哪个呢？</p><h3 id="3-1-CA-without-P"><a href="#3-1-CA-without-P" class="headerlink" title="3.1. CA without P"></a>3.1. CA without P</h3><p>如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但其实分区不是你想不想的问题，而是始终会存在，因此CA的系统更多的是允许分区后各子系统依然保持CA。</p><h3 id="3-2-CP-without-A"><a href="#3-2-CP-without-A" class="headerlink" title="3.2. CP without A"></a>3.2. CP without A</h3><p>如果不要求A（可用），相当于每个请求都需要在Server之间强一致，而P（分区）会导致同步时间无限延长，如此CP也是可以保证的。很多传统的数据库分布式事务都属于这种模式。</p><h3 id="3-3-AP-wihtout-C"><a href="#3-3-AP-wihtout-C" class="headerlink" title="3.3. AP wihtout C"></a>3.3. AP wihtout C</h3><p>要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的NoSQL都属于此类。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>对于多数大型互联网应用的场景，主机众多、部署分散。而且现在的集群规模越来越大，所以节点故障、网络故障是常态。这种应用一般要保证服务可用性达到N个9，即保证P和A，只有舍弃C（退而求其次保证最终一致性）。虽然某些地方会影响客户体验，但没达到造成用户流程的严重程度。</p><p>对于涉及到钱财这样不能有一丝让步的场景，C必须保证。网络发生故障宁可停止服务，这是保证CA，舍弃P。貌似这几年国内银行业发生了不下10起事故，但影响面不大，报到也不多，广大群众知道的少。还有一种是保证CP，舍弃A，例如网络故障时只读不写。</p><p>孰优孰劣，没有定论，只能根据场景定夺，适合的才是最好的。</p><hr><p>欢迎扫码关注公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性）这三个基本需求，最多只能同时满足其中的2个。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式系列" scheme="https://ostenant.coding.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="分布式" scheme="https://ostenant.coding.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="CAP" scheme="https://ostenant.coding.me/tags/CAP/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker + Consul + Nginx + Consul-template的服务负载均衡实现</title>
    <link href="https://ostenant.coding.me/2018/02/08/%E5%9F%BA%E4%BA%8EDocker%20+%20Consul%20+%20Nginx%20+%20Consul-template%E7%9A%84%E6%9C%8D%E5%8A%A1%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0/"/>
    <id>https://ostenant.coding.me/2018/02/08/基于Docker + Consul + Nginx + Consul-template的服务负载均衡实现/</id>
    <published>2018-02-08T03:03:00.000Z</published>
    <updated>2018-05-08T02:49:46.095Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇文章使用 <code>Consul</code> 和 <code>Registrator</code> 在 <code>docker</code> 的容器环境中搭建了<strong>服务注册和发现</strong>集群。在服务发现和注册的基础上，本文将引入 <code>Nginx</code>反向代理服务器和 <code>Consul-template</code> 组件，实现动态的<strong>服务负载均衡</strong>。</p><a id="more"></a><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-工具介绍"><a href="#1-工具介绍" class="headerlink" title="1. 工具介绍"></a>1. 工具介绍</h2><h2 id="1-1-Nginx"><a href="#1-1-Nginx" class="headerlink" title="1.1. Nginx"></a>1.1. Nginx</h2><p>一个高性能的 <code>HTTP</code> 和<strong>反向代理服务器</strong>，用于前端访问流量到后台应用服务器<strong>负载均衡</strong>和<strong>请求转发</strong>。</p><h2 id="1-2-Consul-template"><a href="#1-2-Consul-template" class="headerlink" title="1.2. Consul-template"></a>1.2. Consul-template</h2><p><code>Consul-template</code> 是 <code>HashiCorp</code> 基于 <code>Consul</code> 所提供的可扩展的工具，通过监听 <code>Consul</code> 中的<strong>数据变化</strong>，动态地修改一些<strong>配置文件</strong>中地<strong>模板</strong>。常用于在 <code>Nginx</code>、<code>HAProxy</code> 上动态配置健康状态下的客户端反向代理信息。</p><h2 id="2-实现原理"><a href="#2-实现原理" class="headerlink" title="2. 实现原理"></a>2. 实现原理</h2><ul><li>通过 <code>Nginx</code> 自身实现<strong>负载均衡</strong>和<strong>请求转发</strong>；</li><li>通过 <code>Consul-template</code> 的 <code>config</code> 功能实时监控 <code>Consul</code> 集群节点的<strong>服务</strong>和<strong>数据</strong>的变化；</li><li>实时的用 <code>Consul</code> 节点的信息<strong>替换</strong> <code>Nginx</code> 配置文件的<strong>模板</strong>，并<strong>重新加载</strong>配置文件；</li></ul><blockquote><p><code>Consul-template</code> 和 <code>nginx</code> 必须安装在同一台机器上，因为 <code>Consul-template</code> 需要动态修改 <code>nginx</code> 的配置文件 <code>nginx.conf</code>，然后执行 <code>nginx -s reload</code> 命令进行路由更新，达到<strong>动态负载均衡</strong>的目的。</p></blockquote><h3 id="2-1-传统负载均衡"><a href="#2-1-传统负载均衡" class="headerlink" title="2.1. 传统负载均衡"></a>2.1. 传统负载均衡</h3><p>传统的负载均衡，就是 <code>Client</code> 支姐访问 <code>Nginx</code>，然后被转发到后端某一台 <code>Web Server</code>。如果后端有<strong>添加</strong>/<strong>删除</strong> <code>Web Server</code>，运维需要手动改下 <code>nginx.conf</code> ，然后<strong>重新载入配置</strong>，就可以动态的调整负载均衡。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/tranditional_nginx3.png" alt=""></p><h3 id="2-2-自动负载均衡"><a href="#2-2-自动负载均衡" class="headerlink" title="2.2. 自动负载均衡"></a>2.2. 自动负载均衡</h3><p>再看看基于服务自动发现和注册的负载均衡，负载均衡的方式没有变，只是多了一些<strong>外围组件</strong>，当然这些组件对 <code>Client</code> 是不可见的，<code>client</code> 依然只能看到 <code>Nginx</code> 入口，访问方式也没变化。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/service_registry_nginx.png" alt=""></p><p><code>Nginx</code> 的动态负载均衡实现流程如下：</p><ol><li>以相同的 <code>Consul</code> <strong>标签</strong>对 <code>Web Server</code> 进行<strong>服务标记</strong>和<strong>分类</strong>，<strong>新增</strong>或者<strong>删除</strong> <code>Web Server</code> 服务器节点；</li><li><code>Registrator</code> <strong>监控</strong>到 <code>Web Server</code> 的状态更新，自动在 <code>Consul</code>服务注册中心将它<strong>注册</strong>或者<strong>注销</strong>；</li><li><code>Consul-template</code> 订阅了 <code>Consul</code> 服务注册中心的<strong>服务消息</strong>，接收到 <code>Consul</code> 的消息推送，即 <code>Web Server</code> 服务节点<strong>状态</strong>发生改变。</li><li><code>Consul-template</code> 自动去修改和<strong>替换</strong> <code>Nginx</code> 服务器下的 <code>nginx</code>配置文件中的<strong>模板</strong>，并<strong>重新加载</strong>服务达到自动负载均衡的目的。</li></ol><h2 id="3-环境准备"><a href="#3-环境准备" class="headerlink" title="3. 环境准备"></a>3. 环境准备</h2><h3 id="3-1-系统环境"><a href="#3-1-系统环境" class="headerlink" title="3.1. 系统环境"></a>3.1. 系统环境</h3><table><thead><tr><th style="text-align:left">软件</th><th style="text-align:left">版本</th></tr></thead><tbody><tr><td style="text-align:left">操作系统</td><td style="text-align:left">Ubuntu：16.04 x86_64，内核：4.8.0-58-generic</td></tr><tr><td style="text-align:left">docker</td><td style="text-align:left">Docker version 1.12.6, build 78d1802</td></tr><tr><td style="text-align:left">docker-compose</td><td style="text-align:left">docker-compose version 1.8.0</td></tr></tbody></table><h3 id="3-2-节点规划"><a href="#3-2-节点规划" class="headerlink" title="3.2. 节点规划"></a>3.2. 节点规划</h3><table><thead><tr><th style="text-align:left">主机IP</th><th style="text-align:left">组件</th></tr></thead><tbody><tr><td style="text-align:left">192.168.1.181</td><td style="text-align:left">Consul Server, Registrator, Nginx, Consul-template</td></tr><tr><td style="text-align:left">192.168.1.186</td><td style="text-align:left">Consul Server, Registrator, Nginx, Consul-template</td></tr><tr><td style="text-align:left">192.168.1.182</td><td style="text-align:left">Consul Client, Registrator, Client WebApp1, Server WebApp1, Server WebApp2</td></tr><tr><td style="text-align:left">192.168.1.183</td><td style="text-align:left">Consul Client, Registrator, Client WebApp2, Server WebApp3, Server WebApp4</td></tr><tr><td style="text-align:left">192.168.1.185</td><td style="text-align:left">Consul Client, Registrator, Client WebApp3, Server WebApp5, Server WebApp6</td></tr></tbody></table><ul><li><strong>Client WebApp</strong>：提供基于<code>Thrift</code>的<code>RPC</code>客户端和基于<code>Http</code>协议的<code>RESTful</code>客户端，用于访问 <code>Server</code> 程序。</li><li><strong>Server WebApp</strong>：提供基于<code>Thrift</code>的<code>RPC</code>服务端和基于<code>Http</code>协议的<code>RESTful</code>服务端，供 <code>Client</code> 程序调用。</li></ul><p>这里的3台主机 - <code>192.168.1.182</code>、<code>192.168.1.183</code> 和 <code>192.168.1.185</code>，每台主机部署两个 <code>Client WebApp</code> 容器和一个 <code>Client Server</code> 容器，用于模拟<strong>服务层</strong>的负载均衡。</p><h3 id="3-3-镜像构建"><a href="#3-3-镜像构建" class="headerlink" title="3.3. 镜像构建"></a>3.3. 镜像构建</h3><ul><li><strong>Consul</strong>：consul:latest</li><li><strong>Registrator</strong>：gliderlabs/registrator:latest</li><li><strong>Nginx</strong>和<strong>Consul-template</strong>：liberalman/nginx-consul-template:latest</li><li><strong>Client WebApp</strong>：test-client:latest</li><li><strong>Server WebApp</strong>：test-server:latest</li></ul><p>这里先说说 <code>test-client</code> 和 <code>test-server</code> 的镜像构建：</p><ol><li>克隆项目到本地项目环境： <a href="https://github.com/ostenant/spring-cloud-starter-thrift" target="_blank" rel="noopener">https://github.com/ostenant/spring-cloud-starter-thrift</a></li><li>切换到子模块 <code>spring-cloud-starter-thrift-examples</code> 下的 <code>test</code> 目录，执行命令 <code>mvn clean package</code> 进行程序打包。</li><li>分别将 <code>test-client</code> 和 <code>test-server</code> 项目<strong>根目录</strong>下的 <code>Dockerfile</code> 文件和<code>target</code>目录下的 <code>target/*.jar</code>程序拷贝到 <code>192.168.1.182</code> 、<code>192.168.1.183</code> 和 <code>192.168.1.185</code> 目录下。</li><li>进入<strong>客户端</strong> <code>Dockerfile</code> 所在目录，对<strong>客户端</strong>程序 <code>test-client</code> 进行镜像构建，命令如下：<code>docker build . -t test-client:latest</code></li><li>进入<strong>服务端</strong> <code>Dockerfile</code> 所在目录，对<strong>服务端</strong>程序 <code>test-server</code> 进行镜像构建，命令如下：<code>docker build . -t test-server:latest</code></li></ol><p>构建完成后查看本地镜像库：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Test_Client_Test_Server_docker_images.png" alt=""></p><h3 id="3-4-部署模型"><a href="#3-4-部署模型" class="headerlink" title="3.4. 部署模型"></a>3.4. 部署模型</h3><p>五台主机，其中 <code>192.168.1.181</code> 和 <code>192.168.1.186</code> 两台主机的主要作用如下：</p><ol><li>作为<strong>负载均衡转发器</strong> (这里只是演示，可以通过 <code>KeepAlived</code> 实现 <code>Nginx</code> 的<code>HA</code>)，将前端访问流量经过<strong>负载算法</strong>一次转发到后台 <code>Client WebApp</code> 。</li><li>以 <code>Server</code>模式启动 <code>Consul</code>节点，其中一台作为整个<strong>服务发现与注册集群</strong>的 <code>leader</code>， 用于<strong>同步</strong>和<strong>持久化</strong>其余三台 <code>Client</code> 模式的 <code>Consul</code> 节点的<strong>数据</strong>和<strong>状态信息</strong>。</li></ol><p>其余三台主机 - <code>192.168.1.182</code>、<code>192.168.1.183</code> 和 <code>192.168.1.185</code>，充当的角色如下：</p><ol><li>每台分别以 <code>Client</code> 模式部署 <code>Consul</code> 节点，用于<strong>注册</strong>和<strong>发现</strong>本机 <code>docker</code> 容器暴露的服务，同时和 <code>Consul Server</code> 的  <code>leader</code> 节点进行<strong>服务状态同步</strong>。</li><li>分别启动一个 <code>Client WebApp</code> 容器实例和两个 <code>Server WebApp</code> 容器实例，将 <code>Client WebApp</code> 的请求根据<strong>服务层</strong>的负载算法<strong>二次转发</strong>到 <code>Server WebApp</code> 中的任意一台上完成具体的业务处理。</li></ol><p><img src="http://ols3fdyll.bkt.clouddn.com/deploy_integration_1.png" alt=""></p><p>这里有两次服务转发操作：</p><ul><li><strong>接入层的转发：</strong>两台 <code>Nginx</code> 服务器将客户流量，经由<strong>一次转发</strong>至三个 <code>Client WebApp</code> 服务实例中任意一个做处理。</li><li><strong>服务层的转发：</strong>三个 <code>Client WebApp</code>服务实例其中之一，根据从<strong>服务注册中心</strong>拉取的健康的<strong>服务缓存列表</strong>，将请求<strong>二次转发</strong>至六个 <code>Server WebApp</code>服务实例其中之一做处理。</li></ul><h3 id="3-5-开始搭建"><a href="#3-5-开始搭建" class="headerlink" title="3.5. 开始搭建"></a>3.5. 开始搭建</h3><h3 id="3-5-1-Consul-Server主机"><a href="#3-5-1-Consul-Server主机" class="headerlink" title="3.5.1. Consul Server主机"></a>3.5.1. Consul Server主机</h3><p>(a). 分别编写 <code>docker-compose.yml</code>，注意 <code>Registrator</code> 需要配置各自的 <code>IP</code>地址。</p><ul><li><strong>主机：192.168.1.181</strong></li></ul><p>docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  load_balancer:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">liberalman/nginx-consul-template:latest</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">lb</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="attr">      - consul_server_master:</span><span class="string">consul</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80:80"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  consul_server_master:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">consul:latest</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">consul_server_master</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8300:8300"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8301:8301"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8302:8302"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8400:8400"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8500:8500"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8600:8600"</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">consul</span> <span class="string">agent</span> <span class="bullet">-server</span> <span class="bullet">-bootstrap-expect</span> <span class="number">1</span> <span class="bullet">-advertise</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.181</span> <span class="bullet">-node</span> <span class="string">consul_server_master</span> <span class="bullet">-data-dir</span> <span class="string">/tmp/data-dir</span> <span class="bullet">-client</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="bullet">-ui</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  registrator:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">gliderlabs/registrator:latest</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">registrator</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="attr">      - consul_server_master:</span><span class="string">consul</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/var/run/docker.sock:/tmp/docker.sock"</span></span><br><span class="line"><span class="attr">    command:</span>  <span class="bullet">-ip</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.181</span> <span class="attr">consul://192.168.1.181:8500</span></span><br></pre></td></tr></table></figure><ul><li><strong>主机：192.168.1.186</strong></li></ul><p>docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  load_balancer:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">liberalman/nginx-consul-template:latest</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">lb</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="attr">      - consul_server_slave:</span><span class="string">consul</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80:80"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  consul_server_slave:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">consul:latest</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">consul_server_slave</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8300:8300"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8301:8301"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8302:8302"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8400:8400"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8500:8500"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8600:8600"</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">consul</span> <span class="string">agent</span> <span class="bullet">-server</span> <span class="bullet">-join=192.168.1.181</span> <span class="bullet">-advertise</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.186</span> <span class="bullet">-node</span> <span class="string">consul_server_slave</span> <span class="bullet">-data-dir</span> <span class="string">/tmp/data-dir</span> <span class="bullet">-client</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="bullet">-ui</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  registrator:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">gliderlabs/registrator:latest</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">registrator</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="attr">      - consul_server_slave:</span><span class="string">consul</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/var/run/docker.sock:/tmp/docker.sock"</span></span><br><span class="line"><span class="attr">    command:</span>  <span class="bullet">-ip</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.186</span> <span class="attr">consul://192.168.1.186:8500</span></span><br></pre></td></tr></table></figure><p>(b). 在两台主机上分别通过 <code>docker-compose</code> 启动多容器应用，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>这是在主机 <code>192.168.1.181</code> 上运行启动命令时的输出，可以看到 <code>docker-compose</code> 启动时会先去检查<strong>目标镜像文件</strong>是否拉取到本地，然后依次<strong>创建</strong>并<strong>启动</strong> <code>docker-compose.yml</code> 文件配置的<strong>容器实例</strong>。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/docker_compose_consul_server_1_console_output.png" alt=""></p><p>(c). 查看正常启动的容器进程，观察<code>Consul</code>、<code>Registrator</code> 和 <code>Nginx</code>/<code>Consul-template</code>的容器都正常启动。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/docker_ps_consul_server_1.png" alt=""></p><p>(d). 利用 <code>docker-compose</code>，以相同的方式在主机 <code>192.168.1.186</code> 上启动所配置的容器服务实例，查看启动状态如下：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/docker_ps_consul_server_2.png" alt=""></p><p>(e). 访问 <code>http://IP:8500</code> 查看 <code>Consul Server</code> 的<strong>节点信息</strong>和<strong>服务注册列表</strong>。</p><ul><li>节点信息：</li></ul><p><img src="http://ols3fdyll.bkt.clouddn.com/consul_server_master_ui2.png" alt=""></p><ul><li>服务状态列表：</li></ul><p><img src="http://ols3fdyll.bkt.clouddn.com/consul_server_master_ui.png" alt=""></p><p>两台 <code>Consul Server</code> 主机上的容器服务实例均正常启动！</p><h3 id="3-5-2-Consul-Client主机"><a href="#3-5-2-Consul-Client主机" class="headerlink" title="3.5.2. Consul Client主机"></a>3.5.2. Consul Client主机</h3><p>一般情况下，我们把 <code>Consul</code> 作为服务注册与发现中心，会使用它提供的<strong>服务定义</strong> (<code>Service Definition</code>) 和<strong>健康检查定义</strong> (<code>Health Check Definition</code>) 功能，相关配置说明参考如下：</p><h4 id="服务定义"><a href="#服务定义" class="headerlink" title="服务定义"></a>服务定义</h4><table><thead><tr><th style="text-align:left">环境变量Key</th><th style="text-align:left">环境变量Value</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">SERVICE_ID</td><td style="text-align:left">web-001</td><td style="text-align:left">可以为GUID或者可读性更强变量，保证不重复</td></tr><tr><td style="text-align:left">SERVICE_NAME</td><td style="text-align:left">web</td><td style="text-align:left">如果ID没有设置，Consul会将name作为id，则有可能注册失败</td></tr><tr><td style="text-align:left">SERVICE_TAGS</td><td style="text-align:left">nodejs,web</td><td style="text-align:left">服务的标签，用逗号分隔，开发者可以根据标签来查询一些信息</td></tr><tr><td style="text-align:left">SERVICE_IP</td><td style="text-align:left">内网IP</td><td style="text-align:left">要使用Consul，可访问的IP</td></tr><tr><td style="text-align:left">SERVICE_PORT</td><td style="text-align:left">50001</td><td style="text-align:left">应用的IP, 如果应用监听了多个端口，理应被视为多个应用</td></tr><tr><td style="text-align:left">SERVICE_IGNORE</td><td style="text-align:left">Boolean</td><td style="text-align:left">是否忽略本Container，可以为一些不需要注册的Container添加此属性</td></tr></tbody></table><h4 id="服健康检查定义"><a href="#服健康检查定义" class="headerlink" title="服健康检查定义"></a>服健康检查定义</h4><p>配置原则为: <code>SERVICE_XXX_*</code>。如果你的应用监听的是 <code>5000</code> 端口，则改为 <code>SERVICE_5000_CHECK_HTTP</code>，其它环境变量配置同理。</p><table><thead><tr><th style="text-align:left">环境变量Key</th><th style="text-align:left">环境变量Value</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">— 以下为HTTP模式</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">SERVICE_80_CHECK_HTTP</td><td style="text-align:left">/path_to_health_check</td><td style="text-align:left">你的健康状态检查的路径如 /status</td></tr><tr><td style="text-align:left">SERVICE_80_CHECK_INTERVAL</td><td style="text-align:left">15s</td><td style="text-align:left">15秒检查一次</td></tr><tr><td style="text-align:left">SERVICE_80_CHECK_TIMEOUT</td><td style="text-align:left">2s</td><td style="text-align:left">状态检查超时时间</td></tr><tr><td style="text-align:left">— 以下为HTTPS模式</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">SERVICE_443_CHECK_HTTPS</td><td style="text-align:left">/path_to_health_check</td><td style="text-align:left">你的健康状态检查的路径如 /status</td></tr><tr><td style="text-align:left">SERVICE_443_CHECK_INTERVAL</td><td style="text-align:left">15s</td><td style="text-align:left">15秒检查一次</td></tr><tr><td style="text-align:left">SERVICE_443_CHECK_TIMEOUT</td><td style="text-align:left">2s</td><td style="text-align:left">状态检查超时时间</td></tr><tr><td style="text-align:left">— 以下为TCP模式</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">SERVICE_443_CHECK_TCP</td><td style="text-align:left">/path_to_health_check</td><td style="text-align:left">你的健康状态检查的路径如 /status</td></tr><tr><td style="text-align:left">SERVICE_443_CHECK_INTERVAL</td><td style="text-align:left">15s</td><td style="text-align:left">15秒检查一次</td></tr><tr><td style="text-align:left">SERVICE_443_CHECK_TIMEOUT</td><td style="text-align:left">2s</td><td style="text-align:left">状态检查超时时间</td></tr><tr><td style="text-align:left">— 使用脚本检查</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">SERVICE_CHECK_SCRIPT</td><td style="text-align:left">curl –silent –fail example.com</td><td style="text-align:left">如官方例子中的check_redis.py</td></tr><tr><td style="text-align:left">— 其他</td><td style="text-align:left">—</td><td style="text-align:left">—</td></tr><tr><td style="text-align:left">SERVICE_CHECK_INITIAL_STATUS</td><td style="text-align:left">passing</td><td style="text-align:left">Consul默认注册后的服务为failed</td></tr></tbody></table><h4 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h4><p>(a). 分别编写 <code>docker-compose.yml</code>，同样注意 <code>Registrator</code> 需要配置各自的 <code>IP</code> 地址。<code>test-server</code> 和 <code>test-client</code> 的<strong>服务实例</strong>在配置时需要指定相关的<strong>环境变量</strong>。</p><ul><li><strong>主机：192.168.1.182</strong></li></ul><p>docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  consul_client_01:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">consul:latest</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8300:8300"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8301:8301"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8301:8301/udp"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8302:8302"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8302:8302/udp"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8400:8400"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8500:8500"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8600:8600"</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">consul</span> <span class="string">agent</span> <span class="bullet">-retry-join</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.181</span> <span class="bullet">-advertise</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.182</span> <span class="bullet">-node</span> <span class="string">consul_client_01</span> <span class="bullet">-data-dir</span> <span class="string">/tmp/data-dir</span> <span class="bullet">-client</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="bullet">-ui</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  registrator:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">gliderlabs/registrator:latest</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/var/run/docker.sock:/tmp/docker.sock"</span></span><br><span class="line"><span class="attr">    command:</span>  <span class="bullet">-ip</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.182</span> <span class="attr">consul://192.168.1.182:8500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  test_server_1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">test-server:latest</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_NAME=test-server-http-service</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_TAGS=test-server-http-service-01</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_HTTP=/health</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_NAME=test-server-thrift-service</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_TAGS=test-server-thrift-service-01</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_TCP=/</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"16000:8080"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"30000:25000"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  test_server_2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">test-server:latest</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_NAME=test-server-http-service</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_TAGS=test-server-http-service-02</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_HTTP=/health</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_NAME=test-server-thrift-service</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_TAGS=test-server-thrift-service-02</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_TCP=/</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"18000:8080"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"32000:25000"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  test_client_1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">test-client:latest</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_NAME=my-web-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_TAGS=test-client-http-service-01</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_HTTP=/features</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80:8080"</span></span><br></pre></td></tr></table></figure><ul><li><strong>主机：192.168.1.183</strong></li></ul><p>docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  consul_client_02:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">consul:latest</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8300:8300"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8301:8301"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8301:8301/udp"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8302:8302"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8302:8302/udp"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8400:8400"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8500:8500"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8600:8600"</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">consul</span> <span class="string">agent</span> <span class="bullet">-retry-join</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.181</span> <span class="bullet">-advertise</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.183</span> <span class="bullet">-node</span> <span class="string">consul_client_02</span> <span class="bullet">-data-dir</span> <span class="string">/tmp/data-dir</span> <span class="bullet">-client</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="bullet">-ui</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  registrator:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">gliderlabs/registrator:latest</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/var/run/docker.sock:/tmp/docker.sock"</span></span><br><span class="line"><span class="attr">    command:</span>  <span class="bullet">-ip</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.183</span> <span class="attr">consul://192.168.1.183:8500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  test_server_1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">test-server:latest</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_NAME=test-server-http-service</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_TAGS=test-server-http-service-03</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_HTTP=/health</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_NAME=test-server-thrift-service</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_TAGS=test-server-thrift-service-03</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_TCP=/</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"16000:8080"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"30000:25000"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  test_server_2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">test-server:latest</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_NAME=test-server-http-service</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_TAGS=test-server-http-service-04</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_HTTP=/health</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_NAME=test-server-thrift-service</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_TAGS=test-server-thrift-service-04</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_TCP=/</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"18000:8080"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"32000:25000"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  test_client_1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">test-client:latest</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_NAME=my-web-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_TAGS=test-client-http-service-02</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_HTTP=/features</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80:8080"</span></span><br></pre></td></tr></table></figure><ul><li><strong>主机：192.168.1.185</strong></li></ul><p>docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  consul_client_03:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">consul:latest</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8300:8300"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8301:8301"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8301:8301/udp"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8302:8302"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8302:8302/udp"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8400:8400"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8500:8500"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8600:8600"</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">consul</span> <span class="string">agent</span> <span class="bullet">-retry-join</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.181</span> <span class="bullet">-advertise</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.185</span> <span class="bullet">-node</span> <span class="string">consul_client_03</span> <span class="bullet">-data-dir</span> <span class="string">/tmp/data-dir</span> <span class="bullet">-client</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="bullet">-ui</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  registrator:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">gliderlabs/registrator:latest</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/var/run/docker.sock:/tmp/docker.sock"</span></span><br><span class="line"><span class="attr">    command:</span>  <span class="bullet">-ip</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.185</span> <span class="attr">consul://192.168.1.185:8500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  test_server_1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">test-server:latest</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_NAME=test-server-http-service</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_TAGS=test-server-http-service-05</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_HTTP=/health</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_NAME=test-server-thrift-service</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_TAGS=test-server-thrift-service-05</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_TCP=/</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"16000:8080"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"30000:25000"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  test_server_2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">test-server:latest</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_NAME=test-server-http-service</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_TAGS=test-server-http-service-06</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_HTTP=/health</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_NAME=test-server-thrift-service</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_TAGS=test-server-thrift-service-06</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_25000_CHECK_TCP=/</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"18000:8080"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"32000:25000"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  test_client_1:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">test-client:latest</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_NAME=my-web-server</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_TAGS=test-client-http-service-03</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_INTERVAL=10s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_TIMEOUT=2s</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICE_8080_CHECK_HTTP=/features</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"80:8080"</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>我们使用的第三方镜像 <code>liberalman/nginx-consul-template</code>，<code>Nginx</code> 会把名称为 <code>my-web-server</code>的<strong>服务容器</strong>作为后台转发的<strong>目标服务器</strong>，因此，在 <code>test-client</code> 的配置项中，需要指定 <code>SERVICE_XXX_NAME</code> 为 <code>my-web-server</code>。当然你也可以自己<strong>制作镜像</strong>指定<strong>模板</strong>。</p></blockquote><p>(b). 在三台主机上使用 <code>docker-compose</code> 启动多容器应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>以主机 <code>192.168.1.182</code> 为例 (其余两台类似)，控制台日志显示，创建并启动 <code>docker-compose.yml</code> 文件配置的5个<strong>容器实例</strong>。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/docker_compose_web_server_console_output.png" alt=""></p><p>(c). 查看正常启动的容器进程，观察到 <code>Consul</code>、一台<code>test-client</code> 和 两台<code>test-server</code>的容器都正常启动。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/docker_ps_web_server_1.png" alt=""></p><p>(d). 在 <code>b</code> 操作中的控制台输出可以看到：<code>docker-compose</code> 并非按照 <code>docker-compose.yml</code> 文件中服务配置的<strong>先后顺序</strong>启动。 <code>registrator</code> 容器的启动依赖于 <code>consul</code> 容器，而此时 <code>consul</code> 还并未启动，就出现了 <code>registrator</code> 优先启动而<strong>异常退出</strong>的现象。解决方法是再运行一次 <code>docker-compose up -d</code> 命令。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/docker_compose_web_server_console_output2.png" alt=""></p><p>(e). 再次查看容器进程，此时 <code>Registrator</code> 容器就已经正常启动了。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/docker_ps_web_server_2.png" alt=""></p><p>(f). 以相同的方式在其余两台主机上<strong>重复</strong>以上操作，再次访问 <code>http://IP:8500</code> 查看 <code>Consul Server</code> 的<strong>节点信息</strong>和<strong>服务注册列表</strong>。</p><ul><li><code>Consul</code> 集群节点信息，包括两台 <code>Consul Server</code> 节点和一台 <code>Consul Client</code> 节点，节点右侧可以看到所有的<strong>服务注册列表</strong>和相关的<strong>健康检查结果</strong>：</li></ul><p><img src="http://ols3fdyll.bkt.clouddn.com/consul_client_01%20.png" alt=""></p><ul><li><code>nginx</code> 服务状态列表，服务名称 <code>nginx-consul-template</code>，提供 <code>http</code> 服务，共有2个服务实例：</li></ul><p><img src="http://ols3fdyll.bkt.clouddn.com/nginx-consul-template.png" alt=""></p><ul><li><code>test-client</code> 服务状态列表，服务名称为 <code>my-web-server</code>，提供 <code>http</code> 服务，共有3个服务实例：</li></ul><p><img src="http://ols3fdyll.bkt.clouddn.com/my_web_app.png" alt=""></p><ul><li><code>test-server</code> 服务状态列表，服务名称为 <code>test-server-http-service</code> 和 <code>test-server-thrift-service</code>，分别对应6个 <code>http</code> 服务实例和 6个 <code>thrift</code> 服务实例：</li></ul><p><img src="http://ols3fdyll.bkt.clouddn.com/test-server-http-service.png" alt=""></p><p><img src="http://ols3fdyll.bkt.clouddn.com/test-server-thrift-service.png" alt=""></p><p>三台  <code>Consul Client</code> 主机上的容器服务实例均正常启动，服务注册和发现运行正常！</p><h2 id="4-结果验证"><a href="#4-结果验证" class="headerlink" title="4. 结果验证"></a>4. 结果验证</h2><h3 id="4-1-Nginx负载均衡"><a href="#4-1-Nginx负载均衡" class="headerlink" title="4.1. Nginx负载均衡"></a>4.1. Nginx负载均衡</h3><h4 id="4-1-1-访问Nginx"><a href="#4-1-1-访问Nginx" class="headerlink" title="4.1.1. 访问Nginx"></a>4.1.1. 访问Nginx</h4><p><code>Nginx</code> 默认访问端口号为<code>80</code>，任选一台 <code>Nginx</code> 访问，比如： <code>http://192.168.1.181/swagger-ui.html</code>。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/test_client_swagger_ui.png" alt=""></p><p>请求转发至 <code>Test Client</code> 的 <code>Swagger</code>页面，表明 <code>nginx</code>配置文件 <code>nginx.conf</code> 被 <code>Consul-template</code> 成功修改。</p><h4 id="4-1-2-进入Nginx容器"><a href="#4-1-2-进入Nginx容器" class="headerlink" title="4.1.2. 进入Nginx容器"></a>4.1.2. 进入Nginx容器</h4><p>运行 <code>docker ps</code> 查看 <code>nginx-consul-template</code> 的容器 <code>ID</code>，比如这里是：<code>4f2731a7e0cb</code>。进入 <code>nginx-consul-template</code> 容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-enter 4f2731a7e0cb</span><br></pre></td></tr></table></figure><p>查看容器内部的进程列表：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/nginx_consul_template_ps_ef.png" alt=""></p><p>特别留意以下一行进程命令，这里完成了三步重要的操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul-template -consul-addr=consul:8500 -template /etc/consul-templates/nginx.conf.ctmpl:/etc/nginx/conf.d/app.conf:nginx -s reload</span><br></pre></td></tr></table></figure><ol><li><code>Consul-template</code> 利用 <code>Consul</code> 上的<strong>服务信息</strong>对 <code>Nginx</code> 的<strong>配置文件模板</strong> <code>/etc/consul-templates/nginx.conf.ctmpl</code> 进行重新<strong>解析</strong>和<strong>渲染</strong>。</li><li><strong>渲染</strong>生成的 <code>nginx</code> 配置文件为 <code>/etc/nginx/conf.d/app.conf</code>。</li><li>进一步运行 <code>nginx -s reload</code> 重新加载 <code>app.conf</code>，更新<strong>路由转发列表</strong>。</li></ol><p>查看 <code>app.conf</code> 的配置项，发现三个 <code>test-client</code> 节点的 <code>IP:port</code> 都加入了<strong>路由转发列表</strong>中。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/nginx_consul_template_app_conf.png" alt=""></p><p>退出并关闭主机 <code>192.168.1.182</code> 上的 <code>test-client</code> 容器。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/docker_stop_test-client.png" alt=""></p><p>再次查看 <code>app.conf</code>，可以发现<strong>路由节点</strong> <code>192.168.1.182:80</code> 已经从 <code>Nginx</code> 的<strong>路由转发列表</strong>上<strong>剔除</strong>掉了。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/nginx_consul_template_app_conf2.png" alt=""></p><p>同样的，重新启动 <code>test-client</code> 恢复容器，又可以发现 <code>Nginx</code> 的<strong>路由转发列表</strong> 再次自动将其添加!</p><h3 id="4-2-服务负载均衡"><a href="#4-2-服务负载均衡" class="headerlink" title="4.2. 服务负载均衡"></a>4.2. 服务负载均衡</h3><h4 id="4-2-1-接口测试"><a href="#4-2-1-接口测试" class="headerlink" title="4.2.1. 接口测试"></a>4.2.1. 接口测试</h4><p><code>test-client</code> 通过 <code>http</code> 通信方式请求任意一台 <code>test-server</code>，返回响应结果 (请求处理时间 <code>ms</code> )。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/test_clent_api_test2.png" alt=""></p><p><code>test-client</code> 通过 <code>thrift</code> 通信方式请求任意一台 <code>test-server</code>，返回响应结果 (请求处理时间 <code>ms</code> )。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/test_clent_api_test.png" alt=""></p><h4 id="4-2-3-日志分析"><a href="#4-2-3-日志分析" class="headerlink" title="4.2.3. 日志分析"></a>4.2.3. 日志分析</h4><p><strong>服务的负载均衡</strong>并不是很好观察，这里直接截取了一段 <code>test-client</code> 的<strong>服务缓存列表</strong>动态定时刷新时打印的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">2018-02-09 13:15:55.157  INFO 1 --- [erListUpdater-1] t.c.l.ThriftConsulServerListLoadBalancer : Refreshed thrift serverList: [</span><br><span class="line"><span class="built_in">test</span>-server-thrift-service: [</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_01'</span>, serviceId=<span class="string">'test-server-thrift-service'</span>, tags=[<span class="built_in">test</span>-server-thrift-service-01], host=<span class="string">'192.168.1.182'</span>, port=30000, address=<span class="string">'192.168.1.182'</span>, isHealth=<span class="literal">true</span>&#125;,</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_01'</span>, serviceId=<span class="string">'test-server-thrift-service'</span>, tags=[<span class="built_in">test</span>-server-thrift-service-02], host=<span class="string">'192.168.1.182'</span>, port=32000, address=<span class="string">'192.168.1.182'</span>, isHealth=<span class="literal">true</span>&#125;,</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_02'</span>, serviceId=<span class="string">'test-server-thrift-service'</span>, tags=[<span class="built_in">test</span>-server-thrift-service-03], host=<span class="string">'192.168.1.183'</span>, port=30000, address=<span class="string">'192.168.1.183'</span>, isHealth=<span class="literal">true</span>&#125;,</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_02'</span>, serviceId=<span class="string">'test-server-thrift-service'</span>, tags=[<span class="built_in">test</span>-server-thrift-service-04], host=<span class="string">'192.168.1.183'</span>, port=32000, address=<span class="string">'192.168.1.183'</span>, isHealth=<span class="literal">true</span>&#125;,</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_03'</span>, serviceId=<span class="string">'test-server-thrift-service'</span>, tags=[<span class="built_in">test</span>-server-thrift-service-05], host=<span class="string">'192.168.1.185'</span>, port=30000, address=<span class="string">'192.168.1.185'</span>, isHealth=<span class="literal">true</span>&#125;,</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_03'</span>, serviceId=<span class="string">'test-server-thrift-service'</span>, tags=[<span class="built_in">test</span>-server-thrift-service-06], host=<span class="string">'192.168.1.185'</span>, port=32000, address=<span class="string">'192.168.1.185'</span>, isHealth=<span class="literal">true</span>&#125;</span><br><span class="line">],</span><br><span class="line"><span class="built_in">test</span>-server-http-service: [</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_01'</span>, serviceId=<span class="string">'test-server-http-service'</span>, tags=[<span class="built_in">test</span>-server-http-service-01], host=<span class="string">'192.168.1.182'</span>, port=16000, address=<span class="string">'192.168.1.182'</span>, isHealth=<span class="literal">true</span>&#125;,</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_01'</span>, serviceId=<span class="string">'test-server-http-service'</span>, tags=[<span class="built_in">test</span>-server-http-service-02], host=<span class="string">'192.168.1.182'</span>, port=18000, address=<span class="string">'192.168.1.182'</span>, isHealth=<span class="literal">true</span>&#125;,</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_02'</span>, serviceId=<span class="string">'test-server-http-service'</span>, tags=[<span class="built_in">test</span>-server-http-service-03], host=<span class="string">'192.168.1.183'</span>, port=16000, address=<span class="string">'192.168.1.183'</span>, isHealth=<span class="literal">true</span>&#125;,</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_02'</span>, serviceId=<span class="string">'test-server-http-service'</span>, tags=[<span class="built_in">test</span>-server-http-service-04], host=<span class="string">'192.168.1.183'</span>, port=18000, address=<span class="string">'192.168.1.183'</span>, isHealth=<span class="literal">true</span>&#125;,</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_03'</span>, serviceId=<span class="string">'test-server-http-service'</span>, tags=[<span class="built_in">test</span>-server-http-service-05], host=<span class="string">'192.168.1.185'</span>, port=16000, address=<span class="string">'192.168.1.185'</span>, isHealth=<span class="literal">true</span>&#125;,</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_03'</span>, serviceId=<span class="string">'test-server-http-service'</span>, tags=[<span class="built_in">test</span>-server-http-service-06], host=<span class="string">'192.168.1.185'</span>, port=18000, address=<span class="string">'192.168.1.185'</span>, isHealth=<span class="literal">true</span>&#125;</span><br><span class="line">],</span><br><span class="line">my-web-server: [</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_01'</span>, serviceId=<span class="string">'my-web-server'</span>, tags=[<span class="built_in">test</span>-client-http-service-01], host=<span class="string">'192.168.1.182'</span>, port=80, address=<span class="string">'192.168.1.182'</span>, isHealth=<span class="literal">true</span>&#125;,</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_02'</span>, serviceId=<span class="string">'my-web-server'</span>, tags=[<span class="built_in">test</span>-client-http-service-02], host=<span class="string">'192.168.1.183'</span>, port=80, address=<span class="string">'192.168.1.183'</span>, isHealth=<span class="literal">true</span>&#125;,</span><br><span class="line">ThriftServerNode&#123;node=<span class="string">'consul_client_03'</span>, serviceId=<span class="string">'my-web-server'</span>, tags=[<span class="built_in">test</span>-client-http-service-03], host=<span class="string">'192.168.1.185'</span>, port=80, address=<span class="string">'192.168.1.185'</span>, isHealth=<span class="literal">true</span>&#125;</span><br><span class="line">]]</span><br></pre></td></tr></table></figure><h4 id="服务实例"><a href="#服务实例" class="headerlink" title="服务实例"></a>服务实例</h4><ul><li><code>test-server-http-service</code> 所有<strong>健康</strong>的服务实例：</li></ul><table><thead><tr><th>服务IP地址</th><th>服务端口</th><th>服务标签</th></tr></thead><tbody><tr><td>192.168.1.182</td><td>16000</td><td>test-server-http-service-01</td></tr><tr><td>192.168.1.182</td><td>18000</td><td>test-server-http-service-02</td></tr><tr><td>192.168.1.183</td><td>16000</td><td>test-server-http-service-03</td></tr><tr><td>192.168.1.183</td><td>18000</td><td>test-server-http-service-04</td></tr><tr><td>192.168.1.185</td><td>16000</td><td>test-server-http-service-05</td></tr><tr><td>192.168.1.185</td><td>18000</td><td>test-server-http-service-06</td></tr></tbody></table><ul><li><code>test-server-thrift-service</code> 所有<strong>健康</strong>的服务实例：</li></ul><table><thead><tr><th>服务IP地址</th><th>服务端口</th><th>服务标签</th></tr></thead><tbody><tr><td>192.168.1.182</td><td>30000</td><td>test-server-thrift-service-01</td></tr><tr><td>192.168.1.182</td><td>32000</td><td>test-server-thrift-service-02</td></tr><tr><td>192.168.1.183</td><td>30000</td><td>test-server-thrift-service-03</td></tr><tr><td>192.168.1.183</td><td>32000</td><td>test-server-thrift-service-04</td></tr><tr><td>192.168.1.185</td><td>30000</td><td>test-server-thrift-service-05</td></tr><tr><td>192.168.1.185</td><td>32000</td><td>test-server-thrift-service-06</td></tr></tbody></table><ul><li><code>my-web-server</code> 所有<strong>健康</strong>的服务实例：</li></ul><table><thead><tr><th>服务IP地址</th><th>服务端口</th><th>服务标签</th></tr></thead><tbody><tr><td>192.168.1.182</td><td>80</td><td>test-client-http-service-01</td></tr><tr><td>192.168.1.183</td><td>80</td><td>test-client-http-service-02</td></tr><tr><td>192.168.1.185</td><td>80</td><td>test-client-http-service-03</td></tr></tbody></table><p><code>spring-cloud-starter-thrift</code> 采用的<strong>轮询</strong>的转发策略，也就是说 <code>my-web-server</code> 会按<strong>次序循环往来</strong>地将 <code>http</code> 或者 <code>rpc</code> 请求分发到各自的 <code>6</code> 个<strong>服务实例</strong>完成处理。</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文提供了一套基于<strong>微服务服务注册与发现体系</strong>和<strong>容器</strong>的<strong>高可用</strong> (<code>HA</code>) 解决方案，引入了<strong>接入层</strong>和<strong>服务层</strong>的<strong>自动负载均衡</strong>的实现，详细给出了<strong>实践方案</strong>和<strong>技术手段</strong>！</p><hr><p>欢迎扫码关注我的个人技术公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上一篇文章使用 &lt;code&gt;Consul&lt;/code&gt; 和 &lt;code&gt;Registrator&lt;/code&gt; 在 &lt;code&gt;docker&lt;/code&gt; 的容器环境中搭建了&lt;strong&gt;服务注册和发现&lt;/strong&gt;集群。在服务发现和注册的基础上，本文将引入 &lt;code&gt;Nginx&lt;/code&gt;反向代理服务器和 &lt;code&gt;Consul-template&lt;/code&gt; 组件，实现动态的&lt;strong&gt;服务负载均衡&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="微服务系列" scheme="https://ostenant.coding.me/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Docker" scheme="https://ostenant.coding.me/tags/Docker/"/>
    
      <category term="Consul" scheme="https://ostenant.coding.me/tags/Consul/"/>
    
      <category term="Nginx" scheme="https://ostenant.coding.me/tags/Nginx/"/>
    
      <category term="Consul-template" scheme="https://ostenant.coding.me/tags/Consul-template/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker + Consul + Registrator的服务注册与发现集群搭建</title>
    <link href="https://ostenant.coding.me/2018/02/05/%E5%9F%BA%E4%BA%8EDocker%20+%20Consul%20+%20Registrator%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>https://ostenant.coding.me/2018/02/05/基于Docker + Consul + Registrator的服务注册与发现集群搭建/</id>
    <published>2018-02-05T03:22:00.000Z</published>
    <updated>2018-05-08T02:49:46.096Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近年微服务架构在互联网应用领域中愈来愈火，引入微服务主要解决了单体应用<strong>多个模块的紧耦合</strong>、<strong>无法扩展</strong>和<strong>运维困难</strong>等问题。微服务架构就是按照<strong>功能粒度</strong>将业务模块进行<strong>垂直拆分</strong>，对单体应用本身进行<strong>服务化</strong>和<strong>组件化</strong>，每个组件单独部署为<strong>小应用</strong>（从<code>DB</code>到<code>UI</code>）。微服务与微服务之间通过<code>Service API</code>进行交互，同时为了支持<strong>水平扩展</strong>、<strong>性能提升</strong>和<strong>服务可用性</strong>，单个服务允许同时部署一个或者多个<strong>服务实例</strong>。在运行时，每个实例通常是一个<strong>云虚拟机</strong>或者<code>Docker</code><strong>容器</strong>。</p><a id="more"></a><p>微服务系统内部多个服务的实例之间如何通信？如何感知到彼此的存在和销毁？生产者服务如何知道消费者服务的地址？如何实现服务与注册中心的解耦？这就需要一个第三方的服务注册中心，提供对生产者服务节点的注册管理和消费者服务节点的发现管理。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-服务发现与注册"><a href="#1-服务发现与注册" class="headerlink" title="1. 服务发现与注册"></a>1. 服务发现与注册</h2><h3 id="1-1-具体流程"><a href="#1-1-具体流程" class="headerlink" title="1.1. 具体流程"></a>1.1. 具体流程</h3><ul><li><strong>服务注册中心：</strong>作为整个架构中的核心，要支持<strong>分布式</strong>、<strong>持久化存储</strong>，<strong>注册信息变动</strong>实时通知消费者。</li><li><strong>服务提供者：</strong>服务以 <code>docker</code> <strong>容器化</strong>方式部署(实现<strong>服务端口</strong>的<strong>动态生成</strong>)，可以通过 <code>docker-compose</code> 的方式来管理。通过 <code>Registrator</code> 检测到 <code>docker</code> 进程信息以完成服务的<strong>自动注册</strong>。</li><li><strong>服务消费者：</strong>要使用<strong>服务提供者</strong>提供的服务，和服务提供者往往是动态相互转位置的。</li></ul><p>一个较为完整的服务注册与发现流程如下：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/Service_registry_component.png" alt=""></p><ol><li><strong>注册服务：</strong>服务提供者到注册中心<strong>注册</strong>；</li><li><strong>订阅服务：</strong>服务消费者到注册中心<strong>订阅</strong>服务信息，对其进行<strong>监听</strong>；</li><li><strong>缓存服务列表：</strong>本地<strong>缓存</strong>服务列表，减少与注册中心的网络通信；</li><li><strong>调用服务：</strong>先<strong>查找</strong>本地缓存，找不到再去注册中心<strong>拉取</strong>服务地址，然后发送服务请求；</li><li><strong>变更通知：</strong>服务节点<strong>变动</strong>时 (<strong>新增</strong>、<strong>删除</strong>等)，注册中心将通知监听节点，<strong>更新</strong>服务信息。</li></ol><h3 id="1-2-相关组件"><a href="#1-2-相关组件" class="headerlink" title="1.2. 相关组件"></a>1.2. 相关组件</h3><p>一个服务发现系统主要由三部分组成：</p><ol><li><strong>注册器(registrator)：</strong>根据服务运行状态，注册/注销服务。主要要解决的问题是，何时发起注册/注销动作。</li><li><strong>注册表(registry)：</strong>存储服务信息。常见的解决方案有zookeeper、etcd、cousul等。</li><li><strong>发现机制(discovery)：</strong>从注册表读取服务信息，给用户封装访问接口。</li></ol><h3 id="1-3-第三方实现"><a href="#1-3-第三方实现" class="headerlink" title="1.3. 第三方实现"></a>1.3. 第三方实现</h3><p>对于第三方的服务注册与发现的实现，现有的工具主要有以下三种：</p><ol><li><strong>zookeeper：</strong>一个高性能、分布式应用程序协调服务，用于名称服务、分布式锁定、共享资源同步和分布式配置管理。</li><li><strong>Etcd：</strong>一个采用HTTP协议的健/值对存储系统，主要用于共享配置和服务发现，提供的功能相对Zookeeper和Consul相对简单。</li><li><strong>Consul：</strong>一个分布式高可用的服务发现和配置共享的软件，支持服务发现与注册、多数据中心、健康检查和分布式键/值存储。</li></ol><p>简单对比：</p><blockquote><p>与Zookeeper和etcd不一样，Consul内嵌实现了服务发现系统，不需要构建自己的系统或使用第三方系统，客户只需要注册服务，并通过DNS或HTTP接口执行服务发现。</p></blockquote><h2 id="2-Consul和Registrator"><a href="#2-Consul和Registrator" class="headerlink" title="2. Consul和Registrator"></a>2. Consul和Registrator</h2><h3 id="2-1-Consul简介"><a href="#2-1-Consul简介" class="headerlink" title="2.1. Consul简介"></a>2.1. Consul简介</h3><p><strong>Consul是什么</strong></p><p><code>Consul</code> 是一种<strong>分布式</strong>的、<strong>高可用</strong>、<strong>支持水平扩展</strong>的的服务注册与发现工具。它大致包括以下特性：</p><ul><li><strong>服务发现：</strong> <code>Consul</code> 通过 <code>DNS</code> 或者 <code>HTTP</code> 接口使<strong>服务注册和服务发现</strong>变的很容易。一些外部服务，例如 <code>saas</code> 提供的也可以一样注册；</li><li><strong>健康检查：</strong>健康检测使 <code>consul</code> 可以快速的告警在集群中的操作。和服务发现的集成，可以防止服务转发到故障的服务上面；</li><li><strong>键/值存储：</strong>一个用来<strong>存储动态配置</strong>的系统。提供简单的 <code>HTTP</code> 接口，可以在任何地方操作；</li><li><strong>多数据中心：</strong>支持<strong>多数据中心</strong>以避免<strong>单点故障</strong>，内外网的服务采用不同的端口进行监听。而其部署则需要考虑网络延迟, 分片等情况等。<code>zookeeper</code>和<code>etcd</code>均不提供多数据中心功能的支持；</li><li><strong>一致性算法：</strong>采用 <code>Raft</code> 一致性协议算法，比<code>Paxos</code>算法好用。 使用 <code>GOSSIP</code> 协议管理成员和广播消息, 并且支持 <code>ACL</code> 访问控制；</li><li><strong>服务管理Dashboard：</strong>提供一个 <code>Web UI</code> 的服务注册于<strong>健康状态监控</strong>的管理页面。</li></ul><p><strong>Consul的几个概念</strong></p><p>下图是<code>Consul</code>官方文档提供的架构设计图：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/consul-architecture.png" alt=""></p><p>图中包含两个<code>Consul</code>数据中心，每个数据中心都是一个<code>consul</code>的集群。在数据中心1中，可以看出<code>consul</code>的集群是由<code>N</code>个<code>SERVER</code>，加上<code>M</code>个<code>CLIENT</code>组成的。而不管是<code>SERVER</code>还是<code>CLIENT</code>，都是<code>consul</code>集群的一个节点。所有的服务都可以注册到这些节点上，正是通过这些节点实现服务注册信息的共享。除了这两个，还有一些小细节 一一 简单介绍。</p><ul><li><strong>CLIENT</strong></li></ul><p><code>CLIENT</code>表示<code>consul</code>的<code>client</code>模式，就是<strong>客户端模式</strong>。是<code>consul</code>节点的一种模式，这种模式下，所有注册到当前节点的服务会被<strong>转发</strong>到<code>SERVER</code>节点，本身是<strong>不持久化</strong>这些信息。</p><ul><li><strong>SERVER</strong></li></ul><p><code>SERVER</code>表示<code>consul</code>的<code>server</code>模式，表明这个<code>consul</code>是个<code>server</code>节点。这种模式下，功能和<code>CLIENT</code>都一样，唯一不同的是，它会把所有的信息<strong>持久化</strong>的本地。这样遇到故障，信息是可以被保留的。</p><ul><li><strong>SERVER-LEADER</strong></li></ul><p>中间那个<code>SERVER</code>下面有<code>LEADER</code>的描述，表明这个<code>SERVER</code>节点是它们的老大。和其它<code>SERVER</code>不一样的一点是，它需要负责<strong>同步注册信息</strong>给其它的<code>SERVER</code>，同时也要负责<strong>各个节点</strong>的<strong>健康监测</strong>。</p><ul><li><strong>其它信息</strong></li></ul><p>其它信息包括各个节点之间的<strong>通信方式</strong>，还有<strong>一些协议信息</strong>、<strong>算法</strong>。它们是用于保证节点之间的<strong>数据同步</strong>、<strong>实时性要求</strong>等等一系列集群问题的解决。这些有兴趣的自己看看官方文档。</p><h3 id="2-2-Registrator简介"><a href="#2-2-Registrator简介" class="headerlink" title="2.2. Registrator简介"></a>2.2. Registrator简介</h3><p><strong>什么是Registrator</strong><br><code>Registrator</code>是一个独立于服务注册表的<strong>自动服务注册/注销组件</strong>，一般以<code>Docker container</code>的方式进行部署。<code>Registrator</code>会自动侦测它所在的<strong>宿主机</strong>上的所有<code>Docker</code>容器状态（启用/销毁），并根据容器状态到对应的<strong>服务注册列表</strong>注册/注销服务。</p><p>事实上，<code>Registrator</code>通过读取同一台宿主机的其他容器<code>Container</code>的<strong>环境变量</strong>进行<strong>服务注册</strong>、<strong>健康检查定义</strong>等操作。</p><p><code>Registrator</code>支持<strong>可插拔式</strong>的<strong>服务注册表</strong>配置，目前支持包括<code>Consul</code>, <code>etcd</code>和<code>SkyDNS 2</code>三种注册工具。</p><h2 id="2-3-Docker安装Consul集群"><a href="#2-3-Docker安装Consul集群" class="headerlink" title="2.3. Docker安装Consul集群"></a>2.3. Docker安装Consul集群</h2><h3 id="2-3-1-集群节点规划"><a href="#2-3-1-集群节点规划" class="headerlink" title="2.3.1.  集群节点规划"></a>2.3.1.  集群节点规划</h3><p>我本地的使用的是<code>Ubuntu16.04</code>的虚拟机：</p><table><thead><tr><th>容器名称</th><th>容器IP地址</th><th>映射端口号</th><th>宿主机IP地址</th><th>服务运行模式</th></tr></thead><tbody><tr><td>node1</td><td>172.17.0.2</td><td>8500 -&gt; 8500</td><td>192.168.127.128</td><td>Server Master</td></tr><tr><td>node2</td><td>172.17.0.3</td><td>9500 -&gt; 8500</td><td>192.168.127.128</td><td>Server</td></tr><tr><td>node3</td><td>172.17.0.4</td><td>10500 -&gt; 8500</td><td>192.168.127.128</td><td>Server</td></tr><tr><td>node4</td><td>172.17.0.5</td><td>11500 -&gt; 8500</td><td>192.168.127.128</td><td>Client</td></tr></tbody></table><h3 id="2-3-2-Consul集群安装"><a href="#2-3-2-Consul集群安装" class="headerlink" title="2.3.2. Consul集群安装"></a>2.3.2. Consul集群安装</h3><p><code>Consul</code>的配置参数信息说明：</p><table><thead><tr><th>参数列表</th><th>参数的含义和使用场景说明</th></tr></thead><tbody><tr><td>advertise</td><td>通知展现地址用来改变我们给集群中的其他节点展现的地址，一般情况下-bind地址就是展现地址</td></tr><tr><td>bootstrap</td><td>用来控制一个server是否在bootstrap模式，在一个datacenter中只能有一个server处于bootstrap模式，当一个server处于bootstrap模式时，可以自己选举为raft leader</td></tr><tr><td>bootstrap-expect</td><td>在一个datacenter中期望提供的server节点数目，当该值提供的时候，consul一直等到达到指定sever数目的时候才会引导整个集群，该标记不能和bootstrap共用</td></tr><tr><td>bind</td><td>该地址用来在集群内部的通讯IP地址，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0</td></tr><tr><td>client</td><td>consul绑定在哪个client地址上，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1</td></tr><tr><td>config-file</td><td>明确的指定要加载哪个配置文件</td></tr><tr><td>config-dir</td><td>配置文件目录，里面所有以.json结尾的文件都会被加载</td></tr><tr><td>data-dir</td><td>提供一个目录用来存放agent的状态，所有的agent允许都需要该目录，该目录必须是稳定的，系统重启后都继续存在</td></tr><tr><td>dc</td><td>该标记控制agent允许的datacenter的名称，默认是dc1</td></tr><tr><td>encrypt</td><td>指定secret key，使consul在通讯时进行加密，key可以通过consul keygen生成，同一个集群中的节点必须使用相同的key</td></tr><tr><td>join</td><td>加入一个已经启动的agent的ip地址，可以多次指定多个agent的地址。如果consul不能加入任何指定的地址中，则agent会启动失败，默认agent启动时不会加入任何节点</td></tr><tr><td>retry-interval</td><td>两次join之间的时间间隔，默认是30s</td></tr><tr><td>retry-max</td><td>尝试重复join的次数，默认是0，也就是无限次尝试</td></tr><tr><td>log-level</td><td>consul agent启动后显示的日志信息级别。默认是info，可选：trace、debug、info、warn、err</td></tr><tr><td>node</td><td>节点在集群中的名称，在一个集群中必须是唯一的，默认是该节点的主机名</td></tr><tr><td>protocol</td><td>consul使用的协议版本</td></tr><tr><td>rejoin</td><td>使consul忽略先前的离开，在再次启动后仍旧尝试加入集群中</td></tr><tr><td>server</td><td>定义agent运行在server模式，每个集群至少有一个server，建议每个集群的server不要超过5个</td></tr><tr><td>syslog</td><td>开启系统日志功能，只在linux/osx上生效</td></tr><tr><td>pid-file</td><td>提供一个路径来存放pid文件，可以使用该文件进行SIGINT/SIGHUP(关闭/更新)agent</td></tr></tbody></table><h2 id="2-4-Docker安装Consul集群"><a href="#2-4-Docker安装Consul集群" class="headerlink" title="2.4. Docker安装Consul集群"></a>2.4. Docker安装Consul集群</h2><h3 id="2-4-1-拉取consul官方镜像"><a href="#2-4-1-拉取consul官方镜像" class="headerlink" title="2.4.1. 拉取consul官方镜像"></a>2.4.1. 拉取consul官方镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">madison@ubuntu:~$ docker pull consul:latest</span><br></pre></td></tr></table></figure><h3 id="2-4-2-启动Server节点"><a href="#2-4-2-启动Server节点" class="headerlink" title="2.4.2. 启动Server节点"></a>2.4.2. 启动Server节点</h3><p>运行<code>consul</code>镜像，启动<code>Server Master</code>节点<code>node1</code>：</p><p><strong>node1</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">madison@ubuntu:~$ docker run -d --name=node1 --restart=always \</span><br><span class="line">             -e <span class="string">'CONSUL_LOCAL_CONFIG=&#123;"skip_leave_on_interrupt": true&#125;'</span> \</span><br><span class="line">             -p 8300:8300 \</span><br><span class="line">             -p 8301:8301 \</span><br><span class="line">             -p 8301:8301/udp \</span><br><span class="line">             -p 8302:8302/udp \</span><br><span class="line">             -p 8302:8302 \</span><br><span class="line">             -p 8400:8400 \</span><br><span class="line">             -p 8500:8500 \</span><br><span class="line">             -p 8600:8600 \</span><br><span class="line">             -h node1 \</span><br><span class="line">             consul agent -server -<span class="built_in">bind</span>=172.17.0.2 -bootstrap-expect=3 -node=node1 \</span><br><span class="line">             -data-dir=/tmp/data-dir -client 0.0.0.0 -ui</span><br></pre></td></tr></table></figure></p><p>查看<code>node1</code>的日志，追踪运行情况：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/consul_node1_logs_1.png" alt=""></p><p>现在集群中还没有选举<code>leader</code>节点，继续启动其余两台<code>Server</code>节点<code>node2</code>和<code>node3</code>：</p><p><strong>node2</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">madison@ubuntu:~$ docker run -d --name=node2 --restart=always \</span><br><span class="line">             -e <span class="string">'CONSUL_LOCAL_CONFIG=&#123;"skip_leave_on_interrupt": true&#125;'</span> \</span><br><span class="line">             -p 9300:8300  \</span><br><span class="line">             -p 9301:8301 \</span><br><span class="line">             -p 9301:8301/udp \</span><br><span class="line">             -p 9302:8302/udp \</span><br><span class="line">             -p 9302:8302 \</span><br><span class="line">             -p 9400:8400 \</span><br><span class="line">             -p 9500:8500 \</span><br><span class="line">             -p 9600:8600 \</span><br><span class="line">             -h node2 \</span><br><span class="line">             consul agent -server -<span class="built_in">bind</span>=172.17.0.3 \</span><br><span class="line">             -join=192.168.127.128 -node-id=$(uuidgen | awk <span class="string">'&#123;print tolower($0)&#125;'</span>) \</span><br><span class="line">             -node=node2 \</span><br><span class="line">             -data-dir=/tmp/data-dir -client 0.0.0.0 -ui</span><br></pre></td></tr></table></figure></p><p>查看<code>node2</code>节点的进程启动日志：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/consul_node2_logs_1.png" alt=""></p><p><strong>node3</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">madison@ubuntu:~$ docker run -d --name=node3 --restart=always \</span><br><span class="line">             -e <span class="string">'CONSUL_LOCAL_CONFIG=&#123;"skip_leave_on_interrupt": true&#125;'</span> \</span><br><span class="line">             -p 10300:8300  \</span><br><span class="line">             -p 10301:8301 \</span><br><span class="line">             -p 10301:8301/udp \</span><br><span class="line">             -p 10302:8302/udp \</span><br><span class="line">             -p 10302:8302 \</span><br><span class="line">             -p 10400:8400 \</span><br><span class="line">             -p 10500:8500 \</span><br><span class="line">             -p 10600:8600 \</span><br><span class="line">             -h node2 \</span><br><span class="line">             consul agent -server -<span class="built_in">bind</span>=172.17.0.4 \</span><br><span class="line">             -join=192.168.127.128 -node-id=$(uuidgen | awk <span class="string">'&#123;print tolower($0)&#125;'</span>) \</span><br><span class="line">             -node=node3 \</span><br><span class="line">             -data-dir=/tmp/data-dir -client 0.0.0.0 -ui</span><br></pre></td></tr></table></figure></p><p>查看<code>node3</code>节点的进程启动日志：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/consul_node3_logs_1.png" alt=""></p><p>当3个<code>Server</code>节点都启动并正常运行时，观察<code>node2</code>和<code>node3</code>的进程日志，可以发现<code>node1</code>被选举为<code>leader</code>节点，也就是这个<strong>数据中心</strong>的<code>Server Master</code>。</p><p>再次查看<code>node1</code>节点的进程启动日志：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/consul_node1_logs_2.png" alt=""></p><p>观察日志发现，<code>node2</code>和<code>node3</code>都成功join到了<code>node1</code>所在的数据中心<code>dc1</code>。当集群中有3台<code>Consul Server</code>启动时，<code>node1</code>被选举为<code>dc1</code>中的主节点。然后，<code>node1</code>会通过心跳检查的方式，不断地对<code>node2</code>和<code>node3</code>进行健康检查。</p><h3 id="2-4-4-启动Client节点"><a href="#2-4-4-启动Client节点" class="headerlink" title="2.4.4. 启动Client节点"></a>2.4.4. 启动Client节点</h3><p><strong>node4</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">madison@ubuntu:~$ docker run -d --name=node4  --restart=always \</span><br><span class="line">            -e <span class="string">'CONSUL_LOCAL_CONFIG=&#123;"leave_on_terminate": true&#125;'</span> \</span><br><span class="line">            -p 11300:8300 \</span><br><span class="line">            -p 11301:8301 \</span><br><span class="line">            -p 11301:8301/udp \</span><br><span class="line">            -p 11302:8302/udp \</span><br><span class="line">            -p 11302:8302 \</span><br><span class="line">            -p 11400:8400 \</span><br><span class="line">            -p 11500:8500 \</span><br><span class="line">            -p 11600:8600 \</span><br><span class="line">            -h node4 \</span><br><span class="line">            consul agent -<span class="built_in">bind</span>=172.17.0.5 -retry-join=192.168.127.128  \</span><br><span class="line">            -node-id=$(uuidgen | awk <span class="string">'&#123;print tolower($0)&#125;'</span>) \</span><br><span class="line">            -node=node4 -client 0.0.0.0 -ui</span><br></pre></td></tr></table></figure><p>查看<code>node4</code>节点的进程启动日志:</p><p><img src="http://ols3fdyll.bkt.clouddn.com/consul_node4_logs_2.png" alt=""></p><p>可以发现：<code>node4</code>是以<code>Client</code>模式启动运行的。启动后完成后，把<code>dc1</code>数据中心中的以<code>Server</code>模式启动的节点<code>node1</code>、<code>node2</code>和<code>node3</code>都添加到<strong>本地缓存列表</strong>中。当客户端向<code>node4</code>发起服务发现的请求后，<code>node4</code>会通过<code>RPC</code>将请求转发给<code>Server</code>节点中的其中一台做处理。</p><h3 id="2-4-5-查看集群状态"><a href="#2-4-5-查看集群状态" class="headerlink" title="2.4.5. 查看集群状态"></a>2.4.5. 查看集群状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">madison@ubuntu:~$ docker <span class="built_in">exec</span> -t node1 consul members</span><br></pre></td></tr></table></figure><p><code>dc1</code>数据中心中的4个节点<code>node1</code>, <code>node2</code>, <code>node3</code>和<code>node4</code>分别成功启动，<code>Status</code>表示他们的状态，都为<code>alive</code>。<code>node1</code>, <code>node2</code>, <code>node3</code>以<code>Server</code>模式启动，而<code>node4</code>以<code>Client</code>模式启动。</p><p><img src="http://ols3fdyll.bkt.clouddn.com/consul_members.png" alt=""></p><h2 id="2-5-Docker安装Registrator"><a href="#2-5-Docker安装Registrator" class="headerlink" title="2.5. Docker安装Registrator"></a>2.5. Docker安装Registrator</h2><h3 id="2-5-1-拉取Registrator的镜像"><a href="#2-5-1-拉取Registrator的镜像" class="headerlink" title="2.5.1. 拉取Registrator的镜像"></a>2.5.1. 拉取Registrator的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">madison@ubuntu:~$ docker pull gliderlabs/registrator:latest</span><br></pre></td></tr></table></figure><h3 id="2-5-2-启动Registrator节点"><a href="#2-5-2-启动Registrator节点" class="headerlink" title="2.5.2. 启动Registrator节点"></a>2.5.2. 启动Registrator节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">madison@ubuntu:~$ docker run -d --name=registrator \</span><br><span class="line">             -v /var/run/docker.sock:/tmp/docker.sock \</span><br><span class="line">             --net=host \</span><br><span class="line">             gliderlabs/registrator -ip=<span class="string">"192.168.127.128"</span> consul://192.168.127.128:8500</span><br></pre></td></tr></table></figure><blockquote><p> –net指定为host表明使用主机模式。<br> -ip用于指定宿主机的IP地址，用于健康检查的通信地址。<br> consul://192.168.127.128:8500: 使用Consul作为服务注册表，指定具体的Consul通信地址进行服务注册和注销（注意：8500是Consul对外暴露的HTTP通信端口）。</p></blockquote><p>查看<code>Registrator</code>的容器进程启动日志：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/registrator_logs_1.png" alt=""></p><p><code>Registrator</code>在启动过程完成了以下几步操作：</p><ol><li>查看Consul数据中心的leader节点，作为服务注册表；</li><li>同步当前宿主机的启用容器，以及所有的服务端口；</li><li>分别将各个容器发布的服务地址/端口注册到Consul的服务注册列表。</li></ol><h3 id="2-5-3-查看Consul的注册状态"><a href="#2-5-3-查看Consul的注册状态" class="headerlink" title="2.5.3. 查看Consul的注册状态"></a>2.5.3. 查看Consul的注册状态</h3><p><code>Consul</code>提供了一个<code>Web UI</code>来可视化<strong>服务注册列表</strong>、<strong>通信节点</strong>、<strong>数据中心</strong>和<strong>键/值存储</strong>等，直接访问宿主机的<code>8500</code>端口。</p><p><strong>服务注册列表</strong>：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/consul_ui_1.png" alt=""></p><p><code>NODES</code>节点下挂载着<code>dc1</code>数据中心中的所有的<code>Consul</code>节点，包括<code>Consul Server</code>和<code>Client</code>。</p><p><strong>通信节点列表</strong>：</p><p><img src="http://ols3fdyll.bkt.clouddn.com/consul_ui_2.png" alt=""></p><p>启动<code>Registrator</code>以后，宿主机中的所有容器把服务都注册到<code>Consul</code>的<code>SERVICES</code>上，测试完成！</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>单数据中心</strong>的<code>Consul</code>集群的搭建就完成了！！！后续章节我会介绍如何使用<code>Registrator</code>进行服务注册的<strong>标签化</strong>。然后通过<code>docker</code>部署<strong>多实例</strong>的<code>Web</code>容器来实现基于<code>HTTP</code>的<code>RESTful Service</code>和基于<code>TCP</code>的<code>RPC Service</code>的<strong>服务注册</strong>和<strong>健康检查定义</strong>，并演示如何以<strong>标签</strong>标识一个服务的多个实例。</p><hr><p>欢迎扫码关注我的个人技术公众号： 零壹技术栈</p><p><img src="http://upload-images.jianshu.io/upload_images/10548396-035e78bdc34c7525?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>本帐号将持续分享后端技术干货，包括虚拟机基础，多线程编程，高性能框架，异步、缓存和消息中间件，分布式和微服务，架构学习和进阶等学习资料和文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;近年微服务架构在互联网应用领域中愈来愈火，引入微服务主要解决了单体应用&lt;strong&gt;多个模块的紧耦合&lt;/strong&gt;、&lt;strong&gt;无法扩展&lt;/strong&gt;和&lt;strong&gt;运维困难&lt;/strong&gt;等问题。微服务架构就是按照&lt;strong&gt;功能粒度&lt;/strong&gt;将业务模块进行&lt;strong&gt;垂直拆分&lt;/strong&gt;，对单体应用本身进行&lt;strong&gt;服务化&lt;/strong&gt;和&lt;strong&gt;组件化&lt;/strong&gt;，每个组件单独部署为&lt;strong&gt;小应用&lt;/strong&gt;（从&lt;code&gt;DB&lt;/code&gt;到&lt;code&gt;UI&lt;/code&gt;）。微服务与微服务之间通过&lt;code&gt;Service API&lt;/code&gt;进行交互，同时为了支持&lt;strong&gt;水平扩展&lt;/strong&gt;、&lt;strong&gt;性能提升&lt;/strong&gt;和&lt;strong&gt;服务可用性&lt;/strong&gt;，单个服务允许同时部署一个或者多个&lt;strong&gt;服务实例&lt;/strong&gt;。在运行时，每个实例通常是一个&lt;strong&gt;云虚拟机&lt;/strong&gt;或者&lt;code&gt;Docker&lt;/code&gt;&lt;strong&gt;容器&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="微服务系列" scheme="https://ostenant.coding.me/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Docker" scheme="https://ostenant.coding.me/tags/Docker/"/>
    
      <category term="Consul" scheme="https://ostenant.coding.me/tags/Consul/"/>
    
      <category term="Registrator" scheme="https://ostenant.coding.me/tags/Registrator/"/>
    
  </entry>
  
</feed>
